//------------------------------------------------------------------------------
// <auto-generated>
//   This file was generated by T4 code generator SimpleParentChildModel.tt.
//   Any changes made to this file manually may cause incorrect behavior
//   and will be lost next time the file is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Security.Permissions;
using System.ServiceModel;
using System.ServiceModel.Activation;
using System.Transactions;
using NTier.Common.Domain.Model;
using NTier.Server.Domain.Repositories;
using NTier.Server.Domain.Service;
using Test.Common.Domain.Model.SimpleParentChild;
using Test.Common.Domain.Service.Contracts;
using Test.Server.Domain.Repositories;


namespace Test.Server.Domain.Service
{
    public partial class SimpleParentChildDataService : DataService<ISimpleParentChildRepository>, ISimpleParentChildDataService
    {
        #region fields
 
        private static Func<ClientInfo, ISimpleParentChildRepository> _defaultRepositoryFactory = clientInfo => new SimpleParentChildRepository();
        private readonly Func<ClientInfo, ISimpleParentChildRepository> _repositoryFactory;
 
        #endregion fields
 
        #region constructor
 
        public SimpleParentChildDataService()
            : this(_defaultRepositoryFactory)
        {
        }
 
        public SimpleParentChildDataService(Func<ClientInfo, ISimpleParentChildRepository> repositoryFactory)
        {
            if (ReferenceEquals(null, repositoryFactory)) throw new ArgumentNullException("repositoryFactory");
            _repositoryFactory = repositoryFactory;
        }
 
        #endregion constructor

        #region query service methods

        partial void PreProcessing(ClientInfo clientInfo, ref Query query, ISimpleParentChildRepository repository);
        partial void PostProcessing(ClientInfo clientInfo, Query query, ref QueryResult<Parent> result, ISimpleParentChildRepository repository);
        partial void PostProcessing(ClientInfo clientInfo, Query query, ref QueryResult<Child> result, ISimpleParentChildRepository repository);

        [OperationBehavior(Impersonation = ImpersonationOption.Allowed)]
        public QueryResult<Parent> GetParentSet(ClientInfo clientInfo, Query query)
        {
            using (var dataRepository = _repositoryFactory(clientInfo))
            {
                PreProcessing(clientInfo, ref query, dataRepository);
                var result = Get(dataRepository.ParentSet.AsNoTrackingQueryable(), query, clientInfo);
                PostProcessing(clientInfo, query, ref result, dataRepository);
                return result;
            }
        }

        [OperationBehavior(Impersonation = ImpersonationOption.Allowed)]
        public QueryResult<Child> GetChildSet(ClientInfo clientInfo, Query query)
        {
            using (var dataRepository = _repositoryFactory(clientInfo))
            {
                PreProcessing(clientInfo, ref query, dataRepository);
                var result = Get(dataRepository.ChildSet.AsNoTrackingQueryable(), query, clientInfo);
                PostProcessing(clientInfo, query, ref result, dataRepository);
                return result;
            }
        }

        #endregion query service methods

        #region update service method

        partial void PreProcessing(ClientInfo clientInfo, ref SimpleParentChildChangeSet changeSet, ISimpleParentChildRepository repository);
        partial void BeforeSaving(ClientInfo clientInfo, ref SimpleParentChildChangeSet changeSet, ISimpleParentChildRepository repository);
        partial void PostProcessing(ClientInfo clientInfo, ref SimpleParentChildResultSet result, ISimpleParentChildRepository repository);

        [OperationBehavior(TransactionScopeRequired = true, Impersonation = ImpersonationOption.Allowed)]
        public SimpleParentChildResultSet SubmitChanges(ClientInfo clientInfo, SimpleParentChildChangeSet changeSet)
        {
            var resultSet = new SimpleParentChildResultSet(changeSet);
            using (var transactionScope = CreateSavingTransactionScope())
            {
                using (var dataRepository = _repositoryFactory(clientInfo))
                {
                    // optional custom processing
                    PreProcessing(clientInfo, ref changeSet, dataRepository);

                    // apply chnages to repository
                    ApplyChanges(dataRepository, dataRepository.ParentSet, changeSet, changeSet.ParentSet, clientInfo);
                    ApplyChanges(dataRepository, dataRepository.ChildSet, changeSet, changeSet.ChildSet, clientInfo);

                    // optional custom processing
                    BeforeSaving(clientInfo, ref changeSet, dataRepository);

                    // save changes
                    SaveChanges(dataRepository, changeSet, resultSet);

                    // optional custom processing
                    PostProcessing(clientInfo, ref resultSet, dataRepository);
                }
                transactionScope.Complete();
            }
            return resultSet;
        }

        protected override FaultException CreateUpdateFaultException(string message, IEnumerable<Entity> entities)
        {
            return new FaultException<SimpleParentChildUpdateFault>(new SimpleParentChildUpdateFault(message, entities), "Update error");
        }

        protected override FaultException CreateOptimisticConcurrencyFaultException(string message, IEnumerable<Entity> entities)
        {
            return new FaultException<SimpleParentChildOptimisticConcurrencyFault>(new SimpleParentChildOptimisticConcurrencyFault(message, entities), "Optimistic concurrency error");
        }

        #endregion update service method
    }
}

