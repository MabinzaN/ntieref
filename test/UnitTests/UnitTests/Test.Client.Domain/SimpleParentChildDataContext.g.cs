//------------------------------------------------------------------------------
// <auto-generated>
//   This file was generated by T4 code generator SimpleParentChildModel.tt.
//   Any changes made to this file manually may cause incorrect behavior
//   and will be lost next time the file is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel;
using System.ComponentModel.Composition;
using System.ComponentModel.Composition.Hosting;
using System.Data;
using System.Linq;
using System.ServiceModel;
using System.Transactions;
using NTier.Client.Domain;
using NTier.Client.Domain.Service.ChannelFactory;
using NTier.Common.Domain.Model;
using Test.Common.Domain.Model.SimpleParentChild;
using Test.Common.Domain.Service.Contracts;

namespace Test.Client.Domain
{
    public sealed partial class SimpleParentChildDataContext : DataContext<SimpleParentChildResultSet>, ISimpleParentChildDataContext
    {
        #region Fields

        private readonly Func<ISimpleParentChildDataService> _dataServiceFactory;

        private readonly Func<ISimpleParentChildChangeSetFactory> _changeSetFactoryProvider;

        private readonly InternalEntitySet<Parent> _parentSet;
        private readonly InternalEntitySet<Child> _childSet;
 
        private IEntitySet<Parent> parentEntitySet;
        private IEntitySet<Child> childEntitySet;

        #endregion Fields

        #region Contructor

        partial void Initialize();

        public SimpleParentChildDataContext(Func<ISimpleParentChildDataService> dataServiceFactory, Func<ISimpleParentChildChangeSetFactory> changeSetFactoryProvider = null)
        {
            _dataServiceFactory = dataServiceFactory;

            _changeSetFactoryProvider = changeSetFactoryProvider ?? (() => new SimpleParentChildChangeSetFactory());

            _parentSet = CreateAndRegisterInternalEntitySet<Parent>();
            _childSet = CreateAndRegisterInternalEntitySet<Child>();

            Initialize();
        }

        public SimpleParentChildDataContext(IChannelFactory<ISimpleParentChildDataService> channelFactory, Func<ISimpleParentChildChangeSetFactory> changeSetFactoryProvider = null)
            : this(channelFactory.CreateChannel, changeSetFactoryProvider)
        {
        }

        public SimpleParentChildDataContext(string endpointConfigurationName = "SimpleParentChildDataService", Func<ISimpleParentChildChangeSetFactory> changeSetFactoryProvider = null)
            : this(CreateChannelFactory(endpointConfigurationName).CreateChannel, changeSetFactoryProvider)
        {
        }

        private static ChannelFactory<ISimpleParentChildDataService> CreateChannelFactory(string endpointConfigurationName)
        {
            var channelFactory = string.IsNullOrEmpty(endpointConfigurationName)
                ? new ChannelFactory<ISimpleParentChildDataService>()
                : new ChannelFactory<ISimpleParentChildDataService>(endpointConfigurationName);
            return channelFactory;
        }

        #endregion Contructor

        #region Entities

        #region ParentSet

        public IEntitySet<Parent> ParentSet
        {
            get
            {
                if (ReferenceEquals(null, parentEntitySet))
                {
                    parentEntitySet = CreateEntitySet<Parent>(_parentSet, AttachWithRelations, OnDetach, GetParentSet);
                }

                return parentEntitySet;
            }
        }

        public void Add(Parent entity)
        {
            ParentSet.Add(entity);
        }

        public void Delete(Parent entity)
        {
            ParentSet.Delete(entity);
        }

        public void Attach(Parent entity)
        {
            ParentSet.Attach(entity);
        }

        public void AttachAsModified(Parent entity, Parent original)
        {
            ParentSet.AttachAsModified(entity, original);
        }

        public void Detach(Parent entity)
        {
            ParentSet.Detach(entity);
        }

        private QueryResult<Parent> GetParentSet(ClientInfo clientInfo, Query query)
        {
            var service = _dataServiceFactory();
            try
            {
                var result = service.GetParentSet(clientInfo, query);
                return result;
            }
            finally
            {
                var client = service as ICommunicationObject;
                if (client != null)
                {
                    if (client.State == CommunicationState.Faulted)
                    {
                        client.Abort();
                    }
                    else
                    {
                        client.Close();
                    }
                }
            }
        }

        private Parent AttachWithRelations(Parent entity, InsertMode insertMode = InsertMode.Attach, MergeOption mergeOption = MergeOption.AppendOnly, List<object> referenceTrackingList = null)
        {
            #region iteration tracking

            if (ReferenceEquals(null, referenceTrackingList))
            {
                referenceTrackingList = new List<object>();
            }

            if (referenceTrackingList.Contains(entity))
            {
                return _parentSet.GetExisting(entity);
            }
            else
            {
                referenceTrackingList.Add(entity);
            }

            #endregion

            #region add/attach entity

            Parent existingEntity = null;

            switch (insertMode)
            {
                case InsertMode.Add:
                    existingEntity = _parentSet.Add(entity);
                    break;
                case InsertMode.Attach:
                    existingEntity = _parentSet.Attach(entity);
                    break;
                default:
                    throw new Exception(string.Format("Implementation Exception: missing action for {0}", insertMode));
            }

            if (!ReferenceEquals(null, existingEntity) && ReferenceEquals(existingEntity, entity))
            {
                return existingEntity;
            }

            #endregion

            #region attach relations recursively
            

            if (!ReferenceEquals(null, entity.Children))
            {
                // register relation's collection changed event if entity is new to context
                if (ReferenceEquals(null, existingEntity))
                {
                    entity.Children.CollectionChanged += On_parent_children_collectionChanged;
                }

                // attach related entities to context
                if (entity.Children.Count > 0)
                {
                    foreach (var item in entity.Children.ToArray())
                    {
                        var existingRelatedEntity = AttachWithRelations(item, insertMode, mergeOption, referenceTrackingList);

                        // update relation if entity is new to context or relation is new to entity
                        if (ReferenceEquals(null, existingEntity) || !existingEntity.Children.Contains(item))
                        {
                            if (!ReferenceEquals(null, existingRelatedEntity) && !ReferenceEquals(existingRelatedEntity, item))
                            {
                                // check merge options
                                if (!(mergeOption == MergeOption.PreserveChanges && existingRelatedEntity.ChangeTracker.OriginalValues.ContainsKey("Parent")))
                                {
                                    using (entity.ChangeTrackingPrevention())
                                    {
                                        entity.Children.Replace(item, existingRelatedEntity);
                                    }

                                    using (existingRelatedEntity.ChangeTrackingPrevention())
                                    {
                                        existingRelatedEntity.Parent = entity;
                                    }
                                }
                            }
                        }
                    }
                }
            }

            #endregion

            #region refresh existing entity based on merge options

            if (!ReferenceEquals(null, existingEntity) && !ReferenceEquals(existingEntity, entity))
            {
                if (ParentSet.MergeOption == MergeOption.OverwriteChanges)
                {
                    Invoke(delegate
                    {
                        existingEntity.Refresh(entity, trackChanges: false);
                        existingEntity.AcceptChanges();
                    });
                }
                else if (ParentSet.MergeOption == MergeOption.PreserveChanges)
                {
                    Invoke(delegate
                    {
                        existingEntity.Refresh(entity, trackChanges: false, preserveExistingChanges: true);
                    });
                }
            }

            #endregion

            return existingEntity;
        }

        private void OnDetach(Parent entity)
        {
            if (!ReferenceEquals(null, entity.Children))
            {
                entity.Children.CollectionChanged -= On_parent_children_collectionChanged;
            }

        }

        private void On_parent_children_collectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            var entity = sender as Parent;
            if (!ReferenceEquals(null, entity) && entity.IsChangeTrackingPrevented)
            {
                return;
            }

            if (!ReferenceEquals(null, e.NewItems))
            {
                foreach (Child item in e.NewItems)
                {
                    Attach(item);
                }
            }
        }

        #endregion ParentSet

        #region ChildSet

        public IEntitySet<Child> ChildSet
        {
            get
            {
                if (ReferenceEquals(null, childEntitySet))
                {
                    childEntitySet = CreateEntitySet<Child>(_childSet, AttachWithRelations, OnDetach, GetChildSet);
                }

                return childEntitySet;
            }
        }

        public void Add(Child entity)
        {
            ChildSet.Add(entity);
        }

        public void Delete(Child entity)
        {
            ChildSet.Delete(entity);
        }

        public void Attach(Child entity)
        {
            ChildSet.Attach(entity);
        }

        public void AttachAsModified(Child entity, Child original)
        {
            ChildSet.AttachAsModified(entity, original);
        }

        public void Detach(Child entity)
        {
            ChildSet.Detach(entity);
        }

        private QueryResult<Child> GetChildSet(ClientInfo clientInfo, Query query)
        {
            var service = _dataServiceFactory();
            try
            {
                var result = service.GetChildSet(clientInfo, query);
                return result;
            }
            finally
            {
                var client = service as ICommunicationObject;
                if (client != null)
                {
                    if (client.State == CommunicationState.Faulted)
                    {
                        client.Abort();
                    }
                    else
                    {
                        client.Close();
                    }
                }
            }
        }

        private Child AttachWithRelations(Child entity, InsertMode insertMode = InsertMode.Attach, MergeOption mergeOption = MergeOption.AppendOnly, List<object> referenceTrackingList = null)
        {
            #region iteration tracking

            if (ReferenceEquals(null, referenceTrackingList))
            {
                referenceTrackingList = new List<object>();
            }

            if (referenceTrackingList.Contains(entity))
            {
                return _childSet.GetExisting(entity);
            }
            else
            {
                referenceTrackingList.Add(entity);
            }

            #endregion

            #region add/attach entity

            Child existingEntity = null;

            switch (insertMode)
            {
                case InsertMode.Add:
                    existingEntity = _childSet.Add(entity);
                    break;
                case InsertMode.Attach:
                    existingEntity = _childSet.Attach(entity);
                    break;
                default:
                    throw new Exception(string.Format("Implementation Exception: missing action for {0}", insertMode));
            }

            if (!ReferenceEquals(null, existingEntity) && ReferenceEquals(existingEntity, entity))
            {
                return existingEntity;
            }

            #endregion

            #region attach relations recursively
            
            // register entity's property changed event if entity is new to context
            if (ReferenceEquals(null, existingEntity))
            {
                entity.PropertyChanged += On_child_propertyChanged;
            }

            // attach related entity to context
            if (!ReferenceEquals(null, entity.Parent))
            {
                var existingRelatedEntity = AttachWithRelations(entity.Parent, insertMode, mergeOption, referenceTrackingList);

                // update relation if entity is new to context or relation is new to entity
                if (ReferenceEquals(null, existingEntity) || !entity.Parent.Equals(existingEntity.Parent))
                {
                    if (!ReferenceEquals(null, existingRelatedEntity) && !ReferenceEquals(existingRelatedEntity, entity.Parent))
                    {
                        // check merge options
                        if (!(mergeOption == MergeOption.PreserveChanges && existingRelatedEntity.ChangeTracker.OriginalValues.ContainsKey("Children")))
                        {
                            using (entity.ChangeTrackingPrevention())
                            {
                                entity.Parent = existingRelatedEntity;
                            }

                            using (existingRelatedEntity.ChangeTrackingPrevention())
                            {
                                var entityToReplace = existingRelatedEntity.Children.FirstOrDefault(e => e.Equals(entity));
                                if (!ReferenceEquals(null, entityToReplace))
                                {
                                    using (entityToReplace.ChangeTrackingPrevention())
                                    {
                                        existingRelatedEntity.Children.Remove(entityToReplace);
                                    }
                                }

                                existingRelatedEntity.Children.Add(entity);
                            }
                        }
                    }
                }
            }

            #endregion

            #region refresh existing entity based on merge options

            if (!ReferenceEquals(null, existingEntity) && !ReferenceEquals(existingEntity, entity))
            {
                if (ChildSet.MergeOption == MergeOption.OverwriteChanges)
                {
                    Invoke(delegate
                    {
                        existingEntity.Refresh(entity, trackChanges: false);
                        existingEntity.AcceptChanges();
                    });
                }
                else if (ChildSet.MergeOption == MergeOption.PreserveChanges)
                {
                    Invoke(delegate
                    {
                        existingEntity.Refresh(entity, trackChanges: false, preserveExistingChanges: true);
                    });
                }
            }

            #endregion

            return existingEntity;
        }

        private void OnDetach(Child entity)
        {
            entity.PropertyChanged -= On_child_propertyChanged;

        }

        private void On_child_propertyChanged(object sender, PropertyChangedEventArgs e)
        {
            var entity = sender as Child;
            if (!ReferenceEquals(null, entity) && entity.IsChangeTrackingPrevented)
            {
                return;
            }

            if (e.PropertyName == "Parent")
            {
                var relation = entity[e.PropertyName] as Parent;
                if (!ReferenceEquals(null, relation))
                {
                    Attach(relation);
                }
            }
        }

        #endregion ChildSet

        #endregion Entities

        #region Submit Changes

        protected override SimpleParentChildResultSet SubmitChanges(ClientInfo clientInfo)
        {
            // get reduced change set
            var changeSet = GetChangeSet();

            if (!changeSet.IsEmpty)
            {
                var service = _dataServiceFactory();
                try
                {
                    // submit data
                    var resultSet = service.SubmitChanges(clientInfo, changeSet);
                    return resultSet;
                }
                finally
                {
                    var client = service as ICommunicationObject;
                    if (client != null)
                    {
                        if (client.State == CommunicationState.Faulted)
                        {
                            client.Abort();
                        }
                        else
                        {
                            client.Close();
                        }
                    }
                }
            }
            else
            {
                // return empty result set
                return new SimpleParentChildResultSet(changeSet);
            }
        }

        private SimpleParentChildChangeSet GetChangeSet()
        {
            IEnumerable<Parent> parentSet;
            lock (_parentSet.SyncRoot)
            {
                parentSet = _parentSet.GetAllEntities();
            }

            IEnumerable<Child> childSet;
            lock (_childSet.SyncRoot)
            {
                childSet = _childSet.GetAllEntities();
            }

            // get reduced change set
            var changeSet = _changeSetFactoryProvider().CreateChangeSet(
                parentSet, 
                childSet);

            return changeSet;
        }

        protected override void Refresh(SimpleParentChildResultSet resultSet)
        {
            lock (_parentSet.SyncRoot)
            {
                Refresh(_parentSet, resultSet.ParentSet);
            }

            lock (_childSet.SyncRoot)
            {
                Refresh(_childSet, resultSet.ChildSet);
            }

        }

        #endregion Submit Changes
    }
}
