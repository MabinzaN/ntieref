//------------------------------------------------------------------------------
// <auto-generated>
//   This file was generated by T4 code generator SimpleParentChildModel.tt.
//   Any changes made to this file manually may cause incorrect behavior
//   and will be lost next time the file is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using NTier.Common.Domain.Model;

namespace Test.Common.Domain.Model.SimpleParentChild
{
    [DataContract(IsReference = true)]
    public partial class SimpleParentChildChangeSet : IChangeSet
    {
        public SimpleParentChildChangeSet()
        {
        }

        protected SimpleParentChildChangeSet(SimpleParentChildChangeSet changeSet)
        {
            this.ParentSet = changeSet.ParentSet;
            this.ChildSet = changeSet.ChildSet;
        }

        [DataMember]
        public List<Parent> ParentSet { get; set; }

        [DataMember]
        public List<Child> ChildSet { get; set; }

        public bool IsEmpty
        {
            get
            {
                return (ReferenceEquals(null, ParentSet) || ParentSet.Count == 0)
                    && (ReferenceEquals(null, ChildSet) || ChildSet.Count == 0);
            }
        }

        public IEnumerator<Entity> GetEnumerator()
        {
            if (ParentSet != null && ParentSet.Count > 0)
            {
                foreach (var item in ParentSet)
                {
                    yield return item;
                }
            }

            if (ChildSet != null && ChildSet.Count > 0)
            {
                foreach (var item in ChildSet)
                {
                    yield return item;
                }
            }

        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }
    }
}
