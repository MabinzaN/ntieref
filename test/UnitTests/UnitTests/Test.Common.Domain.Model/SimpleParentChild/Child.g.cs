//------------------------------------------------------------------------------
// <auto-generated>
//   This file was generated by T4 code generator SimpleParentChildModel.tt.
//   Any changes made to this file manually may cause incorrect behavior
//   and will be lost next time the file is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Globalization;
using System.Reflection;
using System.Runtime.Serialization;
using NTier.Common.Domain.Model;

namespace Test.Common.Domain.Model.SimpleParentChild
{
    [Serializable]
    [DataContract(IsReference = true)]
    [KnownType(typeof(Parent))]
    public partial class Child : Entity, INotifyPropertyChanged, INotifyPropertyChanging, IDataErrorInfo
    {
        #region Constructor and Initialization

        // partial method for initialization
        partial void Initialize();

        public Child()
        {
            Initialize();
        }

        #endregion Constructor and Initialization

        #region Simple Properties

        [DataMember]
        [Key]
        [Required]
#if !CLIENT_PROFILE
        [RoundtripOriginal]
#endif
        [ServerGeneration(ServerGenerationTypes.Insert)]
        [SimpleProperty]
        public global::System.Int32 Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (!IsDeserializing && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'Id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    IdChanging(value);
                    OnPropertyChanging("Id", value);
                    var previousValue = _id;
                    _id = value;
                    OnPropertyChanged("Id", previousValue, value);
                    IdChanged(previousValue);
                }
            }
        }
        private global::System.Int32 _id;

        partial void IdChanging(global::System.Int32 newValue);
        partial void IdChanged(global::System.Int32 previousValue);

        [DataMember]
        [Required]
#if !CLIENT_PROFILE
        [RoundtripOriginal]
#endif
        [ForeignKeyProperty]
        [SimpleProperty]
        public global::System.Int32 ParentId
        {
            get { return _parentId; }
            set
            {
                if (_parentId != value)
                {
                    ParentIdChanging(value);
                    OnPropertyChanging("ParentId", value);
                    if (!IsDeserializing)
                    {
                        if (Parent != null && Parent.Id != value)
                        {
                            Parent = null;
                        }
                    }
                    var previousValue = _parentId;
                    _parentId = value;
                    OnPropertyChanged("ParentId", previousValue, value);
                    ParentIdChanged(previousValue);
                }
            }
        }
        private global::System.Int32 _parentId;

        partial void ParentIdChanging(global::System.Int32 newValue);
        partial void ParentIdChanged(global::System.Int32 previousValue);

        #endregion Simple Properties

        #region Complex Properties

        #endregion Complex Properties

        #region Navigation Properties

        [DataMember]
        [NavigationProperty]
        public Parent Parent
        {
            get { return _parent; }
            set
            {
                if (!ReferenceEquals(_parent, value))
                {
                    ParentChanging(value);
                    OnPropertyChanging("Parent", value);
                    var previousValue = _parent;
                    _parent = value;
                    FixupParent(previousValue);
                    OnPropertyChanged("Parent", previousValue, value, isNavigationProperty: true);
                    ParentChanged(previousValue);
                }
            }
        }
        private Parent _parent;

        partial void ParentChanging(Parent newValue);
        partial void ParentChanged(Parent previousValue);

        #endregion Navigation Properties

        #region ChangeTracking

        protected override void ClearNavigationProperties()
        {
            Parent = null;
        }

        #endregion ChangeTracking

        #region Association Fixup

        private void FixupParent(Parent previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }

            if (previousValue != null && previousValue.Children.Contains(this))
            {
                previousValue.Children.Remove(this);
            }

            if (Parent != null)
            {
                if (!Parent.Children.Contains(this))
                {
                    Parent.Children.Add(this);
                }

                ParentId = Parent.Id;
            }
            if (ChangeTracker.IsChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Parent")
                    && ReferenceEquals(ChangeTracker.OriginalValues["Parent"], Parent))
                {
                    //ChangeTracker.OriginalValues.Remove("Parent");
                }
                else
                {
                    //RecordOriginalValue("Parent", previousValue);
                }
                if (Parent != null && !Parent.ChangeTracker.IsChangeTrackingEnabled)
                {
                    Parent.StartTracking();
                }
            }
        }

        #endregion Association Fixup

        protected override bool IsKeyEqual(Entity other)
        {
            var entity = other as Child;
            if (ReferenceEquals(null, entity)) return false;
            return this.Id == entity.Id;
        }

        protected override int GetKeyHashCode()
        {
            return this.Id.GetHashCode();
        }
    }
}
