//------------------------------------------------------------------------------
// <auto-generated>
//   This file was generated by T4 code generator SimpleParentChildModel.tt.
//   Any changes made to this file manually may cause incorrect behavior
//   and will be lost next time the file is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Globalization;
using System.Reflection;
using System.Runtime.Serialization;
using NTier.Common.Domain.Model;

namespace Test.Common.Domain.Model.SimpleParentChild
{
    [Serializable]
    [DataContract(IsReference = true)]
    [KnownType(typeof(Child))]
    public partial class Parent : Entity, INotifyPropertyChanged, INotifyPropertyChanging, IDataErrorInfo
    {
        #region Constructor and Initialization

        // partial method for initialization
        partial void Initialize();

        public Parent()
        {
            Initialize();
        }

        #endregion Constructor and Initialization

        #region Simple Properties

        [DataMember]
        [Key]
        [Required]
#if !CLIENT_PROFILE
        [RoundtripOriginal]
#endif
        [ServerGeneration(ServerGenerationTypes.Insert)]
        [SimpleProperty]
        public global::System.Int32 Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (!IsDeserializing && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'Id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    IdChanging(value);
                    OnPropertyChanging("Id", value);
                    var previousValue = _id;
                    _id = value;
                    OnPropertyChanged("Id", previousValue, value);
                    IdChanged(previousValue);
                }
            }
        }
        private global::System.Int32 _id;

        partial void IdChanging(global::System.Int32 newValue);
        partial void IdChanged(global::System.Int32 previousValue);

        #endregion Simple Properties

        #region Complex Properties

        #endregion Complex Properties

        #region Navigation Properties

        [DataMember]
        [NavigationProperty]
        public TrackableCollection<Child> Children
        {
            get
            {
                if (_children == null)
                {
                    _children = new TrackableCollection<Child>();
                    _children.CollectionChanged += FixupChildren;
                }
                return _children;
            }
            set
            {
                if (!ReferenceEquals(_children, value))
                {
                    if (!IsDeserializing && ChangeTracker.IsChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }

                    if (_children != null)
                    {
                       _children.CollectionChanged -= FixupChildren;
                    }

                    _children = value;

                    if (_children != null)
                    {
                        _children.CollectionChanged += FixupChildren;
                    }

                    OnPropertyChanged("Children", trackInChangeTracker: false);
                }
            }
        }
        private TrackableCollection<Child> _children;

        #endregion Navigation Properties

        #region ChangeTracking

        protected override void ClearNavigationProperties()
        {
            Children.Clear();
        }

        #endregion ChangeTracking

        #region Association Fixup

        private void FixupChildren(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }

            if (e.NewItems != null)
            {
                foreach (Child item in e.NewItems)
                {
                    item.Parent = this;
                    if (ChangeTracker.IsChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.IsChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        RecordAdditionToCollectionProperties("Children", item);
                    }
                }
            }

            if (e.OldItems != null)
            {
                foreach (Child item in e.OldItems)
                {
                    if (ReferenceEquals(item.Parent, this))
                    {
                        item.Parent = null;
                    }
                    if (ChangeTracker.IsChangeTrackingEnabled)
                    {
                        RecordRemovalFromCollectionProperties("Children", item);
                    }
                }
            }
        }

        #endregion Association Fixup

        protected override bool IsKeyEqual(Entity other)
        {
            var entity = other as Parent;
            if (ReferenceEquals(null, entity)) return false;
            return this.Id == entity.Id;
        }

        protected override int GetKeyHashCode()
        {
            return this.Id.GetHashCode();
        }
    }
}
