//------------------------------------------------------------------------------
// <auto-generated>
//   This file was generated by T4 code generator Northwind.tt.
//   Any changes made to this file manually may cause incorrect behavior
//   and will be lost next time the file is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Data.Entity.Core.EntityClient;
using System.Data.Entity.Core.Objects;
using System.Data.Entity.Core.Objects.DataClasses;
using System.Diagnostics;
using System.Globalization;
using System.Linq;
using IntegrationTest.Common.Domain.Model.Northwind;
using NTier.Common.Domain.Model;
using NTier.Server.Domain.Repositories;

namespace IntegrationTest.Server.Domain.Repositories
{
    public partial class NorthwindRepository : NTier.Server.Domain.Repositories.EntityFramework.Repository, INorthwindRepository
    {
        #region Constructors

        public NorthwindRepository()
            : base("name=NorthwindEntities", "NorthwindEntities")
        {
        }

        public NorthwindRepository(string connectionString, string containerName = "NorthwindEntities")
            : base(connectionString, containerName)
        {
        }

        public NorthwindRepository(EntityConnection connection, string containerName = "NorthwindEntities")
            : base(connection, containerName)
        {
        }

        #endregion Constructors

        #region EntitySets

        public IEntitySet<Category> Categories
        {
            get { return _categories  ?? (_categories = CreateEntitySet<Category>("Categories")); }
        }
        private IEntitySet<Category> _categories;

        public IEntitySet<DemographicGroup> DemographicGroups
        {
            get { return _demographicGroups  ?? (_demographicGroups = CreateEntitySet<DemographicGroup>("DemographicGroups")); }
        }
        private IEntitySet<DemographicGroup> _demographicGroups;

        public IEntitySet<Customer> Customers
        {
            get { return _customers  ?? (_customers = CreateEntitySet<Customer>("Customers")); }
        }
        private IEntitySet<Customer> _customers;

        public IEntitySet<DynamicContentEntity> DynamicContentEntities
        {
            get { return _dynamicContentEntities  ?? (_dynamicContentEntities = CreateEntitySet<DynamicContentEntity>("DynamicContentEntities")); }
        }
        private IEntitySet<DynamicContentEntity> _dynamicContentEntities;

        public IEntitySet<Employee> Employees
        {
            get { return _employees  ?? (_employees = CreateEntitySet<Employee>("Employees")); }
        }
        private IEntitySet<Employee> _employees;

        public IEntitySet<Order_Detail> Order_Details
        {
            get { return _order_Details  ?? (_order_Details = CreateEntitySet<Order_Detail>("Order_Details")); }
        }
        private IEntitySet<Order_Detail> _order_Details;

        public IEntitySet<Order> Orders
        {
            get { return _orders  ?? (_orders = CreateEntitySet<Order>("Orders")); }
        }
        private IEntitySet<Order> _orders;

        public IEntitySet<Product> Products
        {
            get { return _products  ?? (_products = CreateEntitySet<Product>("Products")); }
        }
        private IEntitySet<Product> _products;

        public IEntitySet<Region> Regions
        {
            get { return _regions  ?? (_regions = CreateEntitySet<Region>("Regions")); }
        }
        private IEntitySet<Region> _regions;

        public IEntitySet<Shipper> Shippers
        {
            get { return _shippers  ?? (_shippers = CreateEntitySet<Shipper>("Shippers")); }
        }
        private IEntitySet<Shipper> _shippers;

        public IEntitySet<Supplier> Suppliers
        {
            get { return _suppliers  ?? (_suppliers = CreateEntitySet<Supplier>("Suppliers")); }
        }
        private IEntitySet<Supplier> _suppliers;

        public IEntitySet<Territory> Territories
        {
            get { return _territories  ?? (_territories = CreateEntitySet<Territory>("Territories")); }
        }
        private IEntitySet<Territory> _territories;

        #endregion EntitySets
    }
}
