//------------------------------------------------------------------------------
// <auto-generated>
//   This file was generated by T4 code generator Northwind.tt.
//   Any changes made to this file manually may cause incorrect behavior
//   and will be lost next time the file is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Globalization;
using System.Reflection;
using System.Runtime.Serialization;
using NTier.Common.Domain.Model;

namespace IntegrationTest.Common.Domain.Model.Northwind
{
    [Serializable]
    [DataContract(IsReference = true)]
    [KnownType(typeof(Order))]
    [KnownType(typeof(Product))]
    public partial class Order_Detail : Entity, INotifyPropertyChanged, INotifyPropertyChanging, IDataErrorInfo
    {
        #region Constructor and Initialization

        // partial method for initialization
        partial void Initialize();

        public Order_Detail()
        {
            Initialize();
        }

        #endregion Constructor and Initialization

        #region Simple Properties

        [DataMember]
        [Key]
        [Required]
#if !CLIENT_PROFILE
        [RoundtripOriginal]
#endif
        [SimpleProperty]
        public global::System.Int32 OrderID
        {
            get { return _orderID; }
            set
            {
                if (_orderID != value)
                {
                    if (!IsDeserializing && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'OrderID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    OrderIDChanging(value);
                    OnPropertyChanging("OrderID", value);
                    if (!IsDeserializing)
                    {
                        if (Order != null && Order.OrderID != value)
                        {
                            Order = null;
                        }
                    }
                    var previousValue = _orderID;
                    _orderID = value;
                    OnPropertyChanged("OrderID", previousValue, value);
                    OrderIDChanged(previousValue);
                }
            }
        }
        private global::System.Int32 _orderID;

        partial void OrderIDChanging(global::System.Int32 newValue);
        partial void OrderIDChanged(global::System.Int32 previousValue);

        [DataMember]
        [Key]
        [Required]
#if !CLIENT_PROFILE
        [RoundtripOriginal]
#endif
        [SimpleProperty]
        public global::System.Int32 ProductID
        {
            get { return _productID; }
            set
            {
                if (_productID != value)
                {
                    if (!IsDeserializing && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ProductID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    ProductIDChanging(value);
                    OnPropertyChanging("ProductID", value);
                    if (!IsDeserializing)
                    {
                        if (Product != null && Product.ProductID != value)
                        {
                            Product = null;
                        }
                    }
                    var previousValue = _productID;
                    _productID = value;
                    OnPropertyChanged("ProductID", previousValue, value);
                    ProductIDChanged(previousValue);
                }
            }
        }
        private global::System.Int32 _productID;

        partial void ProductIDChanging(global::System.Int32 newValue);
        partial void ProductIDChanged(global::System.Int32 previousValue);

        [DataMember]
        [Required]
#if !CLIENT_PROFILE
        [RoundtripOriginal]
#endif
        [SimpleProperty]
        public global::System.Decimal UnitPrice
        {
            get { return _unitPrice; }
            set
            {
                if (_unitPrice != value)
                {
                    UnitPriceChanging(value);
                    OnPropertyChanging("UnitPrice", value);
                    var previousValue = _unitPrice;
                    _unitPrice = value;
                    OnPropertyChanged("UnitPrice", previousValue, value);
                    UnitPriceChanged(previousValue);
                }
            }
        }
        private global::System.Decimal _unitPrice;

        partial void UnitPriceChanging(global::System.Decimal newValue);
        partial void UnitPriceChanged(global::System.Decimal previousValue);

        [DataMember]
        [Required]
#if !CLIENT_PROFILE
        [RoundtripOriginal]
#endif
        [SimpleProperty]
        public global::System.Int16 Quantity
        {
            get { return _quantity; }
            set
            {
                if (_quantity != value)
                {
                    QuantityChanging(value);
                    OnPropertyChanging("Quantity", value);
                    var previousValue = _quantity;
                    _quantity = value;
                    OnPropertyChanged("Quantity", previousValue, value);
                    QuantityChanged(previousValue);
                }
            }
        }
        private global::System.Int16 _quantity;

        partial void QuantityChanging(global::System.Int16 newValue);
        partial void QuantityChanged(global::System.Int16 previousValue);

        [DataMember]
        [Required]
#if !CLIENT_PROFILE
        [RoundtripOriginal]
#endif
        [SimpleProperty]
        public global::System.Single Discount
        {
            get { return _discount; }
            set
            {
                if (_discount != value)
                {
                    DiscountChanging(value);
                    OnPropertyChanging("Discount", value);
                    var previousValue = _discount;
                    _discount = value;
                    OnPropertyChanged("Discount", previousValue, value);
                    DiscountChanged(previousValue);
                }
            }
        }
        private global::System.Single _discount;

        partial void DiscountChanging(global::System.Single newValue);
        partial void DiscountChanged(global::System.Single previousValue);

        #endregion Simple Properties

        #region Complex Properties

        #endregion Complex Properties

        #region Navigation Properties

        [DataMember]
        [NavigationProperty]
        public Order Order
        {
            get { return _order; }
            set
            {
                if (!ReferenceEquals(_order, value))
                {
                    OrderChanging(value);
                    OnPropertyChanging("Order", value);
                    if (ChangeTracker.IsChangeTrackingEnabled && value != null)
                    {
                        // This the dependent end of an identifying relationship, so the principal end cannot be changed if it is already set,
                        // otherwise it can only be set to an entity with a primary key that is the same value as the dependent's foreign key.
                        if (OrderID != value.OrderID)
                        {
                            throw new InvalidOperationException("The principal end of an identifying relationship can only be changed when the dependent end is in the Added state.");
                        }
                    }
                    var previousValue = _order;
                    _order = value;
                    FixupOrder(previousValue);
                    OnPropertyChanged("Order", previousValue, value, isNavigationProperty: true);
                    OrderChanged(previousValue);
                }
            }
        }
        private Order _order;

        partial void OrderChanging(Order newValue);
        partial void OrderChanged(Order previousValue);

        [DataMember]
        [NavigationProperty]
        public Product Product
        {
            get { return _product; }
            set
            {
                if (!ReferenceEquals(_product, value))
                {
                    ProductChanging(value);
                    OnPropertyChanging("Product", value);
                    if (ChangeTracker.IsChangeTrackingEnabled && value != null)
                    {
                        // This the dependent end of an identifying relationship, so the principal end cannot be changed if it is already set,
                        // otherwise it can only be set to an entity with a primary key that is the same value as the dependent's foreign key.
                        if (ProductID != value.ProductID)
                        {
                            throw new InvalidOperationException("The principal end of an identifying relationship can only be changed when the dependent end is in the Added state.");
                        }
                    }
                    var previousValue = _product;
                    _product = value;
                    FixupProduct(previousValue);
                    OnPropertyChanged("Product", previousValue, value, isNavigationProperty: true);
                    ProductChanged(previousValue);
                }
            }
        }
        private Product _product;

        partial void ProductChanging(Product newValue);
        partial void ProductChanged(Product previousValue);

        #endregion Navigation Properties

        #region ChangeTracking

        protected override void ClearNavigationProperties()
        {
            Order = null;
            Product = null;
        }

        #endregion ChangeTracking

        #region Association Fixup

        private void FixupOrder(Order previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }

            if (previousValue != null && previousValue.Order_Details.Contains(this))
            {
                previousValue.Order_Details.Remove(this);
            }

            if (Order != null)
            {
                if (!Order.Order_Details.Contains(this))
                {
                    Order.Order_Details.Add(this);
                }

                OrderID = Order.OrderID;
            }
            if (ChangeTracker.IsChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Order")
                    && ReferenceEquals(ChangeTracker.OriginalValues["Order"], Order))
                {
                    //ChangeTracker.OriginalValues.Remove("Order");
                }
                else
                {
                    //RecordOriginalValue("Order", previousValue);
                }
                if (Order != null && !Order.ChangeTracker.IsChangeTrackingEnabled)
                {
                    Order.StartTracking();
                }
            }
        }

        private void FixupProduct(Product previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }

            if (previousValue != null && previousValue.Order_Details.Contains(this))
            {
                previousValue.Order_Details.Remove(this);
            }

            if (Product != null)
            {
                if (!Product.Order_Details.Contains(this))
                {
                    Product.Order_Details.Add(this);
                }

                ProductID = Product.ProductID;
            }
            if (ChangeTracker.IsChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Product")
                    && ReferenceEquals(ChangeTracker.OriginalValues["Product"], Product))
                {
                    //ChangeTracker.OriginalValues.Remove("Product");
                }
                else
                {
                    //RecordOriginalValue("Product", previousValue);
                }
                if (Product != null && !Product.ChangeTracker.IsChangeTrackingEnabled)
                {
                    Product.StartTracking();
                }
            }
        }

        #endregion Association Fixup

        protected override bool IsKeyEqual(Entity other)
        {
            var entity = other as Order_Detail;
            if (ReferenceEquals(null, entity)) return false;
            return this.OrderID == entity.OrderID
                && this.ProductID == entity.ProductID;
        }

        protected override int GetKeyHashCode()
        {
            unchecked
            {
                var hashCode = this.OrderID.GetHashCode();
                hashCode ^= this.ProductID.GetHashCode() * 397;
                return hashCode;
            }
        
        }
    }
}
