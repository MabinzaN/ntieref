//------------------------------------------------------------------------------
// <auto-generated>
//   This file was generated by T4 code generator Northwind.tt.
//   Any changes made to this file manually may cause incorrect behavior
//   and will be lost next time the file is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Globalization;
using System.Reflection;
using System.Runtime.Serialization;
using NTier.Common.Domain.Model;

namespace IntegrationTest.Common.Domain.Model.Northwind
{
    [Serializable]
    [DataContract(IsReference = true)]
    [KnownType(typeof(Order))]
    [KnownType(typeof(DemographicGroup))]
    [KnownType(typeof(Contact))]
    public partial class Customer : Entity, INotifyPropertyChanged, INotifyPropertyChanging, IDataErrorInfo
    {
        #region Constructor and Initialization

        // partial method for initialization
        partial void Initialize();

        public Customer()
        {
            Initialize();
        }

        #endregion Constructor and Initialization

        #region Simple Properties

        [DataMember]
        [Key]
        [Required]
#if !CLIENT_PROFILE
        [RoundtripOriginal]
#endif
        [SimpleProperty]
        public global::System.String CustomerID
        {
            get { return _customerID; }
            set
            {
                if (_customerID != value)
                {
                    if (!IsDeserializing && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'CustomerID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    CustomerIDChanging(value);
                    OnPropertyChanging("CustomerID", value);
                    var previousValue = _customerID;
                    _customerID = value;
                    OnPropertyChanged("CustomerID", previousValue, value);
                    CustomerIDChanged(previousValue);
                }
            }
        }
        private global::System.String _customerID;

        partial void CustomerIDChanging(global::System.String newValue);
        partial void CustomerIDChanged(global::System.String previousValue);

        [DataMember]
        [Required]
#if !CLIENT_PROFILE
        [RoundtripOriginal]
#endif
        [SimpleProperty]
        public global::System.String CompanyName
        {
            get { return _companyName; }
            set
            {
                if (_companyName != value)
                {
                    CompanyNameChanging(value);
                    OnPropertyChanging("CompanyName", value);
                    var previousValue = _companyName;
                    _companyName = value;
                    OnPropertyChanged("CompanyName", previousValue, value);
                    CompanyNameChanged(previousValue);
                }
            }
        }
        private global::System.String _companyName;

        partial void CompanyNameChanging(global::System.String newValue);
        partial void CompanyNameChanged(global::System.String previousValue);

        #endregion Simple Properties

        #region Complex Properties

        [DataMember]
        [ComplexProperty]
        public Contact Contact
        {
            get
            {
                if (!_contactInitialized && _contact == null)
                {
                    _contact = new Contact();
                    _contact.PropertyChanging += HandleContactChanging;
                    _contact.PropertyChanged += HandleContactChanged;
                }
                _contactInitialized = true;
                return _contact;
            }
            set
            {
                _contactInitialized = true;
                if (!Equals(_contact, value))
                {
                    ContactChanging(value);

                    if (_contact != null)
                    {
                        _contact.PropertyChanging -= HandleContactChanging;
                        _contact.PropertyChanged -= HandleContactChanged;
                    }

                    //HandleContactChanging(this, null);
                    OnPropertyChanging("Contact", value);
                    var previousValue = _contact;
                    _contact = value;
                    OnPropertyChanged("Contact", previousValue, value);

                    if (value != null)
                    {
                        _contact.PropertyChanging += HandleContactChanging;
                        _contact.PropertyChanged += HandleContactChanged;
                    }

                    ContactChanged(previousValue);
                }
            }
        }
        private Contact _contact;
        private bool _contactInitialized;

        partial void ContactChanging(Contact newValue);
        partial void ContactChanged(Contact previousValue);

        #endregion Complex Properties

        #region Navigation Properties

        [DataMember]
        [NavigationProperty]
        public TrackableCollection<Order> Orders
        {
            get
            {
                if (_orders == null)
                {
                    _orders = new TrackableCollection<Order>();
                    _orders.CollectionChanged += FixupOrders;
                }
                return _orders;
            }
            set
            {
                if (!ReferenceEquals(_orders, value))
                {
                    if (!IsDeserializing && ChangeTracker.IsChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }

                    if (_orders != null)
                    {
                       _orders.CollectionChanged -= FixupOrders;
                    }

                    _orders = value;

                    if (_orders != null)
                    {
                        _orders.CollectionChanged += FixupOrders;
                    }

                    OnPropertyChanged("Orders", trackInChangeTracker: false);
                }
            }
        }
        private TrackableCollection<Order> _orders;

        [DataMember]
        [NavigationProperty]
        public TrackableCollection<DemographicGroup> CustomerDemographics
        {
            get
            {
                if (_customerDemographics == null)
                {
                    _customerDemographics = new TrackableCollection<DemographicGroup>();
                    _customerDemographics.CollectionChanged += FixupCustomerDemographics;
                }
                return _customerDemographics;
            }
            set
            {
                if (!ReferenceEquals(_customerDemographics, value))
                {
                    if (!IsDeserializing && ChangeTracker.IsChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }

                    if (_customerDemographics != null)
                    {
                       _customerDemographics.CollectionChanged -= FixupCustomerDemographics;
                    }

                    _customerDemographics = value;

                    if (_customerDemographics != null)
                    {
                        _customerDemographics.CollectionChanged += FixupCustomerDemographics;
                    }

                    OnPropertyChanged("CustomerDemographics", trackInChangeTracker: false);
                }
            }
        }
        private TrackableCollection<DemographicGroup> _customerDemographics;

        #endregion Navigation Properties

        #region ChangeTracking

        // Performs validation of the members for the complex property Contact
        private void HandleContactChanging(object sender, PropertyChangingEventArgs args)
        {
            var propertyArgs = (PropertyChangingWithValuesEventArgs)args;
            OnComplexPropertyMemberChanging("Contact", args.PropertyName, propertyArgs.OldValue, propertyArgs.NewValue);
        }

        // Performes change tracking of the members for the complex property Contact
        private void HandleContactChanged(object sender, PropertyChangedEventArgs args)
        {
            //Contact.RecordComplexOriginalValues("Contact", this.Contact, ChangeTracker);
            var propertyArgs = (PropertyChangedWithValuesEventArgs)args;
            OnComplexPropertyMemberChanged("Contact", args.PropertyName, propertyArgs.OldValue, propertyArgs.NewValue);
        }

        protected override void ClearNavigationProperties()
        {
            Orders.Clear();
            CustomerDemographics.Clear();
        }

        #endregion ChangeTracking

        #region Association Fixup

        private void FixupOrders(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }

            if (e.NewItems != null)
            {
                foreach (Order item in e.NewItems)
                {
                    item.Customer = this;
                    if (ChangeTracker.IsChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.IsChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        RecordAdditionToCollectionProperties("Orders", item);
                    }
                }
            }

            if (e.OldItems != null)
            {
                foreach (Order item in e.OldItems)
                {
                    if (ReferenceEquals(item.Customer, this))
                    {
                        item.Customer = null;
                    }
                    if (ChangeTracker.IsChangeTrackingEnabled)
                    {
                        RecordRemovalFromCollectionProperties("Orders", item);
                    }
                }
            }
        }

        private void FixupCustomerDemographics(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }

            if (e.NewItems != null)
            {
                foreach (DemographicGroup item in e.NewItems)
                {
                    if (!item.Customers.Contains(this))
                    {
                        item.Customers.Add(this);
                    }
                    if (ChangeTracker.IsChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.IsChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        RecordAdditionToCollectionProperties("CustomerDemographics", item);
                    }
                }
            }

            if (e.OldItems != null)
            {
                foreach (DemographicGroup item in e.OldItems)
                {
                    if (item.Customers.Contains(this))
                    {
                        item.Customers.Remove(this);
                    }
                    if (ChangeTracker.IsChangeTrackingEnabled)
                    {
                        RecordRemovalFromCollectionProperties("CustomerDemographics", item);
                    }
                }
            }
        }

        #endregion Association Fixup

        protected override bool IsKeyEqual(Entity other)
        {
            var entity = other as Customer;
            if (ReferenceEquals(null, entity)) return false;
            return this.CustomerID == entity.CustomerID;
        }

        protected override int GetKeyHashCode()
        {
            return ReferenceEquals(null, this.CustomerID) ? 13 : this.CustomerID.GetHashCode();
        }
    }
}
