//------------------------------------------------------------------------------
// <auto-generated>
//   This file was generated by T4 code generator Northwind.tt.
//   Any changes made to this file manually may cause incorrect behavior
//   and will be lost next time the file is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using NTier.Common.Domain.Model;

namespace IntegrationTest.Common.Domain.Model.Northwind
{
    [DataContract(IsReference = true)]
    public partial class NorthwindChangeSet : IChangeSet
    {
        public NorthwindChangeSet()
        {
        }

        protected NorthwindChangeSet(NorthwindChangeSet changeSet)
        {
            this.Categories = changeSet.Categories;
            this.DemographicGroups = changeSet.DemographicGroups;
            this.Customers = changeSet.Customers;
            this.DynamicContentEntities = changeSet.DynamicContentEntities;
            this.Employees = changeSet.Employees;
            this.Order_Details = changeSet.Order_Details;
            this.Orders = changeSet.Orders;
            this.Products = changeSet.Products;
            this.Regions = changeSet.Regions;
            this.Shippers = changeSet.Shippers;
            this.Suppliers = changeSet.Suppliers;
            this.Territories = changeSet.Territories;
        }

        [DataMember]
        public List<Category> Categories { get; set; }

        [DataMember]
        public List<DemographicGroup> DemographicGroups { get; set; }

        [DataMember]
        public List<Customer> Customers { get; set; }

        [DataMember]
        public List<DynamicContentEntity> DynamicContentEntities { get; set; }

        [DataMember]
        public List<Employee> Employees { get; set; }

        [DataMember]
        public List<Order_Detail> Order_Details { get; set; }

        [DataMember]
        public List<Order> Orders { get; set; }

        [DataMember]
        public List<Product> Products { get; set; }

        [DataMember]
        public List<Region> Regions { get; set; }

        [DataMember]
        public List<Shipper> Shippers { get; set; }

        [DataMember]
        public List<Supplier> Suppliers { get; set; }

        [DataMember]
        public List<Territory> Territories { get; set; }

        public bool IsEmpty
        {
            get
            {
                return (ReferenceEquals(null, Categories) || Categories.Count == 0)
                    && (ReferenceEquals(null, DemographicGroups) || DemographicGroups.Count == 0)
                    && (ReferenceEquals(null, Customers) || Customers.Count == 0)
                    && (ReferenceEquals(null, DynamicContentEntities) || DynamicContentEntities.Count == 0)
                    && (ReferenceEquals(null, Employees) || Employees.Count == 0)
                    && (ReferenceEquals(null, Order_Details) || Order_Details.Count == 0)
                    && (ReferenceEquals(null, Orders) || Orders.Count == 0)
                    && (ReferenceEquals(null, Products) || Products.Count == 0)
                    && (ReferenceEquals(null, Regions) || Regions.Count == 0)
                    && (ReferenceEquals(null, Shippers) || Shippers.Count == 0)
                    && (ReferenceEquals(null, Suppliers) || Suppliers.Count == 0)
                    && (ReferenceEquals(null, Territories) || Territories.Count == 0);
            }
        }

        public IEnumerator<Entity> GetEnumerator()
        {
            if (Categories != null && Categories.Count > 0)
            {
                foreach (var item in Categories)
                {
                    yield return item;
                }
            }

            if (DemographicGroups != null && DemographicGroups.Count > 0)
            {
                foreach (var item in DemographicGroups)
                {
                    yield return item;
                }
            }

            if (Customers != null && Customers.Count > 0)
            {
                foreach (var item in Customers)
                {
                    yield return item;
                }
            }

            if (DynamicContentEntities != null && DynamicContentEntities.Count > 0)
            {
                foreach (var item in DynamicContentEntities)
                {
                    yield return item;
                }
            }

            if (Employees != null && Employees.Count > 0)
            {
                foreach (var item in Employees)
                {
                    yield return item;
                }
            }

            if (Order_Details != null && Order_Details.Count > 0)
            {
                foreach (var item in Order_Details)
                {
                    yield return item;
                }
            }

            if (Orders != null && Orders.Count > 0)
            {
                foreach (var item in Orders)
                {
                    yield return item;
                }
            }

            if (Products != null && Products.Count > 0)
            {
                foreach (var item in Products)
                {
                    yield return item;
                }
            }

            if (Regions != null && Regions.Count > 0)
            {
                foreach (var item in Regions)
                {
                    yield return item;
                }
            }

            if (Shippers != null && Shippers.Count > 0)
            {
                foreach (var item in Shippers)
                {
                    yield return item;
                }
            }

            if (Suppliers != null && Suppliers.Count > 0)
            {
                foreach (var item in Suppliers)
                {
                    yield return item;
                }
            }

            if (Territories != null && Territories.Count > 0)
            {
                foreach (var item in Territories)
                {
                    yield return item;
                }
            }

        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }
    }
}
