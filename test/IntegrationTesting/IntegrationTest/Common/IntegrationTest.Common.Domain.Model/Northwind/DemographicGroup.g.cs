//------------------------------------------------------------------------------
// <autogenerated>
//   This file was generated by T4 code generator NorthwindModel.tt.
//   Any changes made to this file manually may cause incorrect behavior
//   and will be lost next time the file is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Globalization;
using System.Reflection;
using System.Runtime.Serialization;
using NTier.Common.Domain.Model;

namespace IntegrationTest.Common.Domain.Model.Northwind
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Customer))]
    public partial class DemographicGroup : Entity<DemographicGroup>, INotifyPropertyChanged, INotifyPropertyChanging, IDataErrorInfo
    {
        #region Constructor and Initialization

        // partial method for initialization
        partial void Initialize();

        public DemographicGroup()
        {
            Initialize();
        }

        #endregion Constructor and Initialization

        #region Simple Properties

        [DataMember]
        [Key]
        [Required]
#if !CLIENT_PROFILE
        [RoundtripOriginal]
#endif
        [SimpleProperty]
        public global::System.String ID
        {
            get { return _iD; }
            set
            {
                if (_iD != value)
                {
                    //if (!IsDeserializing && ChangeTracker.IsChangeTrackingEnabled)
                    if (!IsDeserializing && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    IDChanging(value);
                    OnPropertyChanging("ID", value);
                    var previousValue = _iD;
                    _iD = value;
                    OnPropertyChanged("ID", previousValue, value);
                    IDChanged(previousValue);
                }
            }
        }
        private global::System.String _iD;

        partial void IDChanging(global::System.String newValue);
        partial void IDChanged(global::System.String previousValue);

        [DataMember]
#if !CLIENT_PROFILE
        [RoundtripOriginal]
#endif
        [SimpleProperty]
        public global::System.String CustomerDesc
        {
            get { return _customerDesc; }
            set
            {
                if (_customerDesc != value)
                {
                    CustomerDescChanging(value);
                    OnPropertyChanging("CustomerDesc", value);
                    var previousValue = _customerDesc;
                    _customerDesc = value;
                    OnPropertyChanged("CustomerDesc", previousValue, value);
                    CustomerDescChanged(previousValue);
                }
            }
        }
        private global::System.String _customerDesc;

        partial void CustomerDescChanging(global::System.String newValue);
        partial void CustomerDescChanged(global::System.String previousValue);

        #endregion Simple Properties

        #region Complex Properties

        #endregion Complex Properties

        #region Navigation Properties

        [DataMember]
        [NavigationProperty]
        public TrackableCollection<Customer> Customers
        {
            get
            {
                if (_customers == null)
                {
                    _customers = new TrackableCollection<Customer>();
                    _customers.CollectionChanged += FixupCustomers;
                }
                return _customers;
            }
            set
            {
                if (!object.ReferenceEquals(_customers, value))
                {
                    if (!IsDeserializing && ChangeTracker.IsChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }

                    if (_customers != null)
                    {
                       _customers.CollectionChanged -= FixupCustomers;
                    }

                    _customers = value;

                    if (_customers != null)
                    {
                        _customers.CollectionChanged += FixupCustomers;
                    }

                    OnPropertyChanged("Customers", trackInChangeTracker: false);
                }
            }
        }
        private TrackableCollection<Customer> _customers;

        #endregion Navigation Properties

        #region ChangeTracking

        protected override void ClearNavigationProperties()
        {
            Customers.Clear();
        }

        #endregion ChangeTracking

        #region Association Fixup

        private void FixupCustomers(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }

            if (e.NewItems != null)
            {
                foreach (Customer item in e.NewItems)
                {
                    if (!item.CustomerDemographics.Contains(this))
                    {
                        item.CustomerDemographics.Add(this);
                    }
                    if (ChangeTracker.IsChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.IsChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        RecordAdditionToCollectionProperties("Customers", item);
                    }
                }
            }

            if (e.OldItems != null)
            {
                foreach (Customer item in e.OldItems)
                {
                    if (item.CustomerDemographics.Contains(this))
                    {
                        item.CustomerDemographics.Remove(this);
                    }
                    if (ChangeTracker.IsChangeTrackingEnabled)
                    {
                        RecordRemovalFromCollectionProperties("Customers", item);
                    }
                }
            }
        }

        #endregion Association Fixup

        protected override bool IsKeyEqual(DemographicGroup entity)
        {
            return this.ID == entity.ID;
        }

        protected override int GetKeyHashCode()
        {
            return ReferenceEquals(this.ID, null) ? 0 : this.ID.GetHashCode();
        }
    }
}
