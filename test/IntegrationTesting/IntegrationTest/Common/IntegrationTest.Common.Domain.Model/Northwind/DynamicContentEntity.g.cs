//------------------------------------------------------------------------------
// <autogenerated>
//   This file was generated by T4 code generator NorthwindModel.tt.
//   Any changes made to this file manually may cause incorrect behavior
//   and will be lost next time the file is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Globalization;
using System.Reflection;
using System.Runtime.Serialization;
using NTier.Common.Domain.Model;

namespace IntegrationTest.Common.Domain.Model.Northwind
{
    [DataContract(IsReference = true)]
    public partial class DynamicContentEntity : Entity<DynamicContentEntity>, INotifyPropertyChanged, INotifyPropertyChanging, IDataErrorInfo
    {
        #region Constructor and Initialization

        // partial method for initialization
        partial void Initialize();

        public DynamicContentEntity()
        {
            Initialize();
        }

        #endregion Constructor and Initialization

        #region Simple Properties

        [DataMember]
        [Key]
        [Required]
#if !CLIENT_PROFILE
        [RoundtripOriginal]
#endif
        [ServerGeneration(ServerGenerationTypes.Insert)]
        [SimpleProperty]
        public global::System.Int64 Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    //if (!IsDeserializing && ChangeTracker.IsChangeTrackingEnabled)
                    if (!IsDeserializing && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'Id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    IdChanging(value);
                    OnPropertyChanging("Id", value);
                    var previousValue = _id;
                    _id = value;
                    OnPropertyChanged("Id", previousValue, value);
                    IdChanged(previousValue);
                }
            }
        }
        private global::System.Int64 _id;

        partial void IdChanging(global::System.Int64 newValue);
        partial void IdChanged(global::System.Int64 previousValue);

        [DataMember]
#if !CLIENT_PROFILE
        [RoundtripOriginal]
#endif
        [SimpleProperty]
        private global::System.String DynamicContent
        {
            get { return _dynamicContent; }
            set
            {
                if (_dynamicContent != value)
                {
                    DynamicContentChanging(value);
                    OnPropertyChanging("DynamicContent", value);
                    var previousValue = _dynamicContent;
                    _dynamicContent = value;
                    OnPropertyChanged("DynamicContent", previousValue, value);
                    DynamicContentChanged(previousValue);
                }
            }
        }
        private global::System.String _dynamicContent;

        partial void DynamicContentChanging(global::System.String newValue);
        partial void DynamicContentChanged(global::System.String previousValue);

        #endregion Simple Properties

        #region Complex Properties

        #endregion Complex Properties

        #region Navigation Properties

        #endregion Navigation Properties

        #region ChangeTracking

        protected override void ClearNavigationProperties()
        {
        }

        #endregion ChangeTracking

        #region Association Fixup

        #endregion Association Fixup

        protected override bool IsKeyEqual(DynamicContentEntity entity)
        {
            return this.Id == entity.Id;
        }

        protected override int GetKeyHashCode()
        {
            return this.Id.GetHashCode();
        }
    }
}
