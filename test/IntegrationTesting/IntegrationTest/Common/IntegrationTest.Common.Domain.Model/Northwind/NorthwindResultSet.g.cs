//------------------------------------------------------------------------------
// <autogenerated>
//   This file was generated by T4 code generator NorthwindModel.tt.
//   Any changes made to this file manually may cause incorrect behavior
//   and will be lost next time the file is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Globalization;
using System.Reflection;
using System.Runtime.Serialization;
using NTier.Common.Domain.Model;

namespace IntegrationTest.Common.Domain.Model.Northwind
{
    [DataContract(IsReference = true)]
    public sealed partial class NorthwindResultSet : NorthwindChangeSet, IResultSet
    {
        #region ctor
        public NorthwindResultSet(NorthwindChangeSet changeSet)
            : base(changeSet)
        {
        }
        #endregion

        #region DataMember

        [DataMember]
        public IList<Category> CategoryConcurrencyConflicts { get; private set; }

        [DataMember]
        public IList<Employee> EmployeeConcurrencyConflicts { get; private set; }

        [DataMember]
        public IList<OrderDetail> OrderDetailConcurrencyConflicts { get; private set; }

        [DataMember]
        public IList<Order> OrderConcurrencyConflicts { get; private set; }

        [DataMember]
        public IList<Product> ProductConcurrencyConflicts { get; private set; }

        [DataMember]
        public IList<Region> RegionConcurrencyConflicts { get; private set; }

        [DataMember]
        public IList<Shipper> ShipperConcurrencyConflicts { get; private set; }

        [DataMember]
        public IList<Supplier> SupplierConcurrencyConflicts { get; private set; }

        [DataMember]
        public IList<Territory> TerritoryConcurrencyConflicts { get; private set; }

        [DataMember]
        public IList<DemographicGroup> DemographicGroupConcurrencyConflicts { get; private set; }

        [DataMember]
        public IList<Customer> CustomerConcurrencyConflicts { get; private set; }

        [DataMember]
        public IList<DynamicContentEntity> DynamicContentEntityConcurrencyConflicts { get; private set; }

        #endregion

        #region AddConcurrencyConflicts

        public void AddConcurrencyConflicts(IEnumerable<Entity> entities)
        {
            foreach (var entity in entities)
            {
                if (entity is Category)
                {
                    AddConcurrencyConflict((Category)entity);
                }
                else if (entity is Employee)
                {
                    AddConcurrencyConflict((Employee)entity);
                }
                else if (entity is OrderDetail)
                {
                    AddConcurrencyConflict((OrderDetail)entity);
                }
                else if (entity is Order)
                {
                    AddConcurrencyConflict((Order)entity);
                }
                else if (entity is Product)
                {
                    AddConcurrencyConflict((Product)entity);
                }
                else if (entity is Region)
                {
                    AddConcurrencyConflict((Region)entity);
                }
                else if (entity is Shipper)
                {
                    AddConcurrencyConflict((Shipper)entity);
                }
                else if (entity is Supplier)
                {
                    AddConcurrencyConflict((Supplier)entity);
                }
                else if (entity is Territory)
                {
                    AddConcurrencyConflict((Territory)entity);
                }
                else if (entity is DemographicGroup)
                {
                    AddConcurrencyConflict((DemographicGroup)entity);
                }
                else if (entity is Customer)
                {
                    AddConcurrencyConflict((Customer)entity);
                }
                else if (entity is DynamicContentEntity)
                {
                    AddConcurrencyConflict((DynamicContentEntity)entity);
                }
                else
                {
                    throw new Exception(string.Format("Unknown type {0}", entity.GetType().Name));
                }
            }
        }

        private void AddConcurrencyConflict(Category entity)
        {
            if (CategoryConcurrencyConflicts == null)
            {
                CategoryConcurrencyConflicts = new List<Category>();
            }
            CategoryConcurrencyConflicts.Add(entity);
        }

        private void AddConcurrencyConflict(Employee entity)
        {
            if (EmployeeConcurrencyConflicts == null)
            {
                EmployeeConcurrencyConflicts = new List<Employee>();
            }
            EmployeeConcurrencyConflicts.Add(entity);
        }

        private void AddConcurrencyConflict(OrderDetail entity)
        {
            if (OrderDetailConcurrencyConflicts == null)
            {
                OrderDetailConcurrencyConflicts = new List<OrderDetail>();
            }
            OrderDetailConcurrencyConflicts.Add(entity);
        }

        private void AddConcurrencyConflict(Order entity)
        {
            if (OrderConcurrencyConflicts == null)
            {
                OrderConcurrencyConflicts = new List<Order>();
            }
            OrderConcurrencyConflicts.Add(entity);
        }

        private void AddConcurrencyConflict(Product entity)
        {
            if (ProductConcurrencyConflicts == null)
            {
                ProductConcurrencyConflicts = new List<Product>();
            }
            ProductConcurrencyConflicts.Add(entity);
        }

        private void AddConcurrencyConflict(Region entity)
        {
            if (RegionConcurrencyConflicts == null)
            {
                RegionConcurrencyConflicts = new List<Region>();
            }
            RegionConcurrencyConflicts.Add(entity);
        }

        private void AddConcurrencyConflict(Shipper entity)
        {
            if (ShipperConcurrencyConflicts == null)
            {
                ShipperConcurrencyConflicts = new List<Shipper>();
            }
            ShipperConcurrencyConflicts.Add(entity);
        }

        private void AddConcurrencyConflict(Supplier entity)
        {
            if (SupplierConcurrencyConflicts == null)
            {
                SupplierConcurrencyConflicts = new List<Supplier>();
            }
            SupplierConcurrencyConflicts.Add(entity);
        }

        private void AddConcurrencyConflict(Territory entity)
        {
            if (TerritoryConcurrencyConflicts == null)
            {
                TerritoryConcurrencyConflicts = new List<Territory>();
            }
            TerritoryConcurrencyConflicts.Add(entity);
        }

        private void AddConcurrencyConflict(DemographicGroup entity)
        {
            if (DemographicGroupConcurrencyConflicts == null)
            {
                DemographicGroupConcurrencyConflicts = new List<DemographicGroup>();
            }
            DemographicGroupConcurrencyConflicts.Add(entity);
        }

        private void AddConcurrencyConflict(Customer entity)
        {
            if (CustomerConcurrencyConflicts == null)
            {
                CustomerConcurrencyConflicts = new List<Customer>();
            }
            CustomerConcurrencyConflicts.Add(entity);
        }

        private void AddConcurrencyConflict(DynamicContentEntity entity)
        {
            if (DynamicContentEntityConcurrencyConflicts == null)
            {
                DynamicContentEntityConcurrencyConflicts = new List<DynamicContentEntity>();
            }
            DynamicContentEntityConcurrencyConflicts.Add(entity);
        }

        #endregion

        #region IsConcurrencyConflict

        public bool IsConcurrencyConflict(Category e)
        {
            return CategoryConcurrencyConflicts != null && CategoryConcurrencyConflicts.Count > 0 && CategoryConcurrencyConflicts.Contains(e);
        }

        public bool IsConcurrencyConflict(Employee e)
        {
            return EmployeeConcurrencyConflicts != null && EmployeeConcurrencyConflicts.Count > 0 && EmployeeConcurrencyConflicts.Contains(e);
        }

        public bool IsConcurrencyConflict(OrderDetail e)
        {
            return OrderDetailConcurrencyConflicts != null && OrderDetailConcurrencyConflicts.Count > 0 && OrderDetailConcurrencyConflicts.Contains(e);
        }

        public bool IsConcurrencyConflict(Order e)
        {
            return OrderConcurrencyConflicts != null && OrderConcurrencyConflicts.Count > 0 && OrderConcurrencyConflicts.Contains(e);
        }

        public bool IsConcurrencyConflict(Product e)
        {
            return ProductConcurrencyConflicts != null && ProductConcurrencyConflicts.Count > 0 && ProductConcurrencyConflicts.Contains(e);
        }

        public bool IsConcurrencyConflict(Region e)
        {
            return RegionConcurrencyConflicts != null && RegionConcurrencyConflicts.Count > 0 && RegionConcurrencyConflicts.Contains(e);
        }

        public bool IsConcurrencyConflict(Shipper e)
        {
            return ShipperConcurrencyConflicts != null && ShipperConcurrencyConflicts.Count > 0 && ShipperConcurrencyConflicts.Contains(e);
        }

        public bool IsConcurrencyConflict(Supplier e)
        {
            return SupplierConcurrencyConflicts != null && SupplierConcurrencyConflicts.Count > 0 && SupplierConcurrencyConflicts.Contains(e);
        }

        public bool IsConcurrencyConflict(Territory e)
        {
            return TerritoryConcurrencyConflicts != null && TerritoryConcurrencyConflicts.Count > 0 && TerritoryConcurrencyConflicts.Contains(e);
        }

        public bool IsConcurrencyConflict(DemographicGroup e)
        {
            return DemographicGroupConcurrencyConflicts != null && DemographicGroupConcurrencyConflicts.Count > 0 && DemographicGroupConcurrencyConflicts.Contains(e);
        }

        public bool IsConcurrencyConflict(Customer e)
        {
            return CustomerConcurrencyConflicts != null && CustomerConcurrencyConflicts.Count > 0 && CustomerConcurrencyConflicts.Contains(e);
        }

        public bool IsConcurrencyConflict(DynamicContentEntity e)
        {
            return DynamicContentEntityConcurrencyConflicts != null && DynamicContentEntityConcurrencyConflicts.Count > 0 && DynamicContentEntityConcurrencyConflicts.Contains(e);
        }

        #endregion

        #region HasConcurrencyConflicts
        public bool HasConcurrencyConflicts
        {
            get
            {
                return CategoryConcurrencyConflicts != null ||
                    EmployeeConcurrencyConflicts != null ||
                    OrderDetailConcurrencyConflicts != null ||
                    OrderConcurrencyConflicts != null ||
                    ProductConcurrencyConflicts != null ||
                    RegionConcurrencyConflicts != null ||
                    ShipperConcurrencyConflicts != null ||
                    SupplierConcurrencyConflicts != null ||
                    TerritoryConcurrencyConflicts != null ||
                    DemographicGroupConcurrencyConflicts != null ||
                    CustomerConcurrencyConflicts != null ||
                    DynamicContentEntityConcurrencyConflicts != null;
            }
        }
        #endregion
    }
}
