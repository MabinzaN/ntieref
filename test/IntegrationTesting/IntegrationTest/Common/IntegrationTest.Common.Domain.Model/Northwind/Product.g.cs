//------------------------------------------------------------------------------
// <autogenerated>
//   This file was generated by T4 code generator NorthwindModel.tt.
//   Any changes made to this file manually may cause incorrect behavior
//   and will be lost next time the file is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Globalization;
using System.Reflection;
using System.Runtime.Serialization;
using NTier.Common.Domain.Model;

namespace IntegrationTest.Common.Domain.Model.Northwind
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Category))]
    [KnownType(typeof(OrderDetail))]
    [KnownType(typeof(Supplier))]
    public partial class Product : Entity<Product>, INotifyPropertyChanged, INotifyPropertyChanging, IDataErrorInfo
    {
        #region Constructor and Initialization

        // partial method for initialization
        partial void Initialize();

        public Product()
        {
            Initialize();
        }

        #endregion Constructor and Initialization

        #region Simple Properties

        [DataMember]
        [Key]
        [Required]
#if !CLIENT_PROFILE
        [RoundtripOriginal]
#endif
        [ServerGeneration(ServerGenerationTypes.Insert)]
        [PrimitiveProperty]
        public global::System.Int32 ProductID
        {
            get { return _productID; }
            set
            {
                if (_productID != value)
                {
                    //if (!IsDeserializing && ChangeTracker.IsChangeTrackingEnabled)
                    if (!IsDeserializing && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ProductID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    ProductIDChanging(value);
                    OnPropertyChanging("ProductID", value);
                    var previousValue = _productID;
                    _productID = value;
                    OnPropertyChanged("ProductID", previousValue, value);
                    ProductIDChanged(previousValue);
                }
            }
        }
        private global::System.Int32 _productID;

        partial void ProductIDChanging(global::System.Int32 newValue);
        partial void ProductIDChanged(global::System.Int32 previousValue);

        [DataMember]
        [Required]
#if !CLIENT_PROFILE
        [RoundtripOriginal]
#endif
        [PrimitiveProperty]
        public global::System.String ProductName
        {
            get { return _productName; }
            set
            {
                if (_productName != value)
                {
                    ProductNameChanging(value);
                    OnPropertyChanging("ProductName", value);
                    var previousValue = _productName;
                    _productName = value;
                    OnPropertyChanged("ProductName", previousValue, value);
                    ProductNameChanged(previousValue);
                }
            }
        }
        private global::System.String _productName;

        partial void ProductNameChanging(global::System.String newValue);
        partial void ProductNameChanged(global::System.String previousValue);

        [DataMember]
#if !CLIENT_PROFILE
        [RoundtripOriginal]
#endif
        [PrimitiveProperty]
        public Nullable<global::System.Int32> SupplierID
        {
            get { return _supplierID; }
            set
            {
                if (_supplierID != value)
                {
                    //RecordOriginalValue("SupplierID", _supplierID);
                    SupplierIDChanging(value);
                    OnPropertyChanging("SupplierID", value);
                    if (!IsDeserializing)
                    {
                        if (Supplier != null && Supplier.SupplierID != value)
                        {
                            Supplier = null;
                        }
                    }
                    var previousValue = _supplierID;
                    _supplierID = value;
                    OnPropertyChanged("SupplierID", previousValue, value);
                    SupplierIDChanged(previousValue);
                }
            }
        }
        private Nullable<global::System.Int32> _supplierID;

        partial void SupplierIDChanging(Nullable<global::System.Int32> newValue);
        partial void SupplierIDChanged(Nullable<global::System.Int32> previousValue);

        [DataMember]
#if !CLIENT_PROFILE
        [RoundtripOriginal]
#endif
        [PrimitiveProperty]
        public Nullable<global::System.Int32> CategoryID
        {
            get { return _categoryID; }
            set
            {
                if (_categoryID != value)
                {
                    //RecordOriginalValue("CategoryID", _categoryID);
                    CategoryIDChanging(value);
                    OnPropertyChanging("CategoryID", value);
                    if (!IsDeserializing)
                    {
                        if (Category != null && Category.CategoryID != value)
                        {
                            Category = null;
                        }
                    }
                    var previousValue = _categoryID;
                    _categoryID = value;
                    OnPropertyChanged("CategoryID", previousValue, value);
                    CategoryIDChanged(previousValue);
                }
            }
        }
        private Nullable<global::System.Int32> _categoryID;

        partial void CategoryIDChanging(Nullable<global::System.Int32> newValue);
        partial void CategoryIDChanged(Nullable<global::System.Int32> previousValue);

        [DataMember]
#if !CLIENT_PROFILE
        [RoundtripOriginal]
#endif
        [PrimitiveProperty]
        public global::System.String QuantityPerUnit
        {
            get { return _quantityPerUnit; }
            set
            {
                if (_quantityPerUnit != value)
                {
                    QuantityPerUnitChanging(value);
                    OnPropertyChanging("QuantityPerUnit", value);
                    var previousValue = _quantityPerUnit;
                    _quantityPerUnit = value;
                    OnPropertyChanged("QuantityPerUnit", previousValue, value);
                    QuantityPerUnitChanged(previousValue);
                }
            }
        }
        private global::System.String _quantityPerUnit;

        partial void QuantityPerUnitChanging(global::System.String newValue);
        partial void QuantityPerUnitChanged(global::System.String previousValue);

        [DataMember]
#if !CLIENT_PROFILE
        [RoundtripOriginal]
#endif
        [PrimitiveProperty]
        public Nullable<global::System.Decimal> UnitPrice
        {
            get { return _unitPrice; }
            set
            {
                if (_unitPrice != value)
                {
                    UnitPriceChanging(value);
                    OnPropertyChanging("UnitPrice", value);
                    var previousValue = _unitPrice;
                    _unitPrice = value;
                    OnPropertyChanged("UnitPrice", previousValue, value);
                    UnitPriceChanged(previousValue);
                }
            }
        }
        private Nullable<global::System.Decimal> _unitPrice;

        partial void UnitPriceChanging(Nullable<global::System.Decimal> newValue);
        partial void UnitPriceChanged(Nullable<global::System.Decimal> previousValue);

        [DataMember]
#if !CLIENT_PROFILE
        [RoundtripOriginal]
#endif
        [PrimitiveProperty]
        public Nullable<global::System.Int16> UnitsInStock
        {
            get { return _unitsInStock; }
            set
            {
                if (_unitsInStock != value)
                {
                    UnitsInStockChanging(value);
                    OnPropertyChanging("UnitsInStock", value);
                    var previousValue = _unitsInStock;
                    _unitsInStock = value;
                    OnPropertyChanged("UnitsInStock", previousValue, value);
                    UnitsInStockChanged(previousValue);
                }
            }
        }
        private Nullable<global::System.Int16> _unitsInStock;

        partial void UnitsInStockChanging(Nullable<global::System.Int16> newValue);
        partial void UnitsInStockChanged(Nullable<global::System.Int16> previousValue);

        [DataMember]
#if !CLIENT_PROFILE
        [RoundtripOriginal]
#endif
        [PrimitiveProperty]
        public Nullable<global::System.Int16> UnitsOnOrder
        {
            get { return _unitsOnOrder; }
            set
            {
                if (_unitsOnOrder != value)
                {
                    UnitsOnOrderChanging(value);
                    OnPropertyChanging("UnitsOnOrder", value);
                    var previousValue = _unitsOnOrder;
                    _unitsOnOrder = value;
                    OnPropertyChanged("UnitsOnOrder", previousValue, value);
                    UnitsOnOrderChanged(previousValue);
                }
            }
        }
        private Nullable<global::System.Int16> _unitsOnOrder;

        partial void UnitsOnOrderChanging(Nullable<global::System.Int16> newValue);
        partial void UnitsOnOrderChanged(Nullable<global::System.Int16> previousValue);

        [DataMember]
#if !CLIENT_PROFILE
        [RoundtripOriginal]
#endif
        [PrimitiveProperty]
        public Nullable<global::System.Int16> ReorderLevel
        {
            get { return _reorderLevel; }
            set
            {
                if (_reorderLevel != value)
                {
                    ReorderLevelChanging(value);
                    OnPropertyChanging("ReorderLevel", value);
                    var previousValue = _reorderLevel;
                    _reorderLevel = value;
                    OnPropertyChanged("ReorderLevel", previousValue, value);
                    ReorderLevelChanged(previousValue);
                }
            }
        }
        private Nullable<global::System.Int16> _reorderLevel;

        partial void ReorderLevelChanging(Nullable<global::System.Int16> newValue);
        partial void ReorderLevelChanged(Nullable<global::System.Int16> previousValue);

        [DataMember]
        [Required]
#if !CLIENT_PROFILE
        [RoundtripOriginal]
#endif
        [PrimitiveProperty]
        public global::System.Boolean Discontinued
        {
            get { return _discontinued; }
            set
            {
                if (_discontinued != value)
                {
                    DiscontinuedChanging(value);
                    OnPropertyChanging("Discontinued", value);
                    var previousValue = _discontinued;
                    _discontinued = value;
                    OnPropertyChanged("Discontinued", previousValue, value);
                    DiscontinuedChanged(previousValue);
                }
            }
        }
        private global::System.Boolean _discontinued;

        partial void DiscontinuedChanging(global::System.Boolean newValue);
        partial void DiscontinuedChanged(global::System.Boolean previousValue);

        #endregion Simple Properties

        #region Complex Properties

        #endregion Complex Properties

        #region Navigation Properties

        [DataMember]
        [NavigationProperty]
        public Category Category
        {
            get { return _category; }
            set
            {
                if (!object.ReferenceEquals(_category, value))
                {
                    CategoryChanging(value);
                    OnPropertyChanging("Category", value);
                    var previousValue = _category;
                    _category = value;
                    FixupCategory(previousValue);
                    OnPropertyChanged("Category", previousValue, value, isNavigationProperty: true);
                    CategoryChanged(previousValue);
                }
            }
        }
        private Category _category;

        partial void CategoryChanging(Category newValue);
        partial void CategoryChanged(Category previousValue);

        [DataMember]
        [NavigationProperty]
        public TrackableCollection<OrderDetail> OrderDetails
        {
            get
            {
                if (_orderDetails == null)
                {
                    _orderDetails = new TrackableCollection<OrderDetail>();
                    _orderDetails.CollectionChanged += FixupOrderDetails;
                }
                return _orderDetails;
            }
            set
            {
                if (!object.ReferenceEquals(_orderDetails, value))
                {
                    if (!IsDeserializing && ChangeTracker.IsChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }

                    if (_orderDetails != null)
                    {
                       _orderDetails.CollectionChanged -= FixupOrderDetails;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (OrderDetail item in _orderDetails)
                        {
                            ChangeTracker.PropertyChanged -= item.HandleCascadeDelete;
                        }
                    }

                    _orderDetails = value;

                    if (_orderDetails != null)
                    {
                        _orderDetails.CollectionChanged += FixupOrderDetails;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (OrderDetail item in _orderDetails)
                        {
                            ChangeTracker.PropertyChanged += item.HandleCascadeDelete;
                        }
                    }

                    OnPropertyChanged("OrderDetails", trackInChangeTracker: false);
                }
            }
        }
        private TrackableCollection<OrderDetail> _orderDetails;

        [DataMember]
        [NavigationProperty]
        public Supplier Supplier
        {
            get { return _supplier; }
            set
            {
                if (!object.ReferenceEquals(_supplier, value))
                {
                    SupplierChanging(value);
                    OnPropertyChanging("Supplier", value);
                    var previousValue = _supplier;
                    _supplier = value;
                    FixupSupplier(previousValue);
                    OnPropertyChanged("Supplier", previousValue, value, isNavigationProperty: true);
                    SupplierChanged(previousValue);
                }
            }
        }
        private Supplier _supplier;

        partial void SupplierChanging(Supplier newValue);
        partial void SupplierChanged(Supplier previousValue);

        #endregion Navigation Properties

        #region ChangeTracking

        protected override void ClearNavigationProperties()
        {
            Category = null;
            OrderDetails.Clear();
            Supplier = null;
        }

        #endregion ChangeTracking

        #region Association Fixup

        private void FixupCategory(Category previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }

            if (Category != null)
            {
                CategoryID = Category.CategoryID;
            }

            else if (!skipKeys)
            {
                CategoryID = null;
            }

            if (ChangeTracker.IsChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Category")
                    && object.ReferenceEquals(ChangeTracker.OriginalValues["Category"], Category))
                {
                    //ChangeTracker.OriginalValues.Remove("Category");
                }
                else
                {
                    //RecordOriginalValue("Category", previousValue);
                }
                if (Category != null && !Category.ChangeTracker.IsChangeTrackingEnabled)
                {
                    Category.StartTracking();
                }
            }
        }

        private void FixupSupplier(Supplier previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }

            if (previousValue != null && previousValue.Products.Contains(this))
            {
                previousValue.Products.Remove(this);
            }

            if (Supplier != null)
            {
                if (!Supplier.Products.Contains(this))
                {
                    Supplier.Products.Add(this);
                }

                SupplierID = Supplier.SupplierID;
            }
            else if (!skipKeys)
            {
                SupplierID = null;
            }

            if (ChangeTracker.IsChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Supplier")
                    && object.ReferenceEquals(ChangeTracker.OriginalValues["Supplier"], Supplier))
                {
                    //ChangeTracker.OriginalValues.Remove("Supplier");
                }
                else
                {
                    //RecordOriginalValue("Supplier", previousValue);
                }
                if (Supplier != null && !Supplier.ChangeTracker.IsChangeTrackingEnabled)
                {
                    Supplier.StartTracking();
                }
            }
        }

        private void FixupOrderDetails(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }

            if (e.NewItems != null)
            {
                foreach (OrderDetail item in e.NewItems)
                {
                    item.Product = this;
                    if (ChangeTracker.IsChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.IsChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        RecordAdditionToCollectionProperties("OrderDetails", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.PropertyChanged += item.HandleCascadeDelete;
                }
            }

            if (e.OldItems != null)
            {
                foreach (OrderDetail item in e.OldItems)
                {
                    if (object.ReferenceEquals(item.Product, this))
                    {
                        item.Product = null;
                    }
                    if (ChangeTracker.IsChangeTrackingEnabled)
                    {
                        RecordRemovalFromCollectionProperties("OrderDetails", item);
                    // Delete the dependent end of this identifying association. If the current state is Added,
                    // allow the relationship to be changed without causing the dependent to be deleted.
                    if (item.ChangeTracker.State != ObjectState.Added)
                    {
                        item.MarkAsDeleted();
                    }
                    }
                // This is the principal end in an association that performs cascade deletes.
                // Remove the previous dependent from the event listener.
                ChangeTracker.PropertyChanged -= item.HandleCascadeDelete;
                }
            }
        }

        #endregion Association Fixup

        protected override bool IsKeyEqual(Product entity)
        {
            return this.ProductID == entity.ProductID;
        }

        protected override int GetKeyHashCode()
        {
            return this.ProductID.GetHashCode();
        }
    }
}
