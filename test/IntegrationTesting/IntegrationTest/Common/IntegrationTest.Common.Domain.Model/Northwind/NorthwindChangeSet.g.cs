//------------------------------------------------------------------------------
// <autogenerated>
//   This file was generated by T4 code generator NorthwindModel.tt.
//   Any changes made to this file manually may cause incorrect behavior
//   and will be lost next time the file is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Globalization;
using System.Reflection;
using System.Runtime.Serialization;
using NTier.Common.Domain.Model;

namespace IntegrationTest.Common.Domain.Model.Northwind
{
    [DataContract(IsReference = true)]
    public partial class NorthwindChangeSet : IChangeSet
    {
        #region Constructor

        public NorthwindChangeSet(IEnumerable<Category> categories, IEnumerable<Employee> employees, IEnumerable<OrderDetail> orderDetails, IEnumerable<Order> orders, IEnumerable<Product> products, IEnumerable<Region> regions, IEnumerable<Shipper> shippers, IEnumerable<Supplier> suppliers, IEnumerable<Territory> territories, IEnumerable<DemographicGroup> customerDemographics, IEnumerable<Customer> customers, IEnumerable<DynamicContentEntity> dynamicContentEntities)
        {
            // retrieve changes sets (modified entities)
            var categoryChangeSet = categories.GetChangeSet();
            var employeeChangeSet = employees.GetChangeSet();
            var orderDetailChangeSet = orderDetails.GetChangeSet();
            var orderChangeSet = orders.GetChangeSet();
            var productChangeSet = products.GetChangeSet();
            var regionChangeSet = regions.GetChangeSet();
            var shipperChangeSet = shippers.GetChangeSet();
            var supplierChangeSet = suppliers.GetChangeSet();
            var territoryChangeSet = territories.GetChangeSet();
            var demographicGroupChangeSet = customerDemographics.GetChangeSet();
            var customerChangeSet = customers.GetChangeSet();
            var dynamicContentEntityChangeSet = dynamicContentEntities.GetChangeSet();

            // reduce entities (copy changed values)
            var categoriesMap = categoryChangeSet.ReduceToModifications();
            var employeesMap = employeeChangeSet.ReduceToModifications();
            var orderDetailsMap = orderDetailChangeSet.ReduceToModifications();
            var ordersMap = orderChangeSet.ReduceToModifications();
            var productsMap = productChangeSet.ReduceToModifications();
            var regionsMap = regionChangeSet.ReduceToModifications();
            var shippersMap = shipperChangeSet.ReduceToModifications();
            var suppliersMap = supplierChangeSet.ReduceToModifications();
            var territoriesMap = territoryChangeSet.ReduceToModifications();
            var customerDemographicsMap = demographicGroupChangeSet.ReduceToModifications();
            var customersMap = customerChangeSet.ReduceToModifications();
            var dynamicContentEntitiesMap = dynamicContentEntityChangeSet.ReduceToModifications();

            // fixup relations (replaces related entities with reduced entites)
            this.FixupRelations(
                this.Union(categoriesMap.CastToEntityTuple(), employeesMap.CastToEntityTuple(), orderDetailsMap.CastToEntityTuple(), ordersMap.CastToEntityTuple(), productsMap.CastToEntityTuple(), regionsMap.CastToEntityTuple(), shippersMap.CastToEntityTuple(), suppliersMap.CastToEntityTuple(), territoriesMap.CastToEntityTuple(), customerDemographicsMap.CastToEntityTuple(), customersMap.CastToEntityTuple(), dynamicContentEntitiesMap.CastToEntityTuple()),
                this.Union(categoryChangeSet, employeeChangeSet, orderDetailChangeSet, orderChangeSet, productChangeSet, regionChangeSet, shipperChangeSet, supplierChangeSet, territoryChangeSet, demographicGroupChangeSet, customerChangeSet, dynamicContentEntityChangeSet)
            );
            if (categoriesMap.Count > 0) this.Categories = categoriesMap.Select(e => e.Item2).ToList();
            if (employeesMap.Count > 0) this.Employees = employeesMap.Select(e => e.Item2).ToList();
            if (orderDetailsMap.Count > 0) this.OrderDetails = orderDetailsMap.Select(e => e.Item2).ToList();
            if (ordersMap.Count > 0) this.Orders = ordersMap.Select(e => e.Item2).ToList();
            if (productsMap.Count > 0) this.Products = productsMap.Select(e => e.Item2).ToList();
            if (regionsMap.Count > 0) this.Regions = regionsMap.Select(e => e.Item2).ToList();
            if (shippersMap.Count > 0) this.Shippers = shippersMap.Select(e => e.Item2).ToList();
            if (suppliersMap.Count > 0) this.Suppliers = suppliersMap.Select(e => e.Item2).ToList();
            if (territoriesMap.Count > 0) this.Territories = territoriesMap.Select(e => e.Item2).ToList();
            if (customerDemographicsMap.Count > 0) this.CustomerDemographics = customerDemographicsMap.Select(e => e.Item2).ToList();
            if (customersMap.Count > 0) this.Customers = customersMap.Select(e => e.Item2).ToList();
            if (dynamicContentEntitiesMap.Count > 0) this.DynamicContentEntities = dynamicContentEntitiesMap.Select(e => e.Item2).ToList();
        }

        protected NorthwindChangeSet(NorthwindChangeSet changeSet)
        {
            this.Categories = changeSet.Categories;
            this.Employees = changeSet.Employees;
            this.OrderDetails = changeSet.OrderDetails;
            this.Orders = changeSet.Orders;
            this.Products = changeSet.Products;
            this.Regions = changeSet.Regions;
            this.Shippers = changeSet.Shippers;
            this.Suppliers = changeSet.Suppliers;
            this.Territories = changeSet.Territories;
            this.CustomerDemographics = changeSet.CustomerDemographics;
            this.Customers = changeSet.Customers;
            this.DynamicContentEntities = changeSet.DynamicContentEntities;
        }

        #endregion Constructor

        #region DataMember

        [DataMember]
        public List<Category> Categories { get; private set; }

        [DataMember]
        public List<Employee> Employees { get; private set; }

        [DataMember]
        public List<OrderDetail> OrderDetails { get; private set; }

        [DataMember]
        public List<Order> Orders { get; private set; }

        [DataMember]
        public List<Product> Products { get; private set; }

        [DataMember]
        public List<Region> Regions { get; private set; }

        [DataMember]
        public List<Shipper> Shippers { get; private set; }

        [DataMember]
        public List<Supplier> Suppliers { get; private set; }

        [DataMember]
        public List<Territory> Territories { get; private set; }

        [DataMember]
        public List<DemographicGroup> CustomerDemographics { get; private set; }

        [DataMember]
        public List<Customer> Customers { get; private set; }

        [DataMember]
        public List<DynamicContentEntity> DynamicContentEntities { get; private set; }

        #endregion DataMember

        #region IsEmpty

        public bool IsEmpty
        {
            get
            {
                return Categories == null &&
                    Employees == null &&
                    OrderDetails == null &&
                    Orders == null &&
                    Products == null &&
                    Regions == null &&
                    Shippers == null &&
                    Suppliers == null &&
                    Territories == null &&
                    CustomerDemographics == null &&
                    Customers == null &&
                    DynamicContentEntities == null;
            }
        }

        #endregion IsEmpty

        #region IEnumerable

        public IEnumerator<Entity> GetEnumerator()
        {
            if (Categories != null && Categories.Count > 0)
            {
                foreach (var item in Categories)
                {
                    yield return item;
                }
            }

            if (Employees != null && Employees.Count > 0)
            {
                foreach (var item in Employees)
                {
                    yield return item;
                }
            }

            if (OrderDetails != null && OrderDetails.Count > 0)
            {
                foreach (var item in OrderDetails)
                {
                    yield return item;
                }
            }

            if (Orders != null && Orders.Count > 0)
            {
                foreach (var item in Orders)
                {
                    yield return item;
                }
            }

            if (Products != null && Products.Count > 0)
            {
                foreach (var item in Products)
                {
                    yield return item;
                }
            }

            if (Regions != null && Regions.Count > 0)
            {
                foreach (var item in Regions)
                {
                    yield return item;
                }
            }

            if (Shippers != null && Shippers.Count > 0)
            {
                foreach (var item in Shippers)
                {
                    yield return item;
                }
            }

            if (Suppliers != null && Suppliers.Count > 0)
            {
                foreach (var item in Suppliers)
                {
                    yield return item;
                }
            }

            if (Territories != null && Territories.Count > 0)
            {
                foreach (var item in Territories)
                {
                    yield return item;
                }
            }

            if (CustomerDemographics != null && CustomerDemographics.Count > 0)
            {
                foreach (var item in CustomerDemographics)
                {
                    yield return item;
                }
            }

            if (Customers != null && Customers.Count > 0)
            {
                foreach (var item in Customers)
                {
                    yield return item;
                }
            }

            if (DynamicContentEntities != null && DynamicContentEntities.Count > 0)
            {
                foreach (var item in DynamicContentEntities)
                {
                    yield return item;
                }
            }

        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        #endregion IEnumerable
    }
}
