//------------------------------------------------------------------------------
// <autogenerated>
//   This file was generated by T4 code generator NTierDemoModel_NTierEntityGenerator.tt.
//   Any changes made to this file manually may cause incorrect behavior
//   and will be lost next time the file is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Globalization;
using System.Reflection;
using System.Runtime.Serialization;
using NTier.Common.Domain.Model;

namespace NTierDemo.Common.Domain.Model.NTierDemo
{
    [Serializable]
    [DataContract(IsReference = true)]
    public partial class Post : Entity<Post>, INotifyPropertyChanged, INotifyPropertyChanging, IDataErrorInfo
    {
        #region Constructor and Initialization

        // partial method for initialization
        partial void Initialize();

        public Post()
        {
            Initialize();
        }

        #endregion Constructor and Initialization

        #region Simple Properties

        [DataMember]
        [Key]
        [Required]
#if !CLIENT_PROFILE
        [RoundtripOriginal]
#endif
        [ServerGeneration(ServerGenerationTypes.Insert)]
        [SimpleProperty]
        public global::System.Int64 Id
        {
            get { return _id; }
            internal set
            {
                if (_id != value)
                {
                    //if (!IsDeserializing && ChangeTracker.IsChangeTrackingEnabled)
                    if (!IsDeserializing && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'Id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    IdChanging(value);
                    OnPropertyChanging("Id", value);
                    var previousValue = _id;
                    _id = value;
                    OnPropertyChanged("Id", previousValue, value);
                    IdChanged(previousValue);
                }
            }
        }
        private global::System.Int64 _id;

        partial void IdChanging(global::System.Int64 newValue);
        partial void IdChanged(global::System.Int64 previousValue);

        [DataMember]
        [Required]
#if !CLIENT_PROFILE
        [RoundtripOriginal]
#endif
        [SimpleProperty]
        public global::System.Int64 BlogId
        {
            get { return _blogId; }
            set
            {
                if (_blogId != value)
                {
                    //RecordOriginalValue("BlogId", _blogId);
                    BlogIdChanging(value);
                    OnPropertyChanging("BlogId", value);
                    var previousValue = _blogId;
                    _blogId = value;
                    OnPropertyChanged("BlogId", previousValue, value);
                    BlogIdChanged(previousValue);
                }
            }
        }
        private global::System.Int64 _blogId;

        partial void BlogIdChanging(global::System.Int64 newValue);
        partial void BlogIdChanged(global::System.Int64 previousValue);

        [DataMember]
        [Required]
#if !CLIENT_PROFILE
        [RoundtripOriginal]
#endif
        [SimpleProperty]
        public global::System.String Title
        {
            get { return _title; }
            set
            {
                if (_title != value)
                {
                    TitleChanging(value);
                    OnPropertyChanging("Title", value);
                    var previousValue = _title;
                    _title = value;
                    OnPropertyChanged("Title", previousValue, value);
                    TitleChanged(previousValue);
                }
            }
        }
        private global::System.String _title;

        partial void TitleChanging(global::System.String newValue);
        partial void TitleChanged(global::System.String previousValue);

        [DataMember]
        [Required]
#if !CLIENT_PROFILE
        [RoundtripOriginal]
#endif
        [SimpleProperty]
        public global::System.String Abstract
        {
            get { return _abstract; }
            set
            {
                if (_abstract != value)
                {
                    AbstractChanging(value);
                    OnPropertyChanging("Abstract", value);
                    var previousValue = _abstract;
                    _abstract = value;
                    OnPropertyChanged("Abstract", previousValue, value);
                    AbstractChanged(previousValue);
                }
            }
        }
        private global::System.String _abstract;

        partial void AbstractChanging(global::System.String newValue);
        partial void AbstractChanged(global::System.String previousValue);

        [DataMember]
        [Required]
#if !CLIENT_PROFILE
        [RoundtripOriginal]
#endif
        [SimpleProperty]
        public global::System.String Content
        {
            get { return _content; }
            set
            {
                if (_content != value)
                {
                    ContentChanging(value);
                    OnPropertyChanging("Content", value);
                    var previousValue = _content;
                    _content = value;
                    OnPropertyChanged("Content", previousValue, value);
                    ContentChanged(previousValue);
                }
            }
        }
        private global::System.String _content;

        partial void ContentChanging(global::System.String newValue);
        partial void ContentChanged(global::System.String previousValue);

        [DataMember]
        [Required]
#if !CLIENT_PROFILE
        [RoundtripOriginal]
#endif
        [SimpleProperty]
        public global::System.DateTime CreatedDate
        {
            get { return _createdDate; }
            internal set
            {
                if (_createdDate != value)
                {
                    CreatedDateChanging(value);
                    OnPropertyChanging("CreatedDate", value);
                    var previousValue = _createdDate;
                    _createdDate = value;
                    OnPropertyChanged("CreatedDate", previousValue, value);
                    CreatedDateChanged(previousValue);
                }
            }
        }
        private global::System.DateTime _createdDate;

        partial void CreatedDateChanging(global::System.DateTime newValue);
        partial void CreatedDateChanged(global::System.DateTime previousValue);

        [DataMember]
        [Required]
#if !CLIENT_PROFILE
        [RoundtripOriginal]
#endif
        [SimpleProperty]
        public global::System.DateTime ModifiedDate
        {
            get { return _modifiedDate; }
            internal set
            {
                if (_modifiedDate != value)
                {
                    ModifiedDateChanging(value);
                    OnPropertyChanging("ModifiedDate", value);
                    var previousValue = _modifiedDate;
                    _modifiedDate = value;
                    OnPropertyChanged("ModifiedDate", previousValue, value);
                    ModifiedDateChanged(previousValue);
                }
            }
        }
        private global::System.DateTime _modifiedDate;

        partial void ModifiedDateChanging(global::System.DateTime newValue);
        partial void ModifiedDateChanged(global::System.DateTime previousValue);

        #endregion Simple Properties

        #region Complex Properties

        #endregion Complex Properties

        #region Navigation Properties

        #endregion Navigation Properties

        #region ChangeTracking

        protected override void ClearNavigationProperties()
        {
        }

        #endregion ChangeTracking

        #region Association Fixup

        #endregion Association Fixup

        protected override bool IsKeyEqual(Post entity)
        {
            return this.Id == entity.Id;
        }

        protected override int GetKeyHashCode()
        {
            return this.Id.GetHashCode();
        }
    }
}
