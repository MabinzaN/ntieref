//------------------------------------------------------------------------------
// <autogenerated>
//   This file was generated by T4 code generator NTierDemoModel_NTierEntityGenerator.tt.
//   Any changes made to this file manually may cause incorrect behavior
//   and will be lost next time the file is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Globalization;
using System.Reflection;
using System.Runtime.Serialization;
using NTier.Common.Domain.Model;

namespace NTierDemo.Common.Domain.Model.NTierDemo
{
    [DataContract(IsReference = true)]
    public partial class NTierDemoChangeSet : IChangeSet
    {
        #region Constructor

        public NTierDemoChangeSet(IEnumerable<Author> authors, IEnumerable<Blog> blogs, IEnumerable<Post> posts, IEnumerable<PostInfo> postInfos)
        {
            // retrieve changes sets (modified entities)
            var authorChangeSet = authors.GetChangeSet();
            var blogChangeSet = blogs.GetChangeSet();
            var postChangeSet = posts.GetChangeSet();
            var postInfoChangeSet = postInfos.GetChangeSet();

            // reduce entities (copy changed values)
            var authorsMap = authorChangeSet.ReduceToModifications();
            var blogsMap = blogChangeSet.ReduceToModifications();
            var postsMap = postChangeSet.ReduceToModifications();
            var postInfosMap = postInfoChangeSet.ReduceToModifications();

            // fixup relations (replaces related entities with reduced entites)
            this.FixupRelations(
                this.Union(authorsMap.CastToEntityTuple(), blogsMap.CastToEntityTuple(), postsMap.CastToEntityTuple(), postInfosMap.CastToEntityTuple()),
                this.Union(authorChangeSet, blogChangeSet, postChangeSet, postInfoChangeSet)
            );
            if (authorsMap.Count > 0) this.Authors = authorsMap.Select(e => e.Item2).ToList();
            if (blogsMap.Count > 0) this.Blogs = blogsMap.Select(e => e.Item2).ToList();
            if (postsMap.Count > 0) this.Posts = postsMap.Select(e => e.Item2).ToList();
            if (postInfosMap.Count > 0) this.PostInfos = postInfosMap.Select(e => e.Item2).ToList();
        }

        protected NTierDemoChangeSet(NTierDemoChangeSet changeSet)
        {
            this.Authors = changeSet.Authors;
            this.Blogs = changeSet.Blogs;
            this.Posts = changeSet.Posts;
            this.PostInfos = changeSet.PostInfos;
        }

        #endregion Constructor

        #region DataMember

        [DataMember]
        public List<Author> Authors { get; private set; }

        [DataMember]
        public List<Blog> Blogs { get; private set; }

        [DataMember]
        public List<Post> Posts { get; private set; }

        [DataMember]
        public List<PostInfo> PostInfos { get; private set; }

        #endregion DataMember

        #region IsEmpty

        public bool IsEmpty
        {
            get
            {
                return Authors == null &&
                    Blogs == null &&
                    Posts == null &&
                    PostInfos == null;
            }
        }

        #endregion IsEmpty

        #region IEnumerable

        public IEnumerator<Entity> GetEnumerator()
        {
            if (Authors != null && Authors.Count > 0)
            {
                foreach (var item in Authors)
                {
                    yield return item;
                }
            }

            if (Blogs != null && Blogs.Count > 0)
            {
                foreach (var item in Blogs)
                {
                    yield return item;
                }
            }

            if (Posts != null && Posts.Count > 0)
            {
                foreach (var item in Posts)
                {
                    yield return item;
                }
            }

            if (PostInfos != null && PostInfos.Count > 0)
            {
                foreach (var item in PostInfos)
                {
                    yield return item;
                }
            }

        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        #endregion IEnumerable
    }
}
