//------------------------------------------------------------------------------
// <autogenerated>
//   This file was generated by T4 code generator NTierDemoModel_NTierEntityGenerator.tt.
//   Any changes made to this file manually may cause incorrect behavior
//   and will be lost next time the file is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Globalization;
using System.Reflection;
using System.Runtime.Serialization;
using NTier.Common.Domain.Model;

namespace NTierDemo.Common.Domain.Model.NTierDemo
{
    [Serializable]
    [DataContract(IsReference = true)]
    [KnownType(typeof(Blog))]
    public partial class User : Entity<User>, INotifyPropertyChanged, INotifyPropertyChanging, IDataErrorInfo
    {
        #region Constructor and Initialization

        // partial method for initialization
        partial void Initialize();

        public User()
        {
            Initialize();
        }

        #endregion Constructor and Initialization

        #region Simple Properties

        [DataMember]
        [Key]
        [Required]
#if !CLIENT_PROFILE
        [RoundtripOriginal]
#endif
        [ServerGeneration(ServerGenerationTypes.Insert)]
        [SimpleProperty]
        public global::System.Int64 Id
        {
            get { return _id; }
            internal set
            {
                if (_id != value)
                {
                    //if (!IsDeserializing && ChangeTracker.IsChangeTrackingEnabled)
                    if (!IsDeserializing && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'Id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    IdChanging(value);
                    OnPropertyChanging("Id", value);
                    var previousValue = _id;
                    _id = value;
                    OnPropertyChanged("Id", previousValue, value);
                    IdChanged(previousValue);
                }
            }
        }
        private global::System.Int64 _id;

        partial void IdChanging(global::System.Int64 newValue);
        partial void IdChanged(global::System.Int64 previousValue);

        [DataMember]
        [Required]
#if !CLIENT_PROFILE
        [RoundtripOriginal]
#endif
        [SimpleProperty]
        public global::System.String Username
        {
            get { return _username; }
            set
            {
                if (_username != value)
                {
                    UsernameChanging(value);
                    OnPropertyChanging("Username", value);
                    var previousValue = _username;
                    _username = value;
                    OnPropertyChanged("Username", previousValue, value);
                    UsernameChanged(previousValue);
                }
            }
        }
        private global::System.String _username;

        partial void UsernameChanging(global::System.String newValue);
        partial void UsernameChanged(global::System.String previousValue);

        [DataMember]
        [Required]
#if !CLIENT_PROFILE
        [RoundtripOriginal]
#endif
        [SimpleProperty]
        public global::System.String Password
        {
            get { return _password; }
            set
            {
                if (_password != value)
                {
                    PasswordChanging(value);
                    OnPropertyChanging("Password", value);
                    var previousValue = _password;
                    _password = value;
                    OnPropertyChanged("Password", previousValue, value);
                    PasswordChanged(previousValue);
                }
            }
        }
        private global::System.String _password;

        partial void PasswordChanging(global::System.String newValue);
        partial void PasswordChanged(global::System.String previousValue);

        [DataMember]
        [Required]
#if !CLIENT_PROFILE
        [RoundtripOriginal]
#endif
        [SimpleProperty]
        public global::System.String FirstName
        {
            get { return _firstName; }
            set
            {
                if (_firstName != value)
                {
                    FirstNameChanging(value);
                    OnPropertyChanging("FirstName", value);
                    var previousValue = _firstName;
                    _firstName = value;
                    OnPropertyChanged("FirstName", previousValue, value);
                    FirstNameChanged(previousValue);
                }
            }
        }
        private global::System.String _firstName;

        partial void FirstNameChanging(global::System.String newValue);
        partial void FirstNameChanged(global::System.String previousValue);

        [DataMember]
        [Required]
#if !CLIENT_PROFILE
        [RoundtripOriginal]
#endif
        [SimpleProperty]
        public global::System.String LastName
        {
            get { return _lastName; }
            set
            {
                if (_lastName != value)
                {
                    LastNameChanging(value);
                    OnPropertyChanging("LastName", value);
                    var previousValue = _lastName;
                    _lastName = value;
                    OnPropertyChanged("LastName", previousValue, value);
                    LastNameChanged(previousValue);
                }
            }
        }
        private global::System.String _lastName;

        partial void LastNameChanging(global::System.String newValue);
        partial void LastNameChanged(global::System.String previousValue);

        [DataMember]
#if !CLIENT_PROFILE
        [RoundtripOriginal]
#endif
        [SimpleProperty]
        public global::System.String Description
        {
            get { return _description; }
            set
            {
                if (_description != value)
                {
                    DescriptionChanging(value);
                    OnPropertyChanging("Description", value);
                    var previousValue = _description;
                    _description = value;
                    OnPropertyChanged("Description", previousValue, value);
                    DescriptionChanged(previousValue);
                }
            }
        }
        private global::System.String _description;

        partial void DescriptionChanging(global::System.String newValue);
        partial void DescriptionChanged(global::System.String previousValue);

        [DataMember]
        [Required]
#if !CLIENT_PROFILE
        [RoundtripOriginal]
#endif
        [SimpleProperty]
        public global::System.DateTime CreatedDate
        {
            get { return _createdDate; }
            internal set
            {
                if (_createdDate != value)
                {
                    CreatedDateChanging(value);
                    OnPropertyChanging("CreatedDate", value);
                    var previousValue = _createdDate;
                    _createdDate = value;
                    OnPropertyChanged("CreatedDate", previousValue, value);
                    CreatedDateChanged(previousValue);
                }
            }
        }
        private global::System.DateTime _createdDate;

        partial void CreatedDateChanging(global::System.DateTime newValue);
        partial void CreatedDateChanged(global::System.DateTime previousValue);

        [DataMember]
        [Required]
#if !CLIENT_PROFILE
        [RoundtripOriginal]
#endif
        [SimpleProperty]
        public global::System.DateTime ModifiedDate
        {
            get { return _modifiedDate; }
            internal set
            {
                if (_modifiedDate != value)
                {
                    ModifiedDateChanging(value);
                    OnPropertyChanging("ModifiedDate", value);
                    var previousValue = _modifiedDate;
                    _modifiedDate = value;
                    OnPropertyChanged("ModifiedDate", previousValue, value);
                    ModifiedDateChanged(previousValue);
                }
            }
        }
        private global::System.DateTime _modifiedDate;

        partial void ModifiedDateChanging(global::System.DateTime newValue);
        partial void ModifiedDateChanged(global::System.DateTime previousValue);

        #endregion Simple Properties

        #region Complex Properties

        #endregion Complex Properties

        #region Navigation Properties

        [DataMember]
        [NavigationProperty]
        public TrackableCollection<Blog> Blogs
        {
            get
            {
                if (_blogs == null)
                {
                    _blogs = new TrackableCollection<Blog>();
                    _blogs.CollectionChanged += FixupBlogs;
                }
                return _blogs;
            }
            set
            {
                if (!object.ReferenceEquals(_blogs, value))
                {
                    if (!IsDeserializing && ChangeTracker.IsChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }

                    if (_blogs != null)
                    {
                       _blogs.CollectionChanged -= FixupBlogs;
                    }

                    _blogs = value;

                    if (_blogs != null)
                    {
                        _blogs.CollectionChanged += FixupBlogs;
                    }

                    OnPropertyChanged("Blogs", trackInChangeTracker: false);
                }
            }
        }
        private TrackableCollection<Blog> _blogs;

        #endregion Navigation Properties

        #region ChangeTracking

        protected override void ClearNavigationProperties()
        {
            Blogs.Clear();
        }

        #endregion ChangeTracking

        #region Association Fixup

        private void FixupBlogs(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }

            if (e.NewItems != null)
            {
                foreach (Blog item in e.NewItems)
                {
                    item.Owner = this;
                    if (ChangeTracker.IsChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.IsChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        RecordAdditionToCollectionProperties("Blogs", item);
                    }
                }
            }

            if (e.OldItems != null)
            {
                foreach (Blog item in e.OldItems)
                {
                    if (object.ReferenceEquals(item.Owner, this))
                    {
                        item.Owner = null;
                    }
                    if (ChangeTracker.IsChangeTrackingEnabled)
                    {
                        RecordRemovalFromCollectionProperties("Blogs", item);
                    }
                }
            }
        }

        #endregion Association Fixup

        protected override bool IsKeyEqual(User entity)
        {
            return this.Id == entity.Id;
        }

        protected override int GetKeyHashCode()
        {
            return this.Id.GetHashCode();
        }
    }
}
