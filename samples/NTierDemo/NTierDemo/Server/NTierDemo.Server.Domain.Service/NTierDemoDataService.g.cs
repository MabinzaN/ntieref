//------------------------------------------------------------------------------
// <auto-generated>
//   This file was generated by T4 code generator NTierDemoModel_NTierEntityGenerator.tt.
//   Any changes made to this file manually may cause incorrect behavior
//   and will be lost next time the file is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Security.Permissions;
using System.ServiceModel;
using System.ServiceModel.Activation;
using System.Transactions;
using NTier.Common.Domain.Model;
using NTier.Server.Domain.Repositories;
using NTier.Server.Domain.Service;
using NTierDemo.Common.Domain.Model.NTierDemo;
using NTierDemo.Common.Domain.Service.Contracts;
using NTierDemo.Server.Domain.Repositories;


namespace NTierDemo.Server.Domain.Service
{
    public partial class NTierDemoDataService : DataService<INTierDemoRepository>, INTierDemoDataService
    {
        #region fields
 
        private static Func<ClientInfo, INTierDemoRepository> _defaultRepositoryFactory = clientInfo => new NTierDemoRepository();
        private readonly Func<ClientInfo, INTierDemoRepository> _repositoryFactory;
 
        #endregion fields
 
        #region constructor
 
        public NTierDemoDataService()
            : this(_defaultRepositoryFactory)
        {
        }
 
        public NTierDemoDataService(Func<ClientInfo, INTierDemoRepository> repositoryFactory)
        {
            if (ReferenceEquals(null, repositoryFactory)) throw new ArgumentNullException("repositoryFactory");
            _repositoryFactory = repositoryFactory;
        }
 
        #endregion constructor

        #region query service methods

        partial void PreProcessing(ClientInfo clientInfo, ref Query query, INTierDemoRepository repository);
        partial void PostProcessing(ClientInfo clientInfo, Query query, ref QueryResult<User> result, INTierDemoRepository repository);
        partial void PostProcessing(ClientInfo clientInfo, Query query, ref QueryResult<Blog> result, INTierDemoRepository repository);
        partial void PostProcessing(ClientInfo clientInfo, Query query, ref QueryResult<Post> result, INTierDemoRepository repository);

        [OperationBehavior(Impersonation = ImpersonationOption.Allowed)]
        public QueryResult<User> GetUsers(ClientInfo clientInfo, Query query)
        {
            using (var dataRepository = _repositoryFactory(clientInfo))
            {
                PreProcessing(clientInfo, ref query, dataRepository);
                var result = Get(dataRepository.Users.AsNoTrackingQueryable(), query, clientInfo);
                PostProcessing(clientInfo, query, ref result, dataRepository);
                return result;
            }
        }

        [OperationBehavior(Impersonation = ImpersonationOption.Allowed)]
        public QueryResult<Blog> GetBlogs(ClientInfo clientInfo, Query query)
        {
            using (var dataRepository = _repositoryFactory(clientInfo))
            {
                PreProcessing(clientInfo, ref query, dataRepository);
                var result = Get(dataRepository.Blogs.AsNoTrackingQueryable(), query, clientInfo);
                PostProcessing(clientInfo, query, ref result, dataRepository);
                return result;
            }
        }

        [OperationBehavior(Impersonation = ImpersonationOption.Allowed)]
        public QueryResult<Post> GetPosts(ClientInfo clientInfo, Query query)
        {
            using (var dataRepository = _repositoryFactory(clientInfo))
            {
                PreProcessing(clientInfo, ref query, dataRepository);
                var result = Get(dataRepository.Posts.AsNoTrackingQueryable(), query, clientInfo);
                PostProcessing(clientInfo, query, ref result, dataRepository);
                return result;
            }
        }

        #endregion query service methods

        #region update service method

        partial void PreProcessing(ClientInfo clientInfo, ref NTierDemoChangeSet changeSet, INTierDemoRepository repository);
        partial void BeforeSaving(ClientInfo clientInfo, ref NTierDemoChangeSet changeSet, INTierDemoRepository repository);
        partial void PostProcessing(ClientInfo clientInfo, ref NTierDemoResultSet result, INTierDemoRepository repository);

        [OperationBehavior(TransactionScopeRequired = true, Impersonation = ImpersonationOption.Allowed)]
        public NTierDemoResultSet SubmitChanges(ClientInfo clientInfo, NTierDemoChangeSet changeSet)
        {
            var resultSet = new NTierDemoResultSet(changeSet);
            using (var transactionScope = CreateSavingTransactionScope())
            {
                using (var dataRepository = _repositoryFactory(clientInfo))
                {
                    // optional custom processing
                    PreProcessing(clientInfo, ref changeSet, dataRepository);

                    // apply chnages to repository
                    ApplyChanges(dataRepository, dataRepository.Users, changeSet, changeSet.Users, clientInfo);
                    ApplyChanges(dataRepository, dataRepository.Blogs, changeSet, changeSet.Blogs, clientInfo);
                    ApplyChanges(dataRepository, dataRepository.Posts, changeSet, changeSet.Posts, clientInfo);

                    // optional custom processing
                    BeforeSaving(clientInfo, ref changeSet, dataRepository);

                    // save changes
                    SaveChanges(dataRepository, changeSet, resultSet);

                    // optional custom processing
                    PostProcessing(clientInfo, ref resultSet, dataRepository);
                }
                transactionScope.Complete();
            }
            return resultSet;
        }

        protected override FaultException CreateUpdateFaultException(string message, IEnumerable<Entity> entities)
        {
            return new FaultException<NTierDemoUpdateFault>(new NTierDemoUpdateFault(message, entities), "Update error");
        }

        protected override FaultException CreateOptimisticConcurrencyFaultException(string message, IEnumerable<Entity> entities)
        {
            return new FaultException<NTierDemoOptimisticConcurrencyFault>(new NTierDemoOptimisticConcurrencyFault(message, entities), "Optimistic concurrency error");
        }

        #endregion update service method
    }
}

