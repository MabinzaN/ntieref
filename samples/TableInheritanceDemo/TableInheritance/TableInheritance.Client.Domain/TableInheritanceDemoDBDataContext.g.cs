//------------------------------------------------------------------------------
// <auto-generated>
//   This file was generated by T4 code generator Model2.tt.
//   Any changes made to this file manually may cause incorrect behavior
//   and will be lost next time the file is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.Composition;
using System.ComponentModel.Composition.Hosting;
using System.Data;
using System.Linq;
using System.ServiceModel;
using System.Transactions;
using NTier.Client.Domain;
using NTier.Client.Domain.Service.ChannelFactory;
using NTier.Common.Domain.Model;
using TableInheritance.Common.Domain.Model.TableInheritanceDemoDB;
using TableInheritance.Common.Domain.Service.Contracts;

namespace TableInheritance.Client.Domain
{
    public sealed partial class TableInheritanceDemoDBDataContext : DataContext<TableInheritanceDemoDBResultSet>, ITableInheritanceDemoDBDataContext
    {
        #region Fields

        private readonly Func<ITableInheritanceDemoDBDataService> _dataServiceFactory;
        private readonly InternalEntitySet<Person> _people;

        #endregion Fields

        #region Contructor

        partial void Initialize();

        public TableInheritanceDemoDBDataContext(Func<ITableInheritanceDemoDBDataService> dataServiceFactory)
        {
            _dataServiceFactory = dataServiceFactory;
            _people = CreateAndRegisterInternalEntitySet<Person>();
            Initialize();
        }

        public TableInheritanceDemoDBDataContext(IChannelFactory<ITableInheritanceDemoDBDataService> channelFactory)
            : this(channelFactory.CreateChannel)
        {
        }

        public TableInheritanceDemoDBDataContext(string endpointConfigurationName = "TableInheritanceDemoDBDataService")
            : this(CreateChannelFactory(endpointConfigurationName).CreateChannel)
        {
        }

        private static ChannelFactory<ITableInheritanceDemoDBDataService> CreateChannelFactory(string endpointConfigurationName)
        {
            var channelFactory = string.IsNullOrEmpty(endpointConfigurationName)
                ? new ChannelFactory<ITableInheritanceDemoDBDataService>()
                : new ChannelFactory<ITableInheritanceDemoDBDataService>(endpointConfigurationName);
            return channelFactory;
        }

        #endregion Contructor

        #region Entities

        #region People

        public IEntitySet<Person> People
        {
            get
            {
                if (personEntitySet == null)
                {
                    personEntitySet = CreateEntitySet<Person>(_people, AttachWithRelations, GetPeople);
                }
                return personEntitySet;
            }
        }
        private IEntitySet<Person> personEntitySet;

        public void Add(Person entity)
        {
            People.Add(entity);
        }

        public void Delete(Person entity)
        {
            People.Delete(entity);
        }

        public void Attach(Person entity)
        {
            People.Attach(entity);
        }

        public void AttachAsModified(Person entity, Person original)
        {
            People.AttachAsModified(entity, original);
        }

        public void Detach(Person entity)
        {
            People.Detach(entity);
        }

        private QueryResult<Person> GetPeople(ClientInfo clientInfo, Query query)
        {
            var service = _dataServiceFactory();
            try
            {
                var result = service.GetPeople(clientInfo, query);
                return result;
            }
            finally
            {
                var client = service as ICommunicationObject;
                if (client != null)
                {
                    if (client.State == CommunicationState.Faulted)
                    {
                        client.Abort();
                    }
                    else
                    {
                        client.Close();
                    }
                }
            }
        }

        private Person AttachWithRelations(Person entity, InsertMode insertMode = InsertMode.Attach, MergeOption mergeOption = MergeOption.AppendOnly, List<object> referenceTrackingList = null)
        {
            #region iteration tracking

            if (referenceTrackingList == null)
            {
                referenceTrackingList = new List<object>();
            }

            if (referenceTrackingList.Contains(entity))
            {
                return _people.GetExisting(entity);
            }
            else
            {
                referenceTrackingList.Add(entity);
            }

            #endregion

            #region add/attach entity

            Person existingEntity = null;

            switch (insertMode)
            {
                case InsertMode.Add:
                    existingEntity = _people.Add(entity);
                    break;
                case InsertMode.Attach:
                    existingEntity = _people.Attach(entity);
                    break;
                default:
                    throw new Exception(string.Format("Implementation Exception: missing action for {0}", insertMode));
            }

            if (((object)existingEntity) != null && object.ReferenceEquals(existingEntity, entity))
            {
                return existingEntity;
            }

            #endregion

            #region attach relations recursively

            #endregion

            #region refresh existing entity based on merge options

            if (existingEntity != null && !object.ReferenceEquals(existingEntity, entity))
            {
                if (People.MergeOption == MergeOption.OverwriteChanges)
                {
                    Invoke(delegate
                    {
                        existingEntity.Refresh(entity, trackChanges: false);
                        existingEntity.AcceptChanges();
                    });
                }
                else if (People.MergeOption == MergeOption.PreserveChanges)
                {
                    Invoke(delegate
                    {
                        existingEntity.Refresh(entity, trackChanges: false, preserveExistingChanges: true);
                    });
                }
            }

            #endregion

            return existingEntity;
        }

        #endregion People

        #endregion Entities

        #region Submit Changes

        protected override TableInheritanceDemoDBResultSet SubmitChanges(ClientInfo clientInfo)
        {
            // get reduced change set
            var changeSet = GetChangeSet();

            if (!changeSet.IsEmpty)
            {
                var service = _dataServiceFactory();
                try
                {
                    // submit data
                    var resultSet = service.SubmitChanges(clientInfo, changeSet);
                    return resultSet;
                }
                finally
                {
                    var client = service as ICommunicationObject;
                    if (client != null)
                    {
                        if (client.State == CommunicationState.Faulted)
                        {
                            client.Abort();
                        }
                        else
                        {
                            client.Close();
                        }
                    }
                }
            }
            else
            {
                // return empty result set
                return new TableInheritanceDemoDBResultSet(changeSet);
            }
        }

        private TableInheritanceDemoDBChangeSet GetChangeSet()
        {
            IEnumerable<Person> people;
            lock (_people.SyncRoot)
            {
                people = _people.GetAllEntities();
            }
            // get reduced change set
            var changeSet = new TableInheritanceDemoDBChangeSet(
                people);

            return changeSet;
        }

        protected override void Refresh(TableInheritanceDemoDBResultSet resultSet)
        {
            lock (_people.SyncRoot)
            {
                Refresh(_people, resultSet.People);
            }
        }

        #endregion Submit Changes
    }
}
