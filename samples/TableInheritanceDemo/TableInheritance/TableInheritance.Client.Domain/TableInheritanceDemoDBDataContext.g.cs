//------------------------------------------------------------------------------
// <auto-generated>
//   This file was generated by T4 code generator Model2.tt.
//   Any changes made to this file manually may cause incorrect behavior
//   and will be lost next time the file is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel;
using System.ComponentModel.Composition;
using System.ComponentModel.Composition.Hosting;
using System.Linq;
using System.ServiceModel;
using System.Transactions;
using NTier.Client.Domain;
using NTier.Client.Domain.Service.ChannelFactory;
using NTier.Common.Domain.Model;
using TableInheritance.Common.Domain.Model.TableInheritanceDemoDB;
using TableInheritance.Common.Domain.Service.Contracts;

namespace TableInheritance.Client.Domain
{
    public sealed partial class TableInheritanceDemoDBDataContext : DataContext<TableInheritanceDemoDBResultSet>, ITableInheritanceDemoDBDataContext
    {
        #region Fields

        private readonly Func<ITableInheritanceDemoDBDataService> _dataServiceFactory;

        private readonly Func<ITableInheritanceDemoDBChangeSetFactory> _changeSetFactoryProvider;

        private readonly InternalEntitySet<Person> _people;
        private readonly InternalEntitySet<Address> _addresses;
        private readonly InternalEntitySet<Demographic> _demographics;
        private readonly InternalEntitySet<EmployeeRole> _employeeRoles;
 
        private IEntitySet<Person> personEntitySet;
        private IEntitySet<Address> addressEntitySet;
        private IEntitySet<Demographic> demographicEntitySet;
        private IEntitySet<EmployeeRole> employeeRoleEntitySet;

        #endregion Fields

        #region Contructor

        partial void Initialize();

        public TableInheritanceDemoDBDataContext(Func<ITableInheritanceDemoDBDataService> dataServiceFactory, Func<ITableInheritanceDemoDBChangeSetFactory> changeSetFactoryProvider = null)
        {
            _dataServiceFactory = dataServiceFactory;

            _changeSetFactoryProvider = changeSetFactoryProvider ?? (() => new TableInheritanceDemoDBChangeSetFactory());

            _people = CreateAndRegisterInternalEntitySet<Person>();
            _addresses = CreateAndRegisterInternalEntitySet<Address>();
            _demographics = CreateAndRegisterInternalEntitySet<Demographic>();
            _employeeRoles = CreateAndRegisterInternalEntitySet<EmployeeRole>();

            Initialize();
        }

        public TableInheritanceDemoDBDataContext(IChannelFactory<ITableInheritanceDemoDBDataService> channelFactory, Func<ITableInheritanceDemoDBChangeSetFactory> changeSetFactoryProvider = null)
            : this(channelFactory.CreateChannel, changeSetFactoryProvider)
        {
        }

        public TableInheritanceDemoDBDataContext(string endpointConfigurationName = "TableInheritanceDemoDBDataService", Func<ITableInheritanceDemoDBChangeSetFactory> changeSetFactoryProvider = null)
            : this(CreateChannelFactory(endpointConfigurationName).CreateChannel, changeSetFactoryProvider)
        {
        }

        private static ChannelFactory<ITableInheritanceDemoDBDataService> CreateChannelFactory(string endpointConfigurationName)
        {
            var channelFactory = string.IsNullOrEmpty(endpointConfigurationName)
                ? new ChannelFactory<ITableInheritanceDemoDBDataService>()
                : new ChannelFactory<ITableInheritanceDemoDBDataService>(endpointConfigurationName);
            return channelFactory;
        }

        #endregion Contructor

        #region Entities

        #region People

        public IEntitySet<Person> People
        {
            get
            {
                if (ReferenceEquals(null, personEntitySet))
                {
                    personEntitySet = CreateEntitySet<Person>(_people, AttachWithRelations, OnDetach, GetPeople);
                }

                return personEntitySet;
            }
        }

        public void Add(Person entity)
        {
            People.Add(entity);
        }

        public void Delete(Person entity)
        {
            People.Delete(entity);
        }

        public void Attach(Person entity)
        {
            People.Attach(entity);
        }

        public void AttachAsModified(Person entity, Person original)
        {
            People.AttachAsModified(entity, original);
        }

        public void Detach(Person entity)
        {
            People.Detach(entity);
        }

        private QueryResult<Person> GetPeople(ClientInfo clientInfo, Query query)
        {
            var service = _dataServiceFactory();
            try
            {
                var result = service.GetPeople(clientInfo, query);
                return result;
            }
            finally
            {
                var client = service as ICommunicationObject;
                if (client != null)
                {
                    if (client.State == CommunicationState.Faulted)
                    {
                        client.Abort();
                    }
                    else
                    {
                        client.Close();
                    }
                }
            }
        }

        private Person AttachWithRelations(Person entity, InsertMode insertMode = InsertMode.Attach, MergeOption mergeOption = MergeOption.AppendOnly, List<object> referenceTrackingList = null)
        {
            #region iteration tracking

            if (ReferenceEquals(null, referenceTrackingList))
            {
                referenceTrackingList = new List<object>();
            }

            if (referenceTrackingList.Contains(entity))
            {
                return _people.GetExisting(entity);
            }
            else
            {
                referenceTrackingList.Add(entity);
            }

            #endregion

            #region add/attach entity

            Person existingEntity = null;

            switch (insertMode)
            {
                case InsertMode.Add:
                    existingEntity = _people.Add(entity);
                    break;
                case InsertMode.Attach:
                    existingEntity = _people.Attach(entity);
                    break;
                default:
                    throw new Exception(string.Format("Implementation Exception: missing action for {0}", insertMode));
            }

            if (!ReferenceEquals(null, existingEntity) && ReferenceEquals(existingEntity, entity))
            {
                return existingEntity;
            }

            #endregion

            #region attach relations recursively
            
            // register entity's property changed event if entity is new to context
            if (ReferenceEquals(null, existingEntity))
            {
                entity.PropertyChanged += On_person_propertyChanged;
            }

            // attach related entity to context
            if (!ReferenceEquals(null, entity.Address1))
            {
                var existingRelatedEntity = AttachWithRelations(entity.Address1, insertMode, mergeOption, referenceTrackingList);

                // update relation if entity is new to context or relation is new to entity
                if (ReferenceEquals(null, existingEntity) || !entity.Address1.Equals(existingEntity.Address1))
                {
                    if (!ReferenceEquals(null, existingRelatedEntity) && !ReferenceEquals(existingRelatedEntity, entity.Address1))
                    {
                        // check merge options
                        if (!(mergeOption == MergeOption.PreserveChanges && existingRelatedEntity.ChangeTracker.OriginalValues.ContainsKey("People")))
                        {
                            using (entity.ChangeTrackingPrevention())
                            {
                                entity.Address1 = existingRelatedEntity;
                            }

                            using (existingRelatedEntity.ChangeTrackingPrevention())
                            {
                                var entityToReplace = existingRelatedEntity.People.FirstOrDefault(e => e.Equals(entity));
                                if (!ReferenceEquals(null, entityToReplace))
                                {
                                    using (entityToReplace.ChangeTrackingPrevention())
                                    {
                                        existingRelatedEntity.People.Remove(entityToReplace);
                                    }
                                }

                                existingRelatedEntity.People.Add(entity);
                            }
                        }
                    }
                }
            }

            #endregion

            #region refresh existing entity based on merge options

            if (!ReferenceEquals(null, existingEntity) && !ReferenceEquals(existingEntity, entity))
            {
                if (People.MergeOption == MergeOption.OverwriteChanges)
                {
                    Invoke(delegate
                    {
                        existingEntity.Refresh(entity, trackChanges: false);
                        existingEntity.AcceptChanges();
                    });
                }
                else if (People.MergeOption == MergeOption.PreserveChanges)
                {
                    Invoke(delegate
                    {
                        existingEntity.Refresh(entity, trackChanges: false, preserveExistingChanges: true);
                    });
                }
            }

            #endregion

            return existingEntity;
        }

        private void OnDetach(Person entity)
        {
            entity.PropertyChanged -= On_person_propertyChanged;

        }

        private void On_person_propertyChanged(object sender, PropertyChangedEventArgs e)
        {
            var entity = sender as Person;
            if (!ReferenceEquals(null, entity) && entity.IsChangeTrackingPrevented)
            {
                return;
            }

            if (e.PropertyName == "Address1")
            {
                var relation = entity[e.PropertyName] as Address;
                if (!ReferenceEquals(null, relation))
                {
                    Attach(relation);
                }
            }
        }

        #endregion People

        #region Addresses

        public IEntitySet<Address> Addresses
        {
            get
            {
                if (ReferenceEquals(null, addressEntitySet))
                {
                    addressEntitySet = CreateEntitySet<Address>(_addresses, AttachWithRelations, OnDetach, GetAddresses);
                }

                return addressEntitySet;
            }
        }

        public void Add(Address entity)
        {
            Addresses.Add(entity);
        }

        public void Delete(Address entity)
        {
            Addresses.Delete(entity);
        }

        public void Attach(Address entity)
        {
            Addresses.Attach(entity);
        }

        public void AttachAsModified(Address entity, Address original)
        {
            Addresses.AttachAsModified(entity, original);
        }

        public void Detach(Address entity)
        {
            Addresses.Detach(entity);
        }

        private QueryResult<Address> GetAddresses(ClientInfo clientInfo, Query query)
        {
            var service = _dataServiceFactory();
            try
            {
                var result = service.GetAddresses(clientInfo, query);
                return result;
            }
            finally
            {
                var client = service as ICommunicationObject;
                if (client != null)
                {
                    if (client.State == CommunicationState.Faulted)
                    {
                        client.Abort();
                    }
                    else
                    {
                        client.Close();
                    }
                }
            }
        }

        private Address AttachWithRelations(Address entity, InsertMode insertMode = InsertMode.Attach, MergeOption mergeOption = MergeOption.AppendOnly, List<object> referenceTrackingList = null)
        {
            #region iteration tracking

            if (ReferenceEquals(null, referenceTrackingList))
            {
                referenceTrackingList = new List<object>();
            }

            if (referenceTrackingList.Contains(entity))
            {
                return _addresses.GetExisting(entity);
            }
            else
            {
                referenceTrackingList.Add(entity);
            }

            #endregion

            #region add/attach entity

            Address existingEntity = null;

            switch (insertMode)
            {
                case InsertMode.Add:
                    existingEntity = _addresses.Add(entity);
                    break;
                case InsertMode.Attach:
                    existingEntity = _addresses.Attach(entity);
                    break;
                default:
                    throw new Exception(string.Format("Implementation Exception: missing action for {0}", insertMode));
            }

            if (!ReferenceEquals(null, existingEntity) && ReferenceEquals(existingEntity, entity))
            {
                return existingEntity;
            }

            #endregion

            #region attach relations recursively
            

            if (!ReferenceEquals(null, entity.Customers))
            {
                // register relation's collection changed event if entity is new to context
                if (ReferenceEquals(null, existingEntity))
                {
                    entity.Customers.CollectionChanged += On_address_customers_collectionChanged;
                }

                // attach related entities to context
                if (entity.Customers.Count > 0)
                {
                    foreach (var item in entity.Customers.ToArray())
                    {
                        var existingRelatedEntity = (Customer)AttachWithRelations(item, insertMode, mergeOption, referenceTrackingList);

                        // update relation if entity is new to context or relation is new to entity
                        if (ReferenceEquals(null, existingEntity) || !existingEntity.Customers.Contains(item))
                        {
                            if (!ReferenceEquals(null, existingRelatedEntity) && !ReferenceEquals(existingRelatedEntity, item))
                            {
                                // check merge options
                                if (!(mergeOption == MergeOption.PreserveChanges && existingRelatedEntity.ChangeTracker.OriginalValues.ContainsKey("Address")))
                                {
                                    using (entity.ChangeTrackingPrevention())
                                    {
                                        entity.Customers.Replace(item, existingRelatedEntity);
                                    }

                                    using (existingRelatedEntity.ChangeTrackingPrevention())
                                    {
                                        existingRelatedEntity.Address = entity;
                                    }
                                }
                            }
                        }
                    }
                }
            }

            if (!ReferenceEquals(null, entity.People))
            {
                // register relation's collection changed event if entity is new to context
                if (ReferenceEquals(null, existingEntity))
                {
                    entity.People.CollectionChanged += On_address_people_collectionChanged;
                }

                // attach related entities to context
                if (entity.People.Count > 0)
                {
                    foreach (var item in entity.People.ToArray())
                    {
                        var existingRelatedEntity = AttachWithRelations(item, insertMode, mergeOption, referenceTrackingList);

                        // update relation if entity is new to context or relation is new to entity
                        if (ReferenceEquals(null, existingEntity) || !existingEntity.People.Contains(item))
                        {
                            if (!ReferenceEquals(null, existingRelatedEntity) && !ReferenceEquals(existingRelatedEntity, item))
                            {
                                // check merge options
                                if (!(mergeOption == MergeOption.PreserveChanges && existingRelatedEntity.ChangeTracker.OriginalValues.ContainsKey("Address1")))
                                {
                                    using (entity.ChangeTrackingPrevention())
                                    {
                                        entity.People.Replace(item, existingRelatedEntity);
                                    }

                                    using (existingRelatedEntity.ChangeTrackingPrevention())
                                    {
                                        existingRelatedEntity.Address1 = entity;
                                    }
                                }
                            }
                        }
                    }
                }
            }

            #endregion

            #region refresh existing entity based on merge options

            if (!ReferenceEquals(null, existingEntity) && !ReferenceEquals(existingEntity, entity))
            {
                if (Addresses.MergeOption == MergeOption.OverwriteChanges)
                {
                    Invoke(delegate
                    {
                        existingEntity.Refresh(entity, trackChanges: false);
                        existingEntity.AcceptChanges();
                    });
                }
                else if (Addresses.MergeOption == MergeOption.PreserveChanges)
                {
                    Invoke(delegate
                    {
                        existingEntity.Refresh(entity, trackChanges: false, preserveExistingChanges: true);
                    });
                }
            }

            #endregion

            return existingEntity;
        }

        private void OnDetach(Address entity)
        {
            if (!ReferenceEquals(null, entity.Customers))
            {
                entity.Customers.CollectionChanged -= On_address_customers_collectionChanged;
            }

            if (!ReferenceEquals(null, entity.People))
            {
                entity.People.CollectionChanged -= On_address_people_collectionChanged;
            }

        }

        private void On_address_customers_collectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            var entity = sender as Address;
            if (!ReferenceEquals(null, entity) && entity.IsChangeTrackingPrevented)
            {
                return;
            }

            if (!ReferenceEquals(null, e.NewItems))
            {
                foreach (Customer item in e.NewItems)
                {
                    Attach(item);
                }
            }
        }

        private void On_address_people_collectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            var entity = sender as Address;
            if (!ReferenceEquals(null, entity) && entity.IsChangeTrackingPrevented)
            {
                return;
            }

            if (!ReferenceEquals(null, e.NewItems))
            {
                foreach (Person item in e.NewItems)
                {
                    Attach(item);
                }
            }
        }

        #endregion Addresses

        #region Demographics

        public IEntitySet<Demographic> Demographics
        {
            get
            {
                if (ReferenceEquals(null, demographicEntitySet))
                {
                    demographicEntitySet = CreateEntitySet<Demographic>(_demographics, AttachWithRelations, OnDetach, GetDemographics);
                }

                return demographicEntitySet;
            }
        }

        public void Add(Demographic entity)
        {
            Demographics.Add(entity);
        }

        public void Delete(Demographic entity)
        {
            Demographics.Delete(entity);
        }

        public void Attach(Demographic entity)
        {
            Demographics.Attach(entity);
        }

        public void AttachAsModified(Demographic entity, Demographic original)
        {
            Demographics.AttachAsModified(entity, original);
        }

        public void Detach(Demographic entity)
        {
            Demographics.Detach(entity);
        }

        private QueryResult<Demographic> GetDemographics(ClientInfo clientInfo, Query query)
        {
            var service = _dataServiceFactory();
            try
            {
                var result = service.GetDemographics(clientInfo, query);
                return result;
            }
            finally
            {
                var client = service as ICommunicationObject;
                if (client != null)
                {
                    if (client.State == CommunicationState.Faulted)
                    {
                        client.Abort();
                    }
                    else
                    {
                        client.Close();
                    }
                }
            }
        }

        private Demographic AttachWithRelations(Demographic entity, InsertMode insertMode = InsertMode.Attach, MergeOption mergeOption = MergeOption.AppendOnly, List<object> referenceTrackingList = null)
        {
            #region iteration tracking

            if (ReferenceEquals(null, referenceTrackingList))
            {
                referenceTrackingList = new List<object>();
            }

            if (referenceTrackingList.Contains(entity))
            {
                return _demographics.GetExisting(entity);
            }
            else
            {
                referenceTrackingList.Add(entity);
            }

            #endregion

            #region add/attach entity

            Demographic existingEntity = null;

            switch (insertMode)
            {
                case InsertMode.Add:
                    existingEntity = _demographics.Add(entity);
                    break;
                case InsertMode.Attach:
                    existingEntity = _demographics.Attach(entity);
                    break;
                default:
                    throw new Exception(string.Format("Implementation Exception: missing action for {0}", insertMode));
            }

            if (!ReferenceEquals(null, existingEntity) && ReferenceEquals(existingEntity, entity))
            {
                return existingEntity;
            }

            #endregion

            #region attach relations recursively
            
            // register entity's property changed event if entity is new to context
            if (ReferenceEquals(null, existingEntity))
            {
                entity.PropertyChanged += On_demographic_propertyChanged;
            }

            // attach related entity to context
            if (!ReferenceEquals(null, entity.Customer))
            {
                var existingRelatedEntity = (Customer)AttachWithRelations(entity.Customer, insertMode, mergeOption, referenceTrackingList);

                // update relation if entity is new to context or relation is new to entity
                if (ReferenceEquals(null, existingEntity) || !entity.Customer.Equals(existingEntity.Customer))
                {
                    if (!ReferenceEquals(null, existingRelatedEntity) && !ReferenceEquals(existingRelatedEntity, entity.Customer))
                    {
                        // check merge options
                        if (!(mergeOption == MergeOption.PreserveChanges && existingRelatedEntity.ChangeTracker.OriginalValues.ContainsKey("Demographic")))
                        {
                            using (entity.ChangeTrackingPrevention())
                            {
                                entity.Customer = existingRelatedEntity;
                            }
                            using (existingRelatedEntity.ChangeTrackingPrevention())
                            {
                                existingRelatedEntity.Demographic = entity;
                            }
                        }
                    }
                }
            }

            if (!ReferenceEquals(null, entity.Customers))
            {
                // register relation's collection changed event if entity is new to context
                if (ReferenceEquals(null, existingEntity))
                {
                    entity.Customers.CollectionChanged += On_demographic_customers_collectionChanged;
                }

                // attach related entities to context
                if (entity.Customers.Count > 0)
                {
                    foreach (var item in entity.Customers.ToArray())
                    {
                        var existingRelatedEntity = (Customer)AttachWithRelations(item, insertMode, mergeOption, referenceTrackingList);

                        // update relation if entity is new to context or relation is new to entity
                        if (ReferenceEquals(null, existingEntity) || !existingEntity.Customers.Contains(item))
                        {
                            if (!ReferenceEquals(null, existingRelatedEntity) && !ReferenceEquals(existingRelatedEntity, item))
                            {
                                // check merge options
                                if (!(mergeOption == MergeOption.PreserveChanges && existingRelatedEntity.ChangeTracker.OriginalValues.ContainsKey("Demographics")))
                                {
                                    using (entity.ChangeTrackingPrevention())
                                    {
                                        entity.Customers.Replace(item, existingRelatedEntity);
                                    }

                                    using (existingRelatedEntity.ChangeTrackingPrevention())
                                    {
                                        var entityToReplace = existingRelatedEntity.Demographics.FirstOrDefault(e => e.Equals(entity));
                                        if (!ReferenceEquals(null, entityToReplace))
                                        {
                                            using (entityToReplace.ChangeTrackingPrevention())
                                            {
                                                existingRelatedEntity.Demographics.Remove(entityToReplace);
                                            }
                                        }

                                        existingRelatedEntity.Demographics.Add(entity);
                                    }
                                }
                            }
                        }
                    }
                }
            }

            #endregion

            #region refresh existing entity based on merge options

            if (!ReferenceEquals(null, existingEntity) && !ReferenceEquals(existingEntity, entity))
            {
                if (Demographics.MergeOption == MergeOption.OverwriteChanges)
                {
                    Invoke(delegate
                    {
                        existingEntity.Refresh(entity, trackChanges: false);
                        existingEntity.AcceptChanges();
                    });
                }
                else if (Demographics.MergeOption == MergeOption.PreserveChanges)
                {
                    Invoke(delegate
                    {
                        existingEntity.Refresh(entity, trackChanges: false, preserveExistingChanges: true);
                    });
                }
            }

            #endregion

            return existingEntity;
        }

        private void OnDetach(Demographic entity)
        {
            entity.PropertyChanged -= On_demographic_propertyChanged;

            if (!ReferenceEquals(null, entity.Customers))
            {
                entity.Customers.CollectionChanged -= On_demographic_customers_collectionChanged;
            }

        }

        private void On_demographic_propertyChanged(object sender, PropertyChangedEventArgs e)
        {
            var entity = sender as Demographic;
            if (!ReferenceEquals(null, entity) && entity.IsChangeTrackingPrevented)
            {
                return;
            }

            if (e.PropertyName == "Customer")
            {
                var relation = entity[e.PropertyName] as Customer;
                if (!ReferenceEquals(null, relation))
                {
                    Attach(relation);
                }
            }
        }

        private void On_demographic_customers_collectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            var entity = sender as Demographic;
            if (!ReferenceEquals(null, entity) && entity.IsChangeTrackingPrevented)
            {
                return;
            }

            if (!ReferenceEquals(null, e.NewItems))
            {
                foreach (Customer item in e.NewItems)
                {
                    Attach(item);
                }
            }
        }

        #endregion Demographics

        #region EmployeeRoles

        public IEntitySet<EmployeeRole> EmployeeRoles
        {
            get
            {
                if (ReferenceEquals(null, employeeRoleEntitySet))
                {
                    employeeRoleEntitySet = CreateEntitySet<EmployeeRole>(_employeeRoles, AttachWithRelations, OnDetach, GetEmployeeRoles);
                }

                return employeeRoleEntitySet;
            }
        }

        public void Add(EmployeeRole entity)
        {
            EmployeeRoles.Add(entity);
        }

        public void Delete(EmployeeRole entity)
        {
            EmployeeRoles.Delete(entity);
        }

        public void Attach(EmployeeRole entity)
        {
            EmployeeRoles.Attach(entity);
        }

        public void AttachAsModified(EmployeeRole entity, EmployeeRole original)
        {
            EmployeeRoles.AttachAsModified(entity, original);
        }

        public void Detach(EmployeeRole entity)
        {
            EmployeeRoles.Detach(entity);
        }

        private QueryResult<EmployeeRole> GetEmployeeRoles(ClientInfo clientInfo, Query query)
        {
            var service = _dataServiceFactory();
            try
            {
                var result = service.GetEmployeeRoles(clientInfo, query);
                return result;
            }
            finally
            {
                var client = service as ICommunicationObject;
                if (client != null)
                {
                    if (client.State == CommunicationState.Faulted)
                    {
                        client.Abort();
                    }
                    else
                    {
                        client.Close();
                    }
                }
            }
        }

        private EmployeeRole AttachWithRelations(EmployeeRole entity, InsertMode insertMode = InsertMode.Attach, MergeOption mergeOption = MergeOption.AppendOnly, List<object> referenceTrackingList = null)
        {
            #region iteration tracking

            if (ReferenceEquals(null, referenceTrackingList))
            {
                referenceTrackingList = new List<object>();
            }

            if (referenceTrackingList.Contains(entity))
            {
                return _employeeRoles.GetExisting(entity);
            }
            else
            {
                referenceTrackingList.Add(entity);
            }

            #endregion

            #region add/attach entity

            EmployeeRole existingEntity = null;

            switch (insertMode)
            {
                case InsertMode.Add:
                    existingEntity = _employeeRoles.Add(entity);
                    break;
                case InsertMode.Attach:
                    existingEntity = _employeeRoles.Attach(entity);
                    break;
                default:
                    throw new Exception(string.Format("Implementation Exception: missing action for {0}", insertMode));
            }

            if (!ReferenceEquals(null, existingEntity) && ReferenceEquals(existingEntity, entity))
            {
                return existingEntity;
            }

            #endregion

            #region attach relations recursively
            

            if (!ReferenceEquals(null, entity.Employees))
            {
                // register relation's collection changed event if entity is new to context
                if (ReferenceEquals(null, existingEntity))
                {
                    entity.Employees.CollectionChanged += On_employeeRole_employees_collectionChanged;
                }

                // attach related entities to context
                if (entity.Employees.Count > 0)
                {
                    foreach (var item in entity.Employees.ToArray())
                    {
                        var existingRelatedEntity = (Employee)AttachWithRelations(item, insertMode, mergeOption, referenceTrackingList);

                        // update relation if entity is new to context or relation is new to entity
                        if (ReferenceEquals(null, existingEntity) || !existingEntity.Employees.Contains(item))
                        {
                            if (!ReferenceEquals(null, existingRelatedEntity) && !ReferenceEquals(existingRelatedEntity, item))
                            {
                                // check merge options
                                if (!(mergeOption == MergeOption.PreserveChanges && existingRelatedEntity.ChangeTracker.OriginalValues.ContainsKey("EmployeeRole")))
                                {
                                    using (entity.ChangeTrackingPrevention())
                                    {
                                        entity.Employees.Replace(item, existingRelatedEntity);
                                    }

                                    using (existingRelatedEntity.ChangeTrackingPrevention())
                                    {
                                        existingRelatedEntity.EmployeeRole = entity;
                                    }
                                }
                            }
                        }
                    }
                }
            }

            #endregion

            #region refresh existing entity based on merge options

            if (!ReferenceEquals(null, existingEntity) && !ReferenceEquals(existingEntity, entity))
            {
                if (EmployeeRoles.MergeOption == MergeOption.OverwriteChanges)
                {
                    Invoke(delegate
                    {
                        existingEntity.Refresh(entity, trackChanges: false);
                        existingEntity.AcceptChanges();
                    });
                }
                else if (EmployeeRoles.MergeOption == MergeOption.PreserveChanges)
                {
                    Invoke(delegate
                    {
                        existingEntity.Refresh(entity, trackChanges: false, preserveExistingChanges: true);
                    });
                }
            }

            #endregion

            return existingEntity;
        }

        private void OnDetach(EmployeeRole entity)
        {
            if (!ReferenceEquals(null, entity.Employees))
            {
                entity.Employees.CollectionChanged -= On_employeeRole_employees_collectionChanged;
            }

        }

        private void On_employeeRole_employees_collectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            var entity = sender as EmployeeRole;
            if (!ReferenceEquals(null, entity) && entity.IsChangeTrackingPrevented)
            {
                return;
            }

            if (!ReferenceEquals(null, e.NewItems))
            {
                foreach (Employee item in e.NewItems)
                {
                    Attach(item);
                }
            }
        }

        #endregion EmployeeRoles

        #endregion Entities

        #region Submit Changes

        protected override TableInheritanceDemoDBResultSet SubmitChanges(ClientInfo clientInfo)
        {
            // get reduced change set
            var changeSet = GetChangeSet();

            if (!changeSet.IsEmpty)
            {
                var service = _dataServiceFactory();
                try
                {
                    // submit data
                    var resultSet = service.SubmitChanges(clientInfo, changeSet);
                    return resultSet;
                }
                finally
                {
                    var client = service as ICommunicationObject;
                    if (client != null)
                    {
                        if (client.State == CommunicationState.Faulted)
                        {
                            client.Abort();
                        }
                        else
                        {
                            client.Close();
                        }
                    }
                }
            }
            else
            {
                // return empty result set
                return new TableInheritanceDemoDBResultSet(changeSet);
            }
        }

        private TableInheritanceDemoDBChangeSet GetChangeSet()
        {
            IEnumerable<Person> people;
            lock (_people.SyncRoot)
            {
                people = _people.GetAllEntities();
            }

            IEnumerable<Address> addresses;
            lock (_addresses.SyncRoot)
            {
                addresses = _addresses.GetAllEntities();
            }

            IEnumerable<Demographic> demographics;
            lock (_demographics.SyncRoot)
            {
                demographics = _demographics.GetAllEntities();
            }

            IEnumerable<EmployeeRole> employeeRoles;
            lock (_employeeRoles.SyncRoot)
            {
                employeeRoles = _employeeRoles.GetAllEntities();
            }

            // get reduced change set
            var changeSet = _changeSetFactoryProvider().CreateChangeSet(
                people, 
                addresses, 
                demographics, 
                employeeRoles);

            return changeSet;
        }

        protected override void Refresh(TableInheritanceDemoDBResultSet resultSet)
        {
            lock (_people.SyncRoot)
            {
                Refresh(_people, resultSet.People);
            }

            lock (_addresses.SyncRoot)
            {
                Refresh(_addresses, resultSet.Addresses);
            }

            lock (_demographics.SyncRoot)
            {
                Refresh(_demographics, resultSet.Demographics);
            }

            lock (_employeeRoles.SyncRoot)
            {
                Refresh(_employeeRoles, resultSet.EmployeeRoles);
            }

        }

        #endregion Submit Changes
    }
}
