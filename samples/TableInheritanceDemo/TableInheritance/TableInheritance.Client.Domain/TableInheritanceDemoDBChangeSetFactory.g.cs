//------------------------------------------------------------------------------
// <auto-generated>
//   This file was generated by T4 code generator Model2.tt.
//   Any changes made to this file manually may cause incorrect behavior
//   and will be lost next time the file is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using NTier.Client.Domain;
using TableInheritance.Common.Domain.Model.TableInheritanceDemoDB;

namespace TableInheritance.Client.Domain
{
    public partial class TableInheritanceDemoDBChangeSetFactory : ChangeSetFactory, ITableInheritanceDemoDBChangeSetFactory
    {
        public TableInheritanceDemoDBChangeSet CreateChangeSet(IEnumerable<Person> people, IEnumerable<Address> addresses, IEnumerable<Demographic> demographics, IEnumerable<EmployeeRole> employeeRoles)
        {
            // retrieve changes sets (modified entities)
            var personChangeSet = GetChangeSet(people);
            var addressChangeSet = GetChangeSet(addresses);
            var demographicChangeSet = GetChangeSet(demographics);
            var employeeRoleChangeSet = GetChangeSet(employeeRoles);

            // reduce entities (copy changed values)
            var peopleMap = ReduceToModifications(personChangeSet);
            var addressesMap = ReduceToModifications(addressChangeSet);
            var demographicsMap = ReduceToModifications(demographicChangeSet);
            var employeeRolesMap = ReduceToModifications(employeeRoleChangeSet);

            // fixup relations (replaces related entities with reduced entites)
            FixupRelations(
                CastToEntityTuple(peopleMap), 
                CastToEntityTuple(addressesMap), 
                CastToEntityTuple(demographicsMap), 
                CastToEntityTuple(employeeRolesMap)
            );

            var changeSet = new TableInheritanceDemoDBChangeSet();

            if (peopleMap.Count > 0) changeSet.People = peopleMap.Select(e => e.ReducedEntity).ToList();
            if (addressesMap.Count > 0) changeSet.Addresses = addressesMap.Select(e => e.ReducedEntity).ToList();
            if (demographicsMap.Count > 0) changeSet.Demographics = demographicsMap.Select(e => e.ReducedEntity).ToList();
            if (employeeRolesMap.Count > 0) changeSet.EmployeeRoles = employeeRolesMap.Select(e => e.ReducedEntity).ToList();

            return changeSet;
        }
    }
}
