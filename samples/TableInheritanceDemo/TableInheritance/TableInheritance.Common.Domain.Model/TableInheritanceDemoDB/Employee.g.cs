//------------------------------------------------------------------------------
// <auto-generated>
//   This file was generated by T4 code generator Model2.tt.
//   Any changes made to this file manually may cause incorrect behavior
//   and will be lost next time the file is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Globalization;
using System.Reflection;
using System.Runtime.Serialization;
using NTier.Common.Domain.Model;

namespace TableInheritance.Common.Domain.Model.TableInheritanceDemoDB
{
    [Serializable]
    [DataContract(IsReference = true)]
    [KnownType(typeof(Employee))]
    [KnownType(typeof(EmployeeRole))]
    public partial class Employee : Person, INotifyPropertyChanged, INotifyPropertyChanging, IDataErrorInfo
    {
        #region Constructor and Initialization

        // partial method for initialization
        partial void Initialize();

        public Employee()
        {
            Initialize();
        }

        #endregion Constructor and Initialization

        #region Simple Properties

        [DataMember]
        [Required]
#if !CLIENT_PROFILE
        [RoundtripOriginal]
#endif
        [SimpleProperty]
        public global::System.DateTime EntryDate
        {
            get { return _entryDate; }
            set
            {
                if (_entryDate != value)
                {
                    EntryDateChanging(value);
                    OnPropertyChanging("EntryDate", value);
                    var previousValue = _entryDate;
                    _entryDate = value;
                    OnPropertyChanged("EntryDate", previousValue, value);
                    EntryDateChanged(previousValue);
                }
            }
        }
        private global::System.DateTime _entryDate;

        partial void EntryDateChanging(global::System.DateTime newValue);
        partial void EntryDateChanged(global::System.DateTime previousValue);

        [DataMember]
#if !CLIENT_PROFILE
        [RoundtripOriginal]
#endif
        [ForeignKeyProperty]
        [SimpleProperty]
        public Nullable<global::System.Int64> ManagerId
        {
            get { return _managerId; }
            set
            {
                if (_managerId != value)
                {
                    ManagerIdChanging(value);
                    OnPropertyChanging("ManagerId", value);
                    if (!IsDeserializing)
                    {
                        if (Manager != null && Manager.Id != value)
                        {
                            Manager = null;
                        }
                    }
                    var previousValue = _managerId;
                    _managerId = value;
                    OnPropertyChanged("ManagerId", previousValue, value);
                    ManagerIdChanged(previousValue);
                }
            }
        }
        private Nullable<global::System.Int64> _managerId;

        partial void ManagerIdChanging(Nullable<global::System.Int64> newValue);
        partial void ManagerIdChanged(Nullable<global::System.Int64> previousValue);

        [DataMember]
#if !CLIENT_PROFILE
        [RoundtripOriginal]
#endif
        [ForeignKeyProperty]
        [SimpleProperty]
        public Nullable<global::System.Int64> RoleId
        {
            get { return _roleId; }
            set
            {
                if (_roleId != value)
                {
                    RoleIdChanging(value);
                    OnPropertyChanging("RoleId", value);
                    if (!IsDeserializing)
                    {
                        if (EmployeeRole != null && EmployeeRole.Id != value)
                        {
                            EmployeeRole = null;
                        }
                    }
                    var previousValue = _roleId;
                    _roleId = value;
                    OnPropertyChanged("RoleId", previousValue, value);
                    RoleIdChanged(previousValue);
                }
            }
        }
        private Nullable<global::System.Int64> _roleId;

        partial void RoleIdChanging(Nullable<global::System.Int64> newValue);
        partial void RoleIdChanged(Nullable<global::System.Int64> previousValue);

        #endregion Simple Properties

        #region Complex Properties

        #endregion Complex Properties

        #region Navigation Properties

        [DataMember]
        [NavigationProperty]
        public TrackableCollection<Employee> Employees
        {
            get
            {
                if (_employees == null)
                {
                    _employees = new TrackableCollection<Employee>();
                    _employees.CollectionChanged += FixupEmployees;
                }
                return _employees;
            }
            set
            {
                if (!ReferenceEquals(_employees, value))
                {
                    if (!IsDeserializing && ChangeTracker.IsChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }

                    if (_employees != null)
                    {
                       _employees.CollectionChanged -= FixupEmployees;
                    }

                    _employees = value;

                    if (_employees != null)
                    {
                        _employees.CollectionChanged += FixupEmployees;
                    }

                    OnPropertyChanged("Employees", trackInChangeTracker: false);
                }
            }
        }
        private TrackableCollection<Employee> _employees;

        [DataMember]
        [NavigationProperty]
        public Employee Manager
        {
            get { return _manager; }
            set
            {
                if (!ReferenceEquals(_manager, value))
                {
                    ManagerChanging(value);
                    OnPropertyChanging("Manager", value);
                    var previousValue = _manager;
                    _manager = value;
                    FixupManager(previousValue);
                    OnPropertyChanged("Manager", previousValue, value, isNavigationProperty: true);
                    ManagerChanged(previousValue);
                }
            }
        }
        private Employee _manager;

        partial void ManagerChanging(Employee newValue);
        partial void ManagerChanged(Employee previousValue);

        [DataMember]
        [NavigationProperty]
        public EmployeeRole EmployeeRole
        {
            get { return _employeeRole; }
            set
            {
                if (!ReferenceEquals(_employeeRole, value))
                {
                    EmployeeRoleChanging(value);
                    OnPropertyChanging("EmployeeRole", value);
                    var previousValue = _employeeRole;
                    _employeeRole = value;
                    FixupEmployeeRole(previousValue);
                    OnPropertyChanged("EmployeeRole", previousValue, value, isNavigationProperty: true);
                    EmployeeRoleChanged(previousValue);
                }
            }
        }
        private EmployeeRole _employeeRole;

        partial void EmployeeRoleChanging(EmployeeRole newValue);
        partial void EmployeeRoleChanged(EmployeeRole previousValue);

        #endregion Navigation Properties

        #region ChangeTracking

        protected override void ClearNavigationProperties()
        {
            base.ClearNavigationProperties();
            Employees.Clear();
            Manager = null;
            EmployeeRole = null;
        }

        #endregion ChangeTracking

        #region Association Fixup

        private void FixupManager(Employee previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }

            if (previousValue != null && previousValue.Employees.Contains(this))
            {
                previousValue.Employees.Remove(this);
            }

            if (Manager != null)
            {
                if (!Manager.Employees.Contains(this))
                {
                    Manager.Employees.Add(this);
                }

                ManagerId = Manager.Id;
            }
            else if (!skipKeys)
            {
                ManagerId = null;
            }

            if (ChangeTracker.IsChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Manager")
                    && ReferenceEquals(ChangeTracker.OriginalValues["Manager"], Manager))
                {
                    //ChangeTracker.OriginalValues.Remove("Manager");
                }
                else
                {
                    //RecordOriginalValue("Manager", previousValue);
                }
                if (Manager != null && !Manager.ChangeTracker.IsChangeTrackingEnabled)
                {
                    Manager.StartTracking();
                }
            }
        }

        private void FixupEmployeeRole(EmployeeRole previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }

            if (previousValue != null && previousValue.Employees.Contains(this))
            {
                previousValue.Employees.Remove(this);
            }

            if (EmployeeRole != null)
            {
                if (!EmployeeRole.Employees.Contains(this))
                {
                    EmployeeRole.Employees.Add(this);
                }

                RoleId = EmployeeRole.Id;
            }
            else if (!skipKeys)
            {
                RoleId = null;
            }

            if (ChangeTracker.IsChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("EmployeeRole")
                    && ReferenceEquals(ChangeTracker.OriginalValues["EmployeeRole"], EmployeeRole))
                {
                    //ChangeTracker.OriginalValues.Remove("EmployeeRole");
                }
                else
                {
                    //RecordOriginalValue("EmployeeRole", previousValue);
                }
                if (EmployeeRole != null && !EmployeeRole.ChangeTracker.IsChangeTrackingEnabled)
                {
                    EmployeeRole.StartTracking();
                }
            }
        }

        private void FixupEmployees(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }

            if (e.NewItems != null)
            {
                foreach (Employee item in e.NewItems)
                {
                    item.Manager = this;
                    if (ChangeTracker.IsChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.IsChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        RecordAdditionToCollectionProperties("Employees", item);
                    }
                }
            }

            if (e.OldItems != null)
            {
                foreach (Employee item in e.OldItems)
                {
                    if (ReferenceEquals(item.Manager, this))
                    {
                        item.Manager = null;
                    }
                    if (ChangeTracker.IsChangeTrackingEnabled)
                    {
                        RecordRemovalFromCollectionProperties("Employees", item);
                    }
                }
            }
        }

        #endregion Association Fixup
    }
}
