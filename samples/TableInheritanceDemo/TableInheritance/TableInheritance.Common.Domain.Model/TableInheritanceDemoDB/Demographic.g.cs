//------------------------------------------------------------------------------
// <auto-generated>
//   This file was generated by T4 code generator Model2.tt.
//   Any changes made to this file manually may cause incorrect behavior
//   and will be lost next time the file is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Globalization;
using System.Reflection;
using System.Runtime.Serialization;
using NTier.Common.Domain.Model;

namespace TableInheritance.Common.Domain.Model.TableInheritanceDemoDB
{
    [Serializable]
    [DataContract(IsReference = true)]
    [KnownType(typeof(Customer))]
    public partial class Demographic : Entity, INotifyPropertyChanged, INotifyPropertyChanging, IDataErrorInfo
    {
        #region Constructor and Initialization

        // partial method for initialization
        partial void Initialize();

        public Demographic()
        {
            Initialize();
        }

        #endregion Constructor and Initialization

        #region Simple Properties

        [DataMember]
        [Key]
        [Required]
#if !CLIENT_PROFILE
        [RoundtripOriginal]
#endif
        [SimpleProperty]
        public global::System.Int64 Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (!IsDeserializing && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'Id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    IdChanging(value);
                    OnPropertyChanging("Id", value);
                    if (!IsDeserializing)
                    {
                        if (Customer != null && Customer.Id != value)
                        {
                            Customer = null;
                        }
                    }
                    var previousValue = _id;
                    _id = value;
                    OnPropertyChanged("Id", previousValue, value);
                    IdChanged(previousValue);
                }
            }
        }
        private global::System.Int64 _id;

        partial void IdChanging(global::System.Int64 newValue);
        partial void IdChanged(global::System.Int64 previousValue);

        [DataMember]
        [Required]
#if !CLIENT_PROFILE
        [RoundtripOriginal]
#endif
        [SimpleProperty]
        public global::System.String Key
        {
            get { return _key; }
            set
            {
                if (_key != value)
                {
                    KeyChanging(value);
                    OnPropertyChanging("Key", value);
                    var previousValue = _key;
                    _key = value;
                    OnPropertyChanged("Key", previousValue, value);
                    KeyChanged(previousValue);
                }
            }
        }
        private global::System.String _key;

        partial void KeyChanging(global::System.String newValue);
        partial void KeyChanged(global::System.String previousValue);

        [DataMember]
#if !CLIENT_PROFILE
        [RoundtripOriginal]
#endif
        [SimpleProperty]
        public global::System.String Value
        {
            get { return _value; }
            set
            {
                if (_value != value)
                {
                    ValueChanging(value);
                    OnPropertyChanging("Value", value);
                    var previousValue = _value;
                    _value = value;
                    OnPropertyChanged("Value", previousValue, value);
                    ValueChanged(previousValue);
                }
            }
        }
        private global::System.String _value;

        partial void ValueChanging(global::System.String newValue);
        partial void ValueChanged(global::System.String previousValue);

        #endregion Simple Properties

        #region Complex Properties

        #endregion Complex Properties

        #region Navigation Properties

        [DataMember]
        [NavigationProperty]
        public Customer Customer
        {
            get { return _customer; }
            set
            {
                if (!ReferenceEquals(_customer, value))
                {
                    CustomerChanging(value);
                    OnPropertyChanging("Customer", value);
                    if (ChangeTracker.IsChangeTrackingEnabled && value != null)
                    {
                        // This the dependent end of an identifying relationship, so the principal end cannot be changed if it is already set,
                        // otherwise it can only be set to an entity with a primary key that is the same value as the dependent's foreign key.
                        if (Id != value.Id)
                        {
                            throw new InvalidOperationException("The principal end of an identifying relationship can only be changed when the dependent end is in the Added state.");
                        }
                    }
                    var previousValue = _customer;
                    _customer = value;
                    FixupCustomer(previousValue);
                    OnPropertyChanged("Customer", previousValue, value, isNavigationProperty: true);
                    CustomerChanged(previousValue);
                }
            }
        }
        private Customer _customer;

        partial void CustomerChanging(Customer newValue);
        partial void CustomerChanged(Customer previousValue);

        [DataMember]
        [NavigationProperty]
        public TrackableCollection<Customer> Customers
        {
            get
            {
                if (_customers == null)
                {
                    _customers = new TrackableCollection<Customer>();
                    _customers.CollectionChanged += FixupCustomers;
                }
                return _customers;
            }
            set
            {
                if (!ReferenceEquals(_customers, value))
                {
                    if (!IsDeserializing && ChangeTracker.IsChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }

                    if (_customers != null)
                    {
                       _customers.CollectionChanged -= FixupCustomers;
                    }

                    _customers = value;

                    if (_customers != null)
                    {
                        _customers.CollectionChanged += FixupCustomers;
                    }

                    OnPropertyChanged("Customers", trackInChangeTracker: false);
                }
            }
        }
        private TrackableCollection<Customer> _customers;

        #endregion Navigation Properties

        #region ChangeTracking

        protected override void ClearNavigationProperties()
        {
            Customer = null;
            Customers.Clear();
        }

        #endregion ChangeTracking

        #region Association Fixup

        private void FixupCustomer(Customer previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }

            if (previousValue != null && ReferenceEquals(previousValue.Demographic, this))
            {
                previousValue.Demographic = null;
            }

            if (Customer != null)
            {
                Customer.Demographic = this;
                Id = Customer.Id;
            }

            if (ChangeTracker.IsChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Customer")
                    && ReferenceEquals(ChangeTracker.OriginalValues["Customer"], Customer))
                {
                    //ChangeTracker.OriginalValues.Remove("Customer");
                }
                else
                {
                    //RecordOriginalValue("Customer", previousValue);
                }
                if (Customer != null && !Customer.ChangeTracker.IsChangeTrackingEnabled)
                {
                    Customer.StartTracking();
                }
            }
        }

        private void FixupCustomers(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }

            if (e.NewItems != null)
            {
                foreach (Customer item in e.NewItems)
                {
                    if (!item.Demographics.Contains(this))
                    {
                        item.Demographics.Add(this);
                    }
                    if (ChangeTracker.IsChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.IsChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        RecordAdditionToCollectionProperties("Customers", item);
                    }
                }
            }

            if (e.OldItems != null)
            {
                foreach (Customer item in e.OldItems)
                {
                    if (item.Demographics.Contains(this))
                    {
                        item.Demographics.Remove(this);
                    }
                    if (ChangeTracker.IsChangeTrackingEnabled)
                    {
                        RecordRemovalFromCollectionProperties("Customers", item);
                    }
                }
            }
        }

        #endregion Association Fixup

        protected override bool IsKeyEqual(Entity other)
        {
            var entity = other as Demographic;
            if (ReferenceEquals(null, entity)) return false;
            return this.Id == entity.Id;
        }

        protected override int GetKeyHashCode()
        {
            return this.Id.GetHashCode();
        }
    }
}
