//------------------------------------------------------------------------------
// <auto-generated>
//   This file was generated by T4 code generator Model2.tt.
//   Any changes made to this file manually may cause incorrect behavior
//   and will be lost next time the file is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Globalization;
using System.Reflection;
using System.Runtime.Serialization;
using NTier.Common.Domain.Model;

namespace TableInheritance.Common.Domain.Model.TableInheritanceDemoDB
{
    [Serializable]
    [DataContract(IsReference = true)]
    [KnownType(typeof(Employee))]
    public partial class EmployeeRole : Entity, INotifyPropertyChanged, INotifyPropertyChanging, IDataErrorInfo
    {
        #region Constructor and Initialization

        // partial method for initialization
        partial void Initialize();

        public EmployeeRole()
        {
            Initialize();
        }

        #endregion Constructor and Initialization

        #region Simple Properties

        [DataMember]
        [Key]
        [Required]
#if !CLIENT_PROFILE
        [RoundtripOriginal]
#endif
        [SimpleProperty]
        public global::System.Int64 Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (!IsDeserializing && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'Id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    IdChanging(value);
                    OnPropertyChanging("Id", value);
                    var previousValue = _id;
                    _id = value;
                    OnPropertyChanged("Id", previousValue, value);
                    IdChanged(previousValue);
                }
            }
        }
        private global::System.Int64 _id;

        partial void IdChanging(global::System.Int64 newValue);
        partial void IdChanged(global::System.Int64 previousValue);

        [DataMember]
        [Required]
#if !CLIENT_PROFILE
        [RoundtripOriginal]
#endif
        [SimpleProperty]
        public global::System.String Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    NameChanging(value);
                    OnPropertyChanging("Name", value);
                    var previousValue = _name;
                    _name = value;
                    OnPropertyChanged("Name", previousValue, value);
                    NameChanged(previousValue);
                }
            }
        }
        private global::System.String _name;

        partial void NameChanging(global::System.String newValue);
        partial void NameChanged(global::System.String previousValue);

        [DataMember]
#if !CLIENT_PROFILE
        [RoundtripOriginal]
#endif
        [SimpleProperty]
        public global::System.String Description
        {
            get { return _description; }
            set
            {
                if (_description != value)
                {
                    DescriptionChanging(value);
                    OnPropertyChanging("Description", value);
                    var previousValue = _description;
                    _description = value;
                    OnPropertyChanged("Description", previousValue, value);
                    DescriptionChanged(previousValue);
                }
            }
        }
        private global::System.String _description;

        partial void DescriptionChanging(global::System.String newValue);
        partial void DescriptionChanged(global::System.String previousValue);

        #endregion Simple Properties

        #region Complex Properties

        #endregion Complex Properties

        #region Navigation Properties

        [DataMember]
        [NavigationProperty]
        public TrackableCollection<Employee> Employees
        {
            get
            {
                if (_employees == null)
                {
                    _employees = new TrackableCollection<Employee>();
                    _employees.CollectionChanged += FixupEmployees;
                }
                return _employees;
            }
            set
            {
                if (!ReferenceEquals(_employees, value))
                {
                    if (!IsDeserializing && ChangeTracker.IsChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }

                    if (_employees != null)
                    {
                       _employees.CollectionChanged -= FixupEmployees;
                    }

                    _employees = value;

                    if (_employees != null)
                    {
                        _employees.CollectionChanged += FixupEmployees;
                    }

                    OnPropertyChanged("Employees", trackInChangeTracker: false);
                }
            }
        }
        private TrackableCollection<Employee> _employees;

        #endregion Navigation Properties

        #region ChangeTracking

        protected override void ClearNavigationProperties()
        {
            Employees.Clear();
        }

        #endregion ChangeTracking

        #region Association Fixup

        private void FixupEmployees(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }

            if (e.NewItems != null)
            {
                foreach (Employee item in e.NewItems)
                {
                    item.EmployeeRole = this;
                    if (ChangeTracker.IsChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.IsChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        RecordAdditionToCollectionProperties("Employees", item);
                    }
                }
            }

            if (e.OldItems != null)
            {
                foreach (Employee item in e.OldItems)
                {
                    if (ReferenceEquals(item.EmployeeRole, this))
                    {
                        item.EmployeeRole = null;
                    }
                    if (ChangeTracker.IsChangeTrackingEnabled)
                    {
                        RecordRemovalFromCollectionProperties("Employees", item);
                    }
                }
            }
        }

        #endregion Association Fixup

        protected override bool IsKeyEqual(Entity other)
        {
            var entity = other as EmployeeRole;
            if (ReferenceEquals(null, entity)) return false;
            return this.Id == entity.Id;
        }

        protected override int GetKeyHashCode()
        {
            return this.Id.GetHashCode();
        }
    }
}
