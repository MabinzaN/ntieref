//------------------------------------------------------------------------------
// <auto-generated>
//   This file was generated by T4 code generator Model2.tt.
//   Any changes made to this file manually may cause incorrect behavior
//   and will be lost next time the file is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Globalization;
using System.Reflection;
using System.Runtime.Serialization;
using NTier.Common.Domain.Model;

namespace TableInheritance.Common.Domain.Model.TableInheritanceDemoDB
{
    [Serializable]
    [DataContract(IsReference = true)]
    [KnownType(typeof(Customer))]
    [KnownType(typeof(Person))]
    public partial class Address : Entity, INotifyPropertyChanged, INotifyPropertyChanging, IDataErrorInfo
    {
        #region Constructor and Initialization

        // partial method for initialization
        partial void Initialize();

        public Address()
        {
            Initialize();
        }

        #endregion Constructor and Initialization

        #region Simple Properties

        [DataMember]
        [Key]
        [Required]
#if !CLIENT_PROFILE
        [RoundtripOriginal]
#endif
        [ServerGeneration(ServerGenerationTypes.Insert)]
        [SimpleProperty]
        public global::System.Int64 Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (!IsDeserializing && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'Id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    IdChanging(value);
                    OnPropertyChanging("Id", value);
                    var previousValue = _id;
                    _id = value;
                    OnPropertyChanged("Id", previousValue, value);
                    IdChanged(previousValue);
                }
            }
        }
        private global::System.Int64 _id;

        partial void IdChanging(global::System.Int64 newValue);
        partial void IdChanged(global::System.Int64 previousValue);

        [DataMember]
#if !CLIENT_PROFILE
        [RoundtripOriginal]
#endif
        [SimpleProperty]
        public global::System.String Street
        {
            get { return _street; }
            set
            {
                if (_street != value)
                {
                    StreetChanging(value);
                    OnPropertyChanging("Street", value);
                    var previousValue = _street;
                    _street = value;
                    OnPropertyChanged("Street", previousValue, value);
                    StreetChanged(previousValue);
                }
            }
        }
        private global::System.String _street;

        partial void StreetChanging(global::System.String newValue);
        partial void StreetChanged(global::System.String previousValue);

        [DataMember]
#if !CLIENT_PROFILE
        [RoundtripOriginal]
#endif
        [SimpleProperty]
        public global::System.String Zip
        {
            get { return _zip; }
            set
            {
                if (_zip != value)
                {
                    ZipChanging(value);
                    OnPropertyChanging("Zip", value);
                    var previousValue = _zip;
                    _zip = value;
                    OnPropertyChanged("Zip", previousValue, value);
                    ZipChanged(previousValue);
                }
            }
        }
        private global::System.String _zip;

        partial void ZipChanging(global::System.String newValue);
        partial void ZipChanged(global::System.String previousValue);

        [DataMember]
#if !CLIENT_PROFILE
        [RoundtripOriginal]
#endif
        [SimpleProperty]
        public global::System.String City
        {
            get { return _city; }
            set
            {
                if (_city != value)
                {
                    CityChanging(value);
                    OnPropertyChanging("City", value);
                    var previousValue = _city;
                    _city = value;
                    OnPropertyChanged("City", previousValue, value);
                    CityChanged(previousValue);
                }
            }
        }
        private global::System.String _city;

        partial void CityChanging(global::System.String newValue);
        partial void CityChanged(global::System.String previousValue);

        #endregion Simple Properties

        #region Complex Properties

        #endregion Complex Properties

        #region Navigation Properties

        [DataMember]
        [NavigationProperty]
        public TrackableCollection<Customer> Customers
        {
            get
            {
                if (_customers == null)
                {
                    _customers = new TrackableCollection<Customer>();
                    _customers.CollectionChanged += FixupCustomers;
                }
                return _customers;
            }
            set
            {
                if (!ReferenceEquals(_customers, value))
                {
                    if (!IsDeserializing && ChangeTracker.IsChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }

                    if (_customers != null)
                    {
                       _customers.CollectionChanged -= FixupCustomers;
                    }

                    _customers = value;

                    if (_customers != null)
                    {
                        _customers.CollectionChanged += FixupCustomers;
                    }

                    OnPropertyChanged("Customers", trackInChangeTracker: false);
                }
            }
        }
        private TrackableCollection<Customer> _customers;

        [DataMember]
        [NavigationProperty]
        public TrackableCollection<Person> People
        {
            get
            {
                if (_people == null)
                {
                    _people = new TrackableCollection<Person>();
                    _people.CollectionChanged += FixupPeople;
                }
                return _people;
            }
            set
            {
                if (!ReferenceEquals(_people, value))
                {
                    if (!IsDeserializing && ChangeTracker.IsChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }

                    if (_people != null)
                    {
                       _people.CollectionChanged -= FixupPeople;
                    }

                    _people = value;

                    if (_people != null)
                    {
                        _people.CollectionChanged += FixupPeople;
                    }

                    OnPropertyChanged("People", trackInChangeTracker: false);
                }
            }
        }
        private TrackableCollection<Person> _people;

        #endregion Navigation Properties

        #region ChangeTracking

        protected override void ClearNavigationProperties()
        {
            Customers.Clear();
            People.Clear();
        }

        #endregion ChangeTracking

        #region Association Fixup

        private void FixupCustomers(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }

            if (e.NewItems != null)
            {
                foreach (Customer item in e.NewItems)
                {
                    item.Address = this;
                    if (ChangeTracker.IsChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.IsChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        RecordAdditionToCollectionProperties("Customers", item);
                    }
                }
            }

            if (e.OldItems != null)
            {
                foreach (Customer item in e.OldItems)
                {
                    if (ReferenceEquals(item.Address, this))
                    {
                        item.Address = null;
                    }
                    if (ChangeTracker.IsChangeTrackingEnabled)
                    {
                        RecordRemovalFromCollectionProperties("Customers", item);
                    }
                }
            }
        }

        private void FixupPeople(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }

            if (e.NewItems != null)
            {
                foreach (Person item in e.NewItems)
                {
                    item.Address1 = this;
                    if (ChangeTracker.IsChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.IsChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        RecordAdditionToCollectionProperties("People", item);
                    }
                }
            }

            if (e.OldItems != null)
            {
                foreach (Person item in e.OldItems)
                {
                    if (ReferenceEquals(item.Address1, this))
                    {
                        item.Address1 = null;
                    }
                    if (ChangeTracker.IsChangeTrackingEnabled)
                    {
                        RecordRemovalFromCollectionProperties("People", item);
                    }
                }
            }
        }

        #endregion Association Fixup

        protected override bool IsKeyEqual(Entity other)
        {
            var entity = other as Address;
            if (ReferenceEquals(null, entity)) return false;
            return this.Id == entity.Id;
        }

        protected override int GetKeyHashCode()
        {
            return this.Id.GetHashCode();
        }
    }
}
