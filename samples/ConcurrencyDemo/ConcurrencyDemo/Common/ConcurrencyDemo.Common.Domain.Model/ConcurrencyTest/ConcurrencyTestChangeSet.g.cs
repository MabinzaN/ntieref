//------------------------------------------------------------------------------
// <auto-generated>
//   This file was generated by T4 code generator DemoModel.tt.
//   Any changes made to this file manually may cause incorrect behavior
//   and will be lost next time the file is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using NTier.Common.Domain.Model;

namespace ConcurrencyDemo.Common.Domain.Model.ConcurrencyTest
{
    [DataContract(IsReference = true)]
    public partial class ConcurrencyTestChangeSet : IChangeSet
    {
        public ConcurrencyTestChangeSet()
        {
        }

        protected ConcurrencyTestChangeSet(ConcurrencyTestChangeSet changeSet)
        {
            this.ARecords = changeSet.ARecords;
            this.BRecords = changeSet.BRecords;
            this.CRecords = changeSet.CRecords;
        }

        [DataMember]
        public List<ARecord> ARecords { get; set; }

        [DataMember]
        public List<BRecord> BRecords { get; set; }

        [DataMember]
        public List<CRecord> CRecords { get; set; }

        public bool IsEmpty
        {
            get
            {
                return (ReferenceEquals(null, ARecords) || ARecords.Count == 0)
                    && (ReferenceEquals(null, BRecords) || BRecords.Count == 0)
                    && (ReferenceEquals(null, CRecords) || CRecords.Count == 0);
            }
        }

        public IEnumerator<Entity> GetEnumerator()
        {
            if (ARecords != null && ARecords.Count > 0)
            {
                foreach (var item in ARecords)
                {
                    yield return item;
                }
            }

            if (BRecords != null && BRecords.Count > 0)
            {
                foreach (var item in BRecords)
                {
                    yield return item;
                }
            }

            if (CRecords != null && CRecords.Count > 0)
            {
                foreach (var item in CRecords)
                {
                    yield return item;
                }
            }

        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }
    }
}
