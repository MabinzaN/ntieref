//------------------------------------------------------------------------------
// <autogenerated>
//   This file was generated by T4 code generator ProductModel.tt.
//   Any changes made to this file manually may cause incorrect behavior
//   and will be lost next time the file is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Globalization;
using System.Reflection;
using System.Runtime.Serialization;
using NTier.Common.Domain.Model;

namespace ProductManager.Common.Domain.Model.ProductManager
{
    [DataContract(IsReference = true)]
    public sealed partial class ProductManagerResultSet : ProductManagerChangeSet, IResultSet
    {
        #region ctor
        public ProductManagerResultSet(ProductManagerChangeSet changeSet)
            : base(changeSet)
        {
        }
        #endregion

        #region DataMember

        [DataMember]
        public IList<Product> ProductConcurrencyConflicts { get; private set; }

        [DataMember]
        public IList<ProductCategory> ProductCategoryConcurrencyConflicts { get; private set; }

        #endregion

        #region AddConcurrencyConflicts

        public void AddConcurrencyConflicts(IEnumerable<Entity> entities)
        {
            foreach (var entity in entities)
            {
                if (entity is Product)
                {
                    AddConcurrencyConflict((Product)entity);
                }
                else if (entity is ProductCategory)
                {
                    AddConcurrencyConflict((ProductCategory)entity);
                }
                else
                {
                    throw new Exception(string.Format("Unknown type {0}", entity.GetType().Name));
                }
            }
        }

        private void AddConcurrencyConflict(Product entity)
        {
            if (ProductConcurrencyConflicts == null)
            {
                ProductConcurrencyConflicts = new List<Product>();
            }
            ProductConcurrencyConflicts.Add(entity);
        }

        private void AddConcurrencyConflict(ProductCategory entity)
        {
            if (ProductCategoryConcurrencyConflicts == null)
            {
                ProductCategoryConcurrencyConflicts = new List<ProductCategory>();
            }
            ProductCategoryConcurrencyConflicts.Add(entity);
        }

        #endregion

        #region IsConcurrencyConflict

        public bool IsConcurrencyConflict(Product e)
        {
            return ProductConcurrencyConflicts != null && ProductConcurrencyConflicts.Count > 0 && ProductConcurrencyConflicts.Contains(e);
        }

        public bool IsConcurrencyConflict(ProductCategory e)
        {
            return ProductCategoryConcurrencyConflicts != null && ProductCategoryConcurrencyConflicts.Count > 0 && ProductCategoryConcurrencyConflicts.Contains(e);
        }

        #endregion

        #region HasConcurrencyConflicts
        public bool HasConcurrencyConflicts
        {
            get
            {
                return ProductConcurrencyConflicts != null ||
                    ProductCategoryConcurrencyConflicts != null;
            }
        }
        #endregion
    }
}
