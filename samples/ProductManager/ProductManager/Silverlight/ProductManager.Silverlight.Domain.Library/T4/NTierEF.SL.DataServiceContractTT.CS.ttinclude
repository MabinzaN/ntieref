<#+
// <copyright file="NTierEF.SL.DataServiceContractTT.CS.ttinclude" company="Trivadis">
//     Copyright © Trivadis. All Rights Reserved.
// </copyright>
public class DataServiceContractTemplate : Template
{
    public GenerationUtils GenerationUtils = null;
    public string Namespace = string.Empty;
    public string ModelNamespace { get; set; }
    public string ModelBaseNamespace { get; set; }
    private string file = null;
    public string File
    {
        get { return file != null ? file : string.Format(@"Common{1}Domain{1}Service{1}Contracts{1}I{0}DataService.g.cs", GenerationUtils.ModelName, System.IO.Path.DirectorySeparatorChar); }
        set { file = value; }
    }

    public DataServiceContractTemplate(GenerationUtils generationUtils = null, string defaultNameSpace = null, string modelNamespace = null)
    {
        this.GenerationUtils = generationUtils;
        this.Namespace = defaultNameSpace;
        this.ModelNamespace = modelNamespace;
        this.ModelBaseNamespace = "NTier.Common.Domain.Model";
    }

    /// <summary>
    /// Directs output of the template to a separate file by default. User can override
    /// default behavior by assigning <see cref="Rendering"/> event handler.
    /// </summary>
    protected override void OnRendering(System.EventArgs e)
    {
        if (GenerationUtils == null)
        {
            throw new Exception("Missing property GenerationUtils");
        }
        if (string.IsNullOrWhiteSpace(Namespace))
        {
            throw new Exception("Missing property Namespace");
        }
        if (string.IsNullOrWhiteSpace(ModelNamespace))
        {
            throw new Exception("Missing property ModelNamespace");
        }
        if (string.IsNullOrWhiteSpace(ModelBaseNamespace))
        {
            throw new Exception("Missing property ModelBaseNamespace");
        }

        this.Output.File = this.File;
        base.OnRendering(e);
    }

    public override string TransformText()
    {
        WriteHeader(ModelBaseNamespace, ModelNamespace + "." + GenerationUtils.ModelName);
#>
namespace <#=Namespace#>.Contracts
{
    [ServiceContract]
    public partial interface I<#=GenerationUtils.ModelName#>DataService
    {
<#+
    foreach (EntitySet entitySet in GenerationUtils.Container.BaseEntitySets.OfType<EntitySet>())
    {
        // skip entities which are marked as non-root
        var isAggregateRoot = !entitySet.ElementType.MetadataProperties.Any(p => p.Name.EndsWith("AggregateRoot") && !bool.Parse(p.Value as string));
        if (!isAggregateRoot) continue;
#>
        [OperationContractAttribute(AsyncPattern = true)]
        IAsyncResult BeginGet<#=GenerationUtils.Code.Escape(entitySet)#>(ClientInfo clientInfo, Query query, AsyncCallback callback, object asyncState);
        QueryResult<<#=GenerationUtils.Code.Escape(entitySet.ElementType)#>> EndGet<#=GenerationUtils.Code.Escape(entitySet)#>(IAsyncResult result);

<#+
    }
#>

        [OperationContractAttribute(AsyncPattern = true)]
        IAsyncResult BeginSubmitChanges(ClientInfo clientInfo, <#=GenerationUtils.ModelName#>ChangeSet changeSet, AsyncCallback callback, object asyncState);
        <#=GenerationUtils.ModelName#>ResultSet EndSubmitChanges(IAsyncResult result);
    }
}
<#+
        return this.GenerationEnvironment.ToString();
    }


    private void WriteHeader(params string[] extraUsings)
    {
#>
//------------------------------------------------------------------------------
// <autogenerated>
//   This file was generated by T4 code generator <#= System.IO.Path.GetFileName(T4Context.Host.TemplateFile) #>.
//   Any changes made to this file manually may cause incorrect behavior
//   and will be lost next time the file is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.ServiceModel;
using System.Text;
<#=String.Join(String.Empty, extraUsings.OrderBy(u => u).Select(u => "using " + u + ";" + Environment.NewLine).ToArray())#>
<#+
    }
}
#>
