//------------------------------------------------------------------------------
// <autogenerated>
//   This file was generated by T4 code generator ProductModel.tt.
//   Any changes made to this file manually may cause incorrect behavior
//   and will be lost next time the file is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Globalization;
using System.Reflection;
using System.Runtime.Serialization;
using NTier.Common.Domain.Model;

namespace ProductManager.Common.Domain.Model.ProductManager
{
    [DataContract(IsReference = true)]
    public partial class ProductManagerChangeSet : IChangeSet
    {
        #region Constructor

        public ProductManagerChangeSet(IEnumerable<Product> products, IEnumerable<ProductCategory> productCategories)
        {
            // retrieve changes sets (modified entities)
            var productChangeSet = products.GetChangeSet();
            var productCategoryChangeSet = productCategories.GetChangeSet();

            // reduce entities (copy changed values)
            var productsMap = productChangeSet.ReduceToModifications();
            var productCategoriesMap = productCategoryChangeSet.ReduceToModifications();

            // fixup relations (replaces related entities with reduced entites)
            this.FixupRelations(
                this.Union(productsMap.CastToEntityTuple(), productCategoriesMap.CastToEntityTuple()),
                this.Union(productChangeSet.Cast<Entity>(), productCategoryChangeSet.Cast<Entity>())
            );
            if (productsMap.Count > 0) this.Products = productsMap.Select(e => e.Item2).ToList();
            if (productCategoriesMap.Count > 0) this.ProductCategories = productCategoriesMap.Select(e => e.Item2).ToList();
        }

        protected ProductManagerChangeSet(ProductManagerChangeSet changeSet)
        {
            this.Products = changeSet.Products;
            this.ProductCategories = changeSet.ProductCategories;
        }

        #endregion Constructor

        #region DataMember

        [DataMember]
        public List<Product> Products { get; /*private (must be public in silverlight)*/ set; }

        [DataMember]
        public List<ProductCategory> ProductCategories { get; /*private (must be public in silverlight)*/ set; }


        #endregion DataMember

        #region IsEmpty

        public bool IsEmpty
        {
            get
            {
                return Products == null &&
                    ProductCategories == null;
            }
        }

        #endregion IsEmpty

        #region IEnumerable

        public IEnumerator<Entity> GetEnumerator()
        {
            if (Products != null && Products.Count > 0)
            {
                foreach (var item in Products)
                {
                    yield return item;
                }
            }

            if (ProductCategories != null && ProductCategories.Count > 0)
            {
                foreach (var item in ProductCategories)
                {
                    yield return item;
                }
            }

        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        #endregion IEnumerable
    }
}
