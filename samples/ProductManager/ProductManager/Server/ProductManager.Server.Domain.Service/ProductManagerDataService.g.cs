//------------------------------------------------------------------------------
// <autogenerated>
//   This file was generated by T4 code generator ProductModel.tt.
//   Any changes made to this file manually may cause incorrect behavior
//   and will be lost next time the file is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Objects;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Security.Permissions;
using System.ServiceModel;
using System.ServiceModel.Activation;
using System.Transactions;
using NTier.Common.Domain.Model;
using NTier.Server.Domain.Repositories;
using NTier.Server.Domain.Service;
using ProductManager.Common.Domain.Model.ProductManager;
using ProductManager.Common.Domain.Service.Contracts;
using ProductManager.Server.Domain.Repositories;


namespace ProductManager.Server.Domain.Service
{
    public partial class ProductManagerDataService : DataService<IProductManagerRepository>, IProductManagerDataService
    {
        #region repository factory

        partial void CreateRepository(ClientInfo clientInfo, ref IProductManagerRepository repository);

        /// <summary>
        /// Creates a and returns a new instance of the repository
        /// </summary>
        /// <returns>A new instance of the repository</returns>
        protected override IProductManagerRepository CreateRepository(ClientInfo clientInfo)
        {
            IProductManagerRepository repository = null;

            CreateRepository(clientInfo, ref repository);

            return repository ?? new ProductManagerRepository();
        }

        #endregion repository factory

        #region query service methods

        partial void PreProcessing(ClientInfo clientInfo, ref Query query, IProductManagerRepository repository);
        partial void PostProcessing(ClientInfo clientInfo, Query query, ref QueryResult<Product> result, IProductManagerRepository repository);
        partial void PostProcessing(ClientInfo clientInfo, Query query, ref QueryResult<ProductCategory> result, IProductManagerRepository repository);

        [OperationBehavior(Impersonation = ImpersonationOption.Allowed)]
        public QueryResult<Product> GetProducts(ClientInfo clientInfo, Query query)
        {
            using (var dataRepository = CreateRepository(clientInfo))
            {
                PreProcessing(clientInfo, ref query, dataRepository);
                var result = Get(dataRepository.Products, query, clientInfo);
                PostProcessing(clientInfo, query, ref result, dataRepository);
                return result;
            }
        }

        [OperationBehavior(Impersonation = ImpersonationOption.Allowed)]
        public QueryResult<ProductCategory> GetProductCategories(ClientInfo clientInfo, Query query)
        {
            using (var dataRepository = CreateRepository(clientInfo))
            {
                PreProcessing(clientInfo, ref query, dataRepository);
                var result = Get(dataRepository.ProductCategories, query, clientInfo);
                PostProcessing(clientInfo, query, ref result, dataRepository);
                return result;
            }
        }

        #endregion query service methods

        #region update service method

        partial void PreProcessing(ClientInfo clientInfo, ref ProductManagerChangeSet changeSet, IProductManagerRepository repository);
        partial void BeforeSaving(ClientInfo clientInfo, ref ProductManagerChangeSet changeSet, IProductManagerRepository repository);
        partial void PostProcessing(ClientInfo clientInfo, ref ProductManagerResultSet result, IProductManagerRepository repository);

        [OperationBehavior(TransactionScopeRequired = true, Impersonation = ImpersonationOption.Allowed)]
        public ProductManagerResultSet SubmitChanges(ClientInfo clientInfo, ProductManagerChangeSet changeSet)
        {
            var resultSet = new ProductManagerResultSet(changeSet);
            using (var transactionScope = CreateSavingTransactionScope())
            {
                using (var dataRepository = CreateRepository(clientInfo))
                {
                    // optional custom processing
                    PreProcessing(clientInfo, ref changeSet, dataRepository);

                    // apply chnages to repository
                    ApplyChanges(dataRepository, dataRepository.Products, changeSet, changeSet.Products, clientInfo);
                    ApplyChanges(dataRepository, dataRepository.ProductCategories, changeSet, changeSet.ProductCategories, clientInfo);

                    // optional custom processing
                    BeforeSaving(clientInfo, ref changeSet, dataRepository);

                    // save changes
                    SaveChanges(dataRepository, changeSet, resultSet);

                    // optional custom processing
                    PostProcessing(clientInfo, ref resultSet, dataRepository);
                }
                transactionScope.Complete();
            }
            return resultSet;
        }

        #endregion update service method
    }
}

