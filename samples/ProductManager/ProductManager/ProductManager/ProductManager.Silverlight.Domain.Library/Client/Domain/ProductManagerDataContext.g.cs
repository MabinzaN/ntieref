//------------------------------------------------------------------------------
// <auto-generated>
//   This file was generated by T4 code generator ProductModel.tt.
//   Any changes made to this file manually may cause incorrect behavior
//   and will be lost next time the file is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Linq;
using System.ServiceModel;
using System.ServiceModel.Channels;
using NTier.Client.Domain;
using NTier.Common.Domain.Model;
using ProductManager.Common.Domain.Model.ProductManager;
using ProductManager.Common.Domain.Service.Contracts;

namespace ProductManager.Client.Domain
{
    public sealed partial class ProductManagerDataContext : DataContext<ProductManagerResultSet>, IProductManagerDataContext
    {
        #region Private Members

        private readonly ChannelFactory<IProductManagerDataService> ChannelFactory;

        private readonly Func<IProductManagerChangeSetFactory> _changeSetFactoryProvider;

        private readonly InternalEntitySet<Product> _products;
        private readonly InternalEntitySet<ProductCategory> _productCategories;
        private IEntitySet<Product> productEntitySet;
        private IEntitySet<ProductCategory> productCategoryEntitySet;

        #endregion Private Members

        #region Contructor

        partial void Initialize();

        private ProductManagerDataContext(Func<IProductManagerChangeSetFactory> changeSetFactoryProvider)
        {
            _changeSetFactoryProvider = changeSetFactoryProvider ?? (() => new ProductManagerChangeSetFactory());

            _products = CreateAndRegisterInternalEntitySet<Product>();
            _productCategories = CreateAndRegisterInternalEntitySet<ProductCategory>();
        }

        public ProductManagerDataContext(string endpointConfigurationName = "ProductManagerDataService", string relativeUri = null, Func<IProductManagerChangeSetFactory> changeSetFactoryProvider = null)
            : this(changeSetFactoryProvider)
        {
            this.ChannelFactory = new ChannelFactory<IProductManagerDataService>(endpointConfigurationName);

            if (!string.IsNullOrEmpty(relativeUri))
            {
                this.ChannelFactory.Endpoint.Address = new EndpointAddress(new Uri(System.Windows.Application.Current.Host.Source, relativeUri));
            }

            Initialize();
        }

        public ProductManagerDataContext(Binding binding, EndpointAddress remoteAddress, Func<IProductManagerChangeSetFactory> changeSetFactoryProvider = null)
            : this(changeSetFactoryProvider)
        {
            this.ChannelFactory = new ChannelFactory<IProductManagerDataService>(binding, remoteAddress);
            Initialize();
        }

        #endregion Contructor

        #region Entities

        #region Products

        public IEntitySet<Product> Products
        {
            get
            {
                if (ReferenceEquals(null, productEntitySet))
                {
                    productEntitySet = CreateEntitySet<Product>(_products, AttachWithRelations, OnDetach, GetProductsAsync);
                }

                return productEntitySet;
            }
        }

        public void Add(Product entity)
        {
            Products.Add(entity);
        }

        public void Delete(Product entity)
        {
            Products.Delete(entity);
        }

        public void Attach(Product entity)
        {
            Products.Attach(entity);
        }

        public void AttachAsModified(Product entity, Product original)
        {
            Products.AttachAsModified(entity, original);
        }

        public void Detach(Product entity)
        {
            Products.Detach(entity);
        }

        private void GetProductsAsync(ClientInfo clientInfo, Query query, Action<QueryResult<Product>, Exception> callback)
        {
            var service = ChannelFactory.CreateChannel();

            service.BeginGetProducts(
                clientInfo,
                query,
                delegate(IAsyncResult asyncResult)
                {
                    try
                    {
                        var result = service.EndGetProducts(asyncResult);
                        callback(result, null);
                    }
                    catch (Exception ex)
                    {
                        callback(null, ex);
                    }
                    finally
                    {
                        // http://omaralzabir.com/do-not-use-using-in-wcf-client/
                        var client = service as ICommunicationObject;
                        if (client != null)
                        {
                            if (client.State == CommunicationState.Faulted)
                            {
                                client.Abort();
                            }
                            else
                            {
                                client.Close();
                            }
                        }
                    }
                },
                null);
        }

        private Product AttachWithRelations(Product entity, InsertMode insertMode = InsertMode.Attach, MergeOption mergeOption = MergeOption.AppendOnly, List<object> referenceTrackingList = null)
        {
            #region iteration tracking

            if (ReferenceEquals(null, referenceTrackingList))
            {
                referenceTrackingList = new List<object>();
            }

            if (referenceTrackingList.Contains(entity))
            {
                return _products.GetExisting(entity);
            }
            else
            {
                referenceTrackingList.Add(entity);
            }

            #endregion

            #region add/attach entity

            Product existingEntity = null;

            switch (insertMode)
            {
                case InsertMode.Add:
                    existingEntity = _products.Add(entity);
                    break;
                case InsertMode.Attach:
                    existingEntity = _products.Attach(entity);
                    break;
                default:
                    throw new Exception(string.Format("Implementation Exception: missing action for {0}", insertMode));
            }

            if (!ReferenceEquals(null, existingEntity) && ReferenceEquals(existingEntity, entity))
            {
                return existingEntity;
            }

            #endregion

            #region attach relations recursively
            
            // register entity's property changed event if entity is new to context
            if (ReferenceEquals(null, existingEntity))
            {
                entity.PropertyChanged += On_product_propertyChanged;
            }

            // attach related entity to context
            if (!ReferenceEquals(null, entity.ProductCategory))
            {
                var existingRelatedEntity = AttachWithRelations(entity.ProductCategory, insertMode, mergeOption, referenceTrackingList);
            }

            #endregion

            #region refresh existing entity based on merge options

            if (!ReferenceEquals(null, existingEntity) && !ReferenceEquals(existingEntity, entity))
            {
                if (Products.MergeOption == MergeOption.OverwriteChanges)
                {
                    Invoke(delegate
                    {
                        existingEntity.Refresh(entity, trackChanges: false);
                        existingEntity.AcceptChanges();
                    });
                }
                else if (Products.MergeOption == MergeOption.PreserveChanges)
                {
                    Invoke(delegate
                    {
                        existingEntity.Refresh(entity, trackChanges: false, preserveExistingChanges: true);
                    });
                }
            }

            #endregion

            return existingEntity;
        }

        private void OnDetach(Product entity)
        {
            entity.PropertyChanged -= On_product_propertyChanged;

        }

        private void On_product_propertyChanged(object sender, PropertyChangedEventArgs e)
        {
            var entity = sender as Product;
            if (!ReferenceEquals(null, entity) && entity.IsChangeTrackingPrevented)
            {
                return;
            }

            if (e.PropertyName == "ProductCategory")
            {
                var relation = entity[e.PropertyName] as ProductCategory;
                if (!ReferenceEquals(null, relation))
                {
                    Attach(relation);
                }
            }
        }

        #endregion Products

        #region ProductCategories

        public IEntitySet<ProductCategory> ProductCategories
        {
            get
            {
                if (ReferenceEquals(null, productCategoryEntitySet))
                {
                    productCategoryEntitySet = CreateEntitySet<ProductCategory>(_productCategories, AttachWithRelations, OnDetach, GetProductCategoriesAsync);
                }

                return productCategoryEntitySet;
            }
        }

        public void Add(ProductCategory entity)
        {
            ProductCategories.Add(entity);
        }

        public void Delete(ProductCategory entity)
        {
            ProductCategories.Delete(entity);
        }

        public void Attach(ProductCategory entity)
        {
            ProductCategories.Attach(entity);
        }

        public void AttachAsModified(ProductCategory entity, ProductCategory original)
        {
            ProductCategories.AttachAsModified(entity, original);
        }

        public void Detach(ProductCategory entity)
        {
            ProductCategories.Detach(entity);
        }

        private void GetProductCategoriesAsync(ClientInfo clientInfo, Query query, Action<QueryResult<ProductCategory>, Exception> callback)
        {
            var service = ChannelFactory.CreateChannel();

            service.BeginGetProductCategories(
                clientInfo,
                query,
                delegate(IAsyncResult asyncResult)
                {
                    try
                    {
                        var result = service.EndGetProductCategories(asyncResult);
                        callback(result, null);
                    }
                    catch (Exception ex)
                    {
                        callback(null, ex);
                    }
                    finally
                    {
                        // http://omaralzabir.com/do-not-use-using-in-wcf-client/
                        var client = service as ICommunicationObject;
                        if (client != null)
                        {
                            if (client.State == CommunicationState.Faulted)
                            {
                                client.Abort();
                            }
                            else
                            {
                                client.Close();
                            }
                        }
                    }
                },
                null);
        }

        private ProductCategory AttachWithRelations(ProductCategory entity, InsertMode insertMode = InsertMode.Attach, MergeOption mergeOption = MergeOption.AppendOnly, List<object> referenceTrackingList = null)
        {
            #region iteration tracking

            if (ReferenceEquals(null, referenceTrackingList))
            {
                referenceTrackingList = new List<object>();
            }

            if (referenceTrackingList.Contains(entity))
            {
                return _productCategories.GetExisting(entity);
            }
            else
            {
                referenceTrackingList.Add(entity);
            }

            #endregion

            #region add/attach entity

            ProductCategory existingEntity = null;

            switch (insertMode)
            {
                case InsertMode.Add:
                    existingEntity = _productCategories.Add(entity);
                    break;
                case InsertMode.Attach:
                    existingEntity = _productCategories.Attach(entity);
                    break;
                default:
                    throw new Exception(string.Format("Implementation Exception: missing action for {0}", insertMode));
            }

            if (!ReferenceEquals(null, existingEntity) && ReferenceEquals(existingEntity, entity))
            {
                return existingEntity;
            }

            #endregion

            #region attach relations recursively
            
            // register entity's property changed event if entity is new to context
            if (ReferenceEquals(null, existingEntity))
            {
                entity.PropertyChanged += On_productCategory_propertyChanged;
            }

            if (!ReferenceEquals(null, entity.ChildCategories))
            {
                // register relation's collection changed event if entity is new to context
                if (ReferenceEquals(null, existingEntity))
                {
                    entity.ChildCategories.CollectionChanged += On_productCategory_childCategories_collectionChanged;
                }

                // attach related entities to context
                if (entity.ChildCategories.Count > 0)
                {
                    foreach (var item in entity.ChildCategories.ToArray())
                    {
                        var existingRelatedEntity = AttachWithRelations(item, insertMode, mergeOption, referenceTrackingList);

                        // update relation if entity is new to context or relation is new to entity
                        if (ReferenceEquals(null, existingEntity) || !existingEntity.ChildCategories.Contains(item))
                        {
                            if (!ReferenceEquals(null, existingRelatedEntity) && !ReferenceEquals(existingRelatedEntity, item))
                            {
                                // check merge options
                                if (!(mergeOption == MergeOption.PreserveChanges && existingRelatedEntity.ChangeTracker.OriginalValues.ContainsKey("ParentCategory")))
                                {
                                    using (entity.ChangeTrackingPrevention())
                                    {
                                        entity.ChildCategories.Replace(item, existingRelatedEntity);
                                    }

                                    using (existingRelatedEntity.ChangeTrackingPrevention())
                                    {
                                        existingRelatedEntity.ParentCategory = entity;
                                    }
                                }
                            }
                        }
                    }
                }
            }

            // attach related entity to context
            if (!ReferenceEquals(null, entity.ParentCategory))
            {
                var existingRelatedEntity = AttachWithRelations(entity.ParentCategory, insertMode, mergeOption, referenceTrackingList);

                // update relation if entity is new to context or relation is new to entity
                if (ReferenceEquals(null, existingEntity) || !entity.ParentCategory.Equals(existingEntity.ParentCategory))
                {
                    if (!ReferenceEquals(null, existingRelatedEntity) && !ReferenceEquals(existingRelatedEntity, entity.ParentCategory))
                    {
                        // check merge options
                        if (!(mergeOption == MergeOption.PreserveChanges && existingRelatedEntity.ChangeTracker.OriginalValues.ContainsKey("ChildCategories")))
                        {
                            using (entity.ChangeTrackingPrevention())
                            {
                                entity.ParentCategory = existingRelatedEntity;
                            }

                            using (existingRelatedEntity.ChangeTrackingPrevention())
                            {
                                var entityToReplace = existingRelatedEntity.ChildCategories.FirstOrDefault(e => e.Equals(entity));
                                if (!ReferenceEquals(null, entityToReplace))
                                {
                                    using (entityToReplace.ChangeTrackingPrevention())
                                    {
                                        existingRelatedEntity.ChildCategories.Remove(entityToReplace);
                                    }
                                }

                                existingRelatedEntity.ChildCategories.Add(entity);
                            }
                        }
                    }
                }
            }

            #endregion

            #region refresh existing entity based on merge options

            if (!ReferenceEquals(null, existingEntity) && !ReferenceEquals(existingEntity, entity))
            {
                if (ProductCategories.MergeOption == MergeOption.OverwriteChanges)
                {
                    Invoke(delegate
                    {
                        existingEntity.Refresh(entity, trackChanges: false);
                        existingEntity.AcceptChanges();
                    });
                }
                else if (ProductCategories.MergeOption == MergeOption.PreserveChanges)
                {
                    Invoke(delegate
                    {
                        existingEntity.Refresh(entity, trackChanges: false, preserveExistingChanges: true);
                    });
                }
            }

            #endregion

            return existingEntity;
        }

        private void OnDetach(ProductCategory entity)
        {
            entity.PropertyChanged -= On_productCategory_propertyChanged;

            if (!ReferenceEquals(null, entity.ChildCategories))
            {
                entity.ChildCategories.CollectionChanged -= On_productCategory_childCategories_collectionChanged;
            }

        }

        private void On_productCategory_propertyChanged(object sender, PropertyChangedEventArgs e)
        {
            var entity = sender as ProductCategory;
            if (!ReferenceEquals(null, entity) && entity.IsChangeTrackingPrevented)
            {
                return;
            }

            if (e.PropertyName == "ParentCategory")
            {
                var relation = entity[e.PropertyName] as ProductCategory;
                if (!ReferenceEquals(null, relation))
                {
                    Attach(relation);
                }
            }
        }

        private void On_productCategory_childCategories_collectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            var entity = sender as ProductCategory;
            if (!ReferenceEquals(null, entity) && entity.IsChangeTrackingPrevented)
            {
                return;
            }

            if (!ReferenceEquals(null, e.NewItems))
            {
                foreach (ProductCategory item in e.NewItems)
                {
                    Attach(item);
                }
            }
        }

        #endregion ProductCategories

        #endregion Entities

        #region Submit Changes

        protected override void SubmitChangesAsync(ClientInfo clientInfo, DataContext<ProductManagerResultSet>.SaveChangesCallback callback)
        {
            // get reduced change set
            var changeSet = GetChangeSet();

            if (!changeSet.IsEmpty)
            {
                var service = ChannelFactory.CreateChannel();

                service.BeginSubmitChanges(
                    clientInfo,
                    changeSet,
                    delegate(IAsyncResult asyncResult)
                    {
                        try
                        {
                            // submit data
                            var resultSet = service.EndSubmitChanges(asyncResult);
                            callback(resultSet);
                        }
                        catch (Exception e)
                        {
                            callback(null, e);
                        }
                        finally
                        {
                            // http://omaralzabir.com/do-not-use-using-in-wcf-client/
                            var client = service as ICommunicationObject;
                            if (client != null)
                            {
                                if (client.State == CommunicationState.Faulted)
                                {
                                    client.Abort();
                                }
                                else
                                {
                                    client.Close();
                                }
                            }
                        }
                    },
                    null);
            }
            else
            {
                // return empty result set
                callback(new ProductManagerResultSet(changeSet));
            }
        }

        private ProductManagerChangeSet GetChangeSet()
        {
            IEnumerable<Product> products;
            lock (_products.SyncRoot)
            {
                products = _products.GetAllEntities();
            }
            IEnumerable<ProductCategory> productCategories;
            lock (_productCategories.SyncRoot)
            {
                productCategories = _productCategories.GetAllEntities();
            }

            // get reduced change set
            var changeSet = _changeSetFactoryProvider().CreateChangeSet(
                products, 
                productCategories);

            return changeSet;
        }

        protected override void Refresh(ProductManagerResultSet resultSet)
        {
            lock (_products.SyncRoot)
            {
                Refresh(_products, resultSet.Products);
            }
            lock (_productCategories.SyncRoot)
            {
                Refresh(_productCategories, resultSet.ProductCategories);
            }
        }

        #endregion Submit Changes
    }
}
