//------------------------------------------------------------------------------
// <auto-generated>
//   This file was generated by T4 code generator ProductModel.tt.
//   Any changes made to this file manually may cause incorrect behavior
//   and will be lost next time the file is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Globalization;
using System.Reflection;
using System.Runtime.Serialization;
using NTier.Common.Domain.Model;

namespace ProductManager.Common.Domain.Model.ProductManager
{
    [Serializable]
    [DataContract(IsReference = true)]
    [KnownType(typeof(ProductCategory))]
    public partial class ProductCategory : Entity, INotifyPropertyChanged, INotifyPropertyChanging, IDataErrorInfo
    {
        #region Constructor and Initialization

        // partial method for initialization
        partial void Initialize();

        public ProductCategory()
        {
            Initialize();
        }

        #endregion Constructor and Initialization

        #region Simple Properties

        [DataMember]
        [Key]
        [Required]
#if !CLIENT_PROFILE
        [RoundtripOriginal]
#endif
        [ServerGeneration(ServerGenerationTypes.Insert)]
        [SimpleProperty]
        public global::System.Int32 ProductCategoryID
        {
            get { return _productCategoryID; }
            set
            {
                if (_productCategoryID != value)
                {
                    if (!IsDeserializing && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ProductCategoryID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    ProductCategoryIDChanging(value);
                    OnPropertyChanging("ProductCategoryID", value);
                    var previousValue = _productCategoryID;
                    _productCategoryID = value;
                    OnPropertyChanged("ProductCategoryID", previousValue, value);
                    ProductCategoryIDChanged(previousValue);
                }
            }
        }
        private global::System.Int32 _productCategoryID;

        partial void ProductCategoryIDChanging(global::System.Int32 newValue);
        partial void ProductCategoryIDChanged(global::System.Int32 previousValue);

        [DataMember]
#if !CLIENT_PROFILE
        [RoundtripOriginal]
#endif
        [ForeignKeyProperty]
        [SimpleProperty]
        public Nullable<global::System.Int32> ParentProductCategoryID
        {
            get { return _parentProductCategoryID; }
            set
            {
                if (_parentProductCategoryID != value)
                {
                    ParentProductCategoryIDChanging(value);
                    OnPropertyChanging("ParentProductCategoryID", value);
                    if (!IsDeserializing)
                    {
                        if (ParentCategory != null && ParentCategory.ProductCategoryID != value)
                        {
                            ParentCategory = null;
                        }
                    }
                    var previousValue = _parentProductCategoryID;
                    _parentProductCategoryID = value;
                    OnPropertyChanged("ParentProductCategoryID", previousValue, value);
                    ParentProductCategoryIDChanged(previousValue);
                }
            }
        }
        private Nullable<global::System.Int32> _parentProductCategoryID;

        partial void ParentProductCategoryIDChanging(Nullable<global::System.Int32> newValue);
        partial void ParentProductCategoryIDChanged(Nullable<global::System.Int32> previousValue);

        [DataMember]
        [Required]
#if !CLIENT_PROFILE
        [RoundtripOriginal]
#endif
        [SimpleProperty]
        public global::System.String Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    NameChanging(value);
                    OnPropertyChanging("Name", value);
                    var previousValue = _name;
                    _name = value;
                    OnPropertyChanged("Name", previousValue, value);
                    NameChanged(previousValue);
                }
            }
        }
        private global::System.String _name;

        partial void NameChanging(global::System.String newValue);
        partial void NameChanged(global::System.String previousValue);

        [DataMember]
        [Required]
#if !CLIENT_PROFILE
        [RoundtripOriginal]
#endif
        [SimpleProperty]
        public global::System.Guid rowguid
        {
            get { return _rowguid; }
            set
            {
                if (_rowguid != value)
                {
                    rowguidChanging(value);
                    OnPropertyChanging("rowguid", value);
                    var previousValue = _rowguid;
                    _rowguid = value;
                    OnPropertyChanged("rowguid", previousValue, value);
                    rowguidChanged(previousValue);
                }
            }
        }
        private global::System.Guid _rowguid;

        partial void rowguidChanging(global::System.Guid newValue);
        partial void rowguidChanged(global::System.Guid previousValue);

        [DataMember]
        [Required]
#if !CLIENT_PROFILE
        [RoundtripOriginal]
#endif
        [SimpleProperty]
        public global::System.DateTime ModifiedDate
        {
            get { return _modifiedDate; }
            set
            {
                if (_modifiedDate != value)
                {
                    ModifiedDateChanging(value);
                    OnPropertyChanging("ModifiedDate", value);
                    var previousValue = _modifiedDate;
                    _modifiedDate = value;
                    OnPropertyChanged("ModifiedDate", previousValue, value);
                    ModifiedDateChanged(previousValue);
                }
            }
        }
        private global::System.DateTime _modifiedDate;

        partial void ModifiedDateChanging(global::System.DateTime newValue);
        partial void ModifiedDateChanged(global::System.DateTime previousValue);

        #endregion Simple Properties

        #region Complex Properties

        #endregion Complex Properties

        #region Navigation Properties

        [DataMember]
        [NavigationProperty]
        public TrackableCollection<ProductCategory> ChildCategories
        {
            get
            {
                if (_childCategories == null)
                {
                    _childCategories = new TrackableCollection<ProductCategory>();
                    _childCategories.CollectionChanged += FixupChildCategories;
                }
                return _childCategories;
            }
            set
            {
                if (!ReferenceEquals(_childCategories, value))
                {
                    if (!IsDeserializing && ChangeTracker.IsChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }

                    if (_childCategories != null)
                    {
                       _childCategories.CollectionChanged -= FixupChildCategories;
                    }

                    _childCategories = value;

                    if (_childCategories != null)
                    {
                        _childCategories.CollectionChanged += FixupChildCategories;
                    }

                    OnPropertyChanged("ChildCategories", trackInChangeTracker: false);
                }
            }
        }
        private TrackableCollection<ProductCategory> _childCategories;

        [DataMember]
        [NavigationProperty]
        public ProductCategory ParentCategory
        {
            get { return _parentCategory; }
            set
            {
                if (!ReferenceEquals(_parentCategory, value))
                {
                    ParentCategoryChanging(value);
                    OnPropertyChanging("ParentCategory", value);
                    var previousValue = _parentCategory;
                    _parentCategory = value;
                    FixupParentCategory(previousValue);
                    OnPropertyChanged("ParentCategory", previousValue, value, isNavigationProperty: true);
                    ParentCategoryChanged(previousValue);
                }
            }
        }
        private ProductCategory _parentCategory;

        partial void ParentCategoryChanging(ProductCategory newValue);
        partial void ParentCategoryChanged(ProductCategory previousValue);

        #endregion Navigation Properties

        #region ChangeTracking

        protected override void ClearNavigationProperties()
        {
            ChildCategories.Clear();
            ParentCategory = null;
        }

        #endregion ChangeTracking

        #region Association Fixup

        private void FixupParentCategory(ProductCategory previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }

            if (previousValue != null && previousValue.ChildCategories.Contains(this))
            {
                previousValue.ChildCategories.Remove(this);
            }

            if (ParentCategory != null)
            {
                if (!ParentCategory.ChildCategories.Contains(this))
                {
                    ParentCategory.ChildCategories.Add(this);
                }

                ParentProductCategoryID = ParentCategory.ProductCategoryID;
            }
            else if (!skipKeys)
            {
                ParentProductCategoryID = null;
            }

            if (ChangeTracker.IsChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ParentCategory")
                    && ReferenceEquals(ChangeTracker.OriginalValues["ParentCategory"], ParentCategory))
                {
                    //ChangeTracker.OriginalValues.Remove("ParentCategory");
                }
                else
                {
                    //RecordOriginalValue("ParentCategory", previousValue);
                }
                if (ParentCategory != null && !ParentCategory.ChangeTracker.IsChangeTrackingEnabled)
                {
                    ParentCategory.StartTracking();
                }
            }
        }

        private void FixupChildCategories(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }

            if (e.NewItems != null)
            {
                foreach (ProductCategory item in e.NewItems)
                {
                    item.ParentCategory = this;
                    if (ChangeTracker.IsChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.IsChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        RecordAdditionToCollectionProperties("ChildCategories", item);
                    }
                }
            }

            if (e.OldItems != null)
            {
                foreach (ProductCategory item in e.OldItems)
                {
                    if (ReferenceEquals(item.ParentCategory, this))
                    {
                        item.ParentCategory = null;
                    }
                    if (ChangeTracker.IsChangeTrackingEnabled)
                    {
                        RecordRemovalFromCollectionProperties("ChildCategories", item);
                    }
                }
            }
        }

        #endregion Association Fixup

        protected override bool IsKeyEqual(Entity other)
        {
            var entity = other as ProductCategory;
            if (ReferenceEquals(null, entity)) return false;
            return this.ProductCategoryID == entity.ProductCategoryID;
        }

        protected override int GetKeyHashCode()
        {
            return this.ProductCategoryID.GetHashCode();
        }
    }
}
