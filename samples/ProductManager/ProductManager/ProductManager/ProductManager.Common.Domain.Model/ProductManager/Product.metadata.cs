//------------------------------------------------------------------------------
// <autogenerated>
//   This file was originally generated by T4 code generator ProductModel.tt. 
//   This file is meant to be edited manually and modifications do not get lost on regeneration. 
//   In case you want this file to be deleted or regenerated you have to remove (e.g. delete or rename) the existing version manually.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using NTier.Common.Domain.Model;

namespace ProductManager.Common.Domain.Model.ProductManager
{
    [MetadataType(typeof(ProductMetadata))]
    public partial class Product
    {
    }
    
    // This class allows you to attach custom attributes to properties of the Product class.
    //
    // For example, the following marks the Xyz property as a
    // required property and specifies the format for valid values:
    //    [Required]
    //    [RegularExpression("[A-Z][A-Za-z0-9]*")]
    //    [StringLength(32)]
    //    string Xyz;
    public sealed class ProductMetadata
    {
        // this class is not meant to be instantiated by client code
        private ProductMetadata() { }
        
#pragma warning disable 0169

        [Range(0, int.MaxValue)]
        public int ProductID;

        [StringLength(50)]
        public string Name;

        [StringLength(25)]
        public string ProductNumber;

        [RegularExpression("Black|Blue|Grey|Red|Silver|White|Yellow|Green|Multi", ErrorMessage = "Allowed colors are Black, Blue, Green, Grey, Red, Silver, Yellow, and White")]
        public string Color;

        [Range(0, 1000000000)]
        public decimal StandardCost;

        [Range(0, 1000000000)]
        public decimal ListPrice;

        [StringLength(5)]
        public string Size;

        [Range(0.01, 999999.99)]
        public Nullable<decimal> Weight;

        [Display(AutoGenerateField = false)]
        public Nullable<int> ProductCategoryID;

        //[Range(typeof(DateTime), "1753-01-01 00:00:00", "9999-12-31 23:59:59.997")]
        [CustomValidation(typeof(ProductMetadata), "CheckDateTimeRange", ErrorMessage = "Date must be between 1753-01-01 and 9999-12-31")]
        public System.DateTime SellStartDate;

        [CustomValidation(typeof(ProductMetadata), "CheckDateTimeRange", ErrorMessage = "Date must be between 1753-01-01 and 9999-12-31")]
        [CustomValidation(typeof(ProductMetadata), "CheckSellEndDate", ErrorMessage = "Sell end date must be after sell start date")]
        public Nullable<System.DateTime> SellEndDate;

        [CustomValidation(typeof(ProductMetadata), "CheckDateTimeRange", ErrorMessage = "Date must be between 1753-01-01 and 9999-12-31")]
        public Nullable<System.DateTime> DiscontinuedDate;

        [Display(AutoGenerateField = false)]
        [ServerGeneration(ServerGenerationTypes.Insert)]
        public System.Guid rowguid;

        [Display(AutoGenerateField = false)]
        [ServerGeneration(ServerGenerationTypes.Insert | ServerGenerationTypes.Update)]
        public System.DateTime ModifiedDate;


        [Display(AutoGenerateField = false)]
        public ProductCategory ProductCategory;

        [Display(AutoGenerateField = false)]
        private string DynamicContent;

#pragma warning restore 0169

        #region Custom validation methods

        private static readonly DateTime MinValidDate = new DateTime(1753, 01, 01);
        private static readonly DateTime MaxValidDate = new DateTime(9999, 12, 31, 23, 59, 59, 997);
        public static ValidationResult CheckDateTimeRange(DateTime? value)
        {
            if (!value.HasValue || (value >= MinValidDate && value <= MaxValidDate))
            {
                return ValidationResult.Success;
            }

            return new ValidationResult(null);
        }

        public static ValidationResult CheckSellEndDate(DateTime? sellEndDate, ValidationContext validationContext)
        {
            // context sometimes happens to be null
            if (validationContext == null)
            {
                return ValidationResult.Success;
            }

            var sellStartDate = ((Product)validationContext.ObjectInstance).SellStartDate;
            if (!sellEndDate.HasValue || sellEndDate >= sellStartDate)
            {
                return ValidationResult.Success;
            }

            return new ValidationResult(null);
        }

        #endregion Custom validation methods
    }
}
