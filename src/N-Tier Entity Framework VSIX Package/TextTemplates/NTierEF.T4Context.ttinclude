<#@ assembly name="EnvDTE" #>
<#@ assembly name="EnvDTE80" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="EnvDTE80" #>
<#+
// <copyright file="NTierEF.T4Context.ttinclude" company="Trivadis">
//     Copyright © Trivadis. All Rights Reserved.
// </copyright>
public static class T4Context
{
    private static readonly Lazy<Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost> _host = new Lazy<Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost>(() =>
	{
		Type type = typeof(T4Toolbox.TransformationContext);
		try
		{
			// VS2012: TransformationContext.Current.Host
			T4Toolbox.TransformationContext current = (T4Toolbox.TransformationContext)type.GetProperty("Current", System.Reflection.BindingFlags.Static | System.Reflection.BindingFlags.Public).GetValue(null, null);
			return (Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost)type.GetProperty("Host", System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public).GetValue(current, null);
		}
		catch
		{
			// VS2010: TransformationContext.Host
			return (Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost)type.GetProperty("Host", System.Reflection.BindingFlags.Static | System.Reflection.BindingFlags.Public).GetValue(null, null);
		}
	});
	
    private static readonly Lazy<DTE2> _dte = new Lazy<DTE2>(() =>
	{
		Type type = typeof(T4Toolbox.TransformationContext);
		try
		{
			// VS2012: (DTE2)TransformationContext.Current.GetService(typeof(DTE))
			T4Toolbox.TransformationContext current = (T4Toolbox.TransformationContext)type.GetProperty("Current", System.Reflection.BindingFlags.Static | System.Reflection.BindingFlags.Public).GetValue(null, null);
			return (DTE2)type.GetMethod("GetService", System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public).Invoke(current, new object[]{ typeof(DTE) });
		}
		catch
		{
			// VS2010: (DTE2)TransformationContext.DTE
			return (DTE2)type.GetProperty("DTE", System.Reflection.BindingFlags.Static | System.Reflection.BindingFlags.Public).GetValue(null, null);
		}
	});
    
	public static Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost Host
    {
        get
        {
            return _host.Value;
        }
    }

    public static DTE2 DTE
    {
        get
        {
            return _dte.Value;
        }
    }

    public static Project Project
    {
        get
        {
            ProjectItem projectItem = T4Context.DTE.Solution.FindProjectItem(T4Context.Host.TemplateFile);
            Project project = projectItem.ContainingProject;
            return project;
        }
    }
}
#>
