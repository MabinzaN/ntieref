<#@ include file="NTierEF.EntityTT.CS.ttinclude" #>
<#@ include file="NTierEF.EntityMetadataTT.CS.ttinclude" #>
<#@ include file="NTierEF.ComplexTypeTT.CS.ttinclude" #>
<#@ include file="NTierEF.ComplexTypeMetadataTT.CS.ttinclude" #>
<#@ include file="NTierEF.ChangeSetTT.CS.ttinclude" #>
<#@ include file="NTierEF.ResultSetTT.CS.ttinclude" #>
<#+
// <copyright file="NTierEF.DataModelCodeGen.CS.ttinclude" company="Trivadis">
//     Copyright © Trivadis. All Rights Reserved.
// </copyright>
public class DataModelCodeGenerator : Generator
{
    private readonly GenerationUtils GenerationUtils;
    private readonly string DataModelProject = string.Empty;

    public DataModelCodeGenerator(string dataModelProject, GenerationUtils generationUtils, string modelNamespace)
    {
        this.GenerationUtils = generationUtils;
        this.DataModelProject = dataModelProject;

        this.EntityTemplate = new EntityTemplate(DataModelProject, GenerationUtils, modelNamespace);
        this.EntityMetadataTemplate = new EntityMetadataTemplate(DataModelProject, GenerationUtils, modelNamespace);
        this.ComplexTypeTemplate = new ComplexTypeTemplate(DataModelProject, GenerationUtils, modelNamespace);
        this.ComplexTypeMetadataTemplate = new ComplexTypeMetadataTemplate(DataModelProject, GenerationUtils, modelNamespace);
        this.ChangeSetTemplate = new ChangeSetTemplate(DataModelProject, GenerationUtils, modelNamespace);
        this.ResultSetTemplate = new ResultSetTemplate(DataModelProject, GenerationUtils, modelNamespace);
    }

    /// <summary>
    /// Gets or sets the template that generates the entity types of the entity model.
    /// </summary>
    /// <remarks>
    /// You can customize generation by replacing the default template
    /// with your custom version derived from <see cref="EntityTemplate"/>.
    /// </remarks>
    public EntityTemplate EntityTemplate;

    /// <summary>
    /// Gets or sets the template that generates the entity generationUtils types of the entity model.
    /// </summary>
    /// <remarks>
    /// You can customize generation by replacing the default template
    /// with your custom version derived from <see cref="EntityMetadataTemplate"/>.
    /// </remarks>
    public EntityMetadataTemplate EntityMetadataTemplate;

    /// <summary>
    /// Gets or sets the template that generates the complext types of the entity model.
    /// </summary>
    /// <remarks>
    /// You can customize generation by replacing the default template
    /// with your custom version derived from <see cref="ComplexTypeTemplate"/>.
    /// </remarks>
    public ComplexTypeTemplate ComplexTypeTemplate;

    /// <summary>
    /// Gets or sets the template that generates the complext type's metatdata of the entity model.
    /// </summary>
    /// <remarks>
    /// You can customize generation by replacing the default template
    /// with your custom version derived from <see cref="ComplexTypeMetadataTemplate"/>.
    /// </remarks>
    public ComplexTypeMetadataTemplate ComplexTypeMetadataTemplate;

    /// <summary>
    /// Gets or sets the template that generates the change set for the entity model.
    /// </summary>
    /// <remarks>
    /// You can customize generation by replacing the default template
    /// with your custom version derived from <see cref="ChangeSetTemplate"/>.
    /// </remarks>
    public ChangeSetTemplate ChangeSetTemplate;

    /// <summary>
    /// Gets or sets the template that generates the result set for the entity model.
    /// </summary>
    /// <remarks>
    /// You can customize generation by replacing the default template
    /// with your custom version derived from <see cref="ResultSetTemplate"/>.
    /// </remarks>
    public ResultSetTemplate ResultSetTemplate;

    /// <summary>
    /// Generates data access classes.
    /// </summary>
    protected override void RunCore()
    {
        CreateEntities();
        CreateEntityMetadata();
        CreateComplexTypes();
        CreateComplexTypesMetadata();
        CreateChangeSet();
        CreateResultSet();
    }

    private void CreateEntities()
    {
        if (EntityTemplate != null)
        {
            foreach (EntityType entity in GenerationUtils.ItemCollection.GetItems<EntityType>())
            {
                EntityTemplate.EntityName = entity.Name;
                EntityTemplate.Render();
            }
        }
    }

    private void CreateEntityMetadata()
    {
        if (EntityMetadataTemplate != null)
        {
            foreach (EntityType entity in GenerationUtils.ItemCollection.GetItems<EntityType>())
            {
                EntityMetadataTemplate.EntityName = entity.Name;
                EntityMetadataTemplate.Render();
            }
        }
    }

    private void CreateComplexTypes()
    {
        if (ComplexTypeTemplate != null)
        {
            foreach (ComplexType complex in GenerationUtils.ItemCollection.GetItems<ComplexType>())
            {
                ComplexTypeTemplate.ClassName = complex.Name;
                ComplexTypeTemplate.Render();
            }
        }
    }

    private void CreateComplexTypesMetadata()
    {
        if (ComplexTypeMetadataTemplate != null)
        {
            foreach (ComplexType complex in GenerationUtils.ItemCollection.GetItems<ComplexType>())
            {
                ComplexTypeMetadataTemplate.ClassName = complex.Name;
                ComplexTypeMetadataTemplate.Render();
            }
        }
    }

    private void CreateChangeSet()
    {
        if (ChangeSetTemplate != null)
        {
            ChangeSetTemplate.Render();
        }
    }

    private void CreateResultSet()
    {
        if (ResultSetTemplate != null)
        {
            ResultSetTemplate.Render();
        }
    }
}
#>
