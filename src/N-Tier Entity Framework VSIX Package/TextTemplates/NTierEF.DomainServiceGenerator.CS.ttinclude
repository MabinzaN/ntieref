<#@ include file="T4Toolbox.tt" #>
<#@ include file="NTierEF.T4Context.ttinclude" #>
<#@ include file="NTierEF.ProjectUtility.ttinclude" #>
<#@ include file="NTierEF.EF.Utility.CS.ttinclude" #>
<#@ include file="NTierEF.DomainServiceTT.CS.ttinclude" #>
<#+
// <copyright file="NTierEF.DomainServiceGenerator.CS.ttinclude" company="Trivadis">
//     Copyright © Trivadis. All Rights Reserved.
// </copyright>
public class DomainServiceGenerator : Generator
{
    private const string DefaultDataModelProject = @"..\..\Common\{0}.Common.Domain.Model\{0}.Common.Domain.Model.csproj";
    private const string DefaultClientLibraryProject = @"..\..\Client\{0}.Client.Domain\{0}.Client.Domain.csproj";
    private const string DefaultEdmxProject = @"..\..\Server\{0}.Server.Domain.Edmx\{0}.Server.Domain.Edmx.csproj";

    private readonly EdmUtility EdmUtility;

    public DomainServiceGenerator(object textTransformation, string modelFile = null)
    {
        //var file = T4Context.Host.TemplateFile;
        //var fileName = System.IO.Path.GetFileNameWithoutExtension(file);

        if (string.IsNullOrEmpty(modelFile))
        {
            var projectUtility = new ProjectUtility(EdmxProject);
            var path = projectUtility.GetProjectDirectory();
            var file = string.Format("{0}.edmx", System.IO.Path.GetFileNameWithoutExtension(T4Context.Host.TemplateFile));

            modelFile = System.IO.Path.Combine(path, file);


            if (!System.IO.File.Exists(modelFile) && file.EndsWith("DomainService.edmx", StringComparison.InvariantCultureIgnoreCase))
            {
                file = string.Format("{0}Model.edmx", file.Substring(0, file.Length - 18));
                modelFile = System.IO.Path.Combine(path, file);
            }
        }

        this.EdmUtility = new EdmUtility(textTransformation, modelFile);

        this.DomainServiceTemplate = new DomainServiceTemplate(this.EdmUtility, defaultNameSpace: DomainServiceNamespace, modelNamespace: DataModelNamespace, clientLibraryNamespace: ClientLibraryNamespace);
    }

    private static string DomainServiceNamespace { get { return EdmUtility.GetDefaultNamespace(); } }
    private static string DataModelNamespace { get { return EdmUtility.GetDefaultNamespace(DataModelProject); } }
    private static string ClientLibraryNamespace { get { return EdmUtility.GetDefaultNamespace(ClientLibraryProject); } }

    private static string DefaultProjectBaseName
    {
        get
        {
            var proj = T4Context.Project.FileName;
            string projectFileName = System.IO.Path.GetFileNameWithoutExtension(T4Context.Project.FileName);
            if (projectFileName.ToLower().Contains(".riaserviceslibrary.web"))
            {
                return projectFileName.Substring(0, projectFileName.ToLower().IndexOf(".riaserviceslibrary.web"));
            }
            if (projectFileName.ToLower().Contains(".wcfriaserviceslibrary.web"))
            {
                return projectFileName.Substring(0, projectFileName.ToLower().IndexOf(".wcfriaserviceslibrary.web"));
            }
            throw new Exception("Projects do not use default names. Projects need to be specified for NTierEntityGenerator. (" + projectFileName + ")");
        }
    }

    public static string DataModelProject
    {
        set { _dataModelProject = value; }
        get
        {
            if (_dataModelProject == null)
                return string.Format(DefaultDataModelProject, DefaultProjectBaseName);
            return _dataModelProject;
        }
    }
    private static string _dataModelProject = null;

    public static string ClientLibraryProject
    {
        set { _clientLibraryProject = value; }
        get
        {
            return _clientLibraryProject == null ?
                string.Format(DefaultClientLibraryProject, DefaultProjectBaseName) :
                _clientLibraryProject;
        }
    }
    private static string _clientLibraryProject = null;

    public static string EdmxProject
    {
        set { _edmxProject = value; }
        get
        {
            return _edmxProject == null ?
                string.Format(DefaultEdmxProject, DefaultProjectBaseName) :
                _edmxProject;
        }
    }
    private static string _edmxProject = null;

    #region code generators

    /// <summary>
    /// Gets or sets the template that generates a domain service for the entity model.
    /// </summary>
    /// <remarks>
    /// You can customize generation by replacing the default template
    /// with your custom version derived from <see cref="DomainServiceTemplate"/>.
    /// </remarks>
    public DomainServiceTemplate DomainServiceTemplate;
    #endregion

    #region generation methods
    /// <summary>
    /// Generates data access classes.
    /// </summary>
    protected override void RunCore()
    {
        if (EdmUtility.Container == null)
        {
            // No EntityContainer exists in the model, so no code may be generated
            return;
        }

        CreateDomainService();
    }

    private void CreateDomainService()
    {
        if (DomainServiceTemplate != null)
        {
            DomainServiceTemplate.Render();
        }
    }
    #endregion
}
#>
