<#+
// <copyright file="NTierEF.DomainServiceTT.CS.ttinclude" company="Trivadis">
//     Copyright © Trivadis. All Rights Reserved.
// </copyright>
public class DomainServiceTemplate : Template
{
    public GenerationUtils GenerationUtils { get; set; }
    public bool GenerateModificationMethods { get; set; }
    public string Namespace { get; set; }
    public string ModelNamespace { get; set; }
    public string ClientLibraryNamespace { get; set; }
    private string file = null;
    public string File
    {
        get { return file != null ? file : string.Format(@"{0}DomainService.cs", GenerationUtils.ModelName); }
        set { file = value; }
    }

    public DomainServiceTemplate(GenerationUtils GenerationUtils = null, string project = null, string defaultNameSpace = null, string modelNamespace = null, string clientLibraryNamespace = null)
    {
        if (!string.IsNullOrWhiteSpace(project))
        {
            base.Output.Project = project;
        }
        base.Output.PreserveExistingFile = true;
        this.GenerationUtils = GenerationUtils;
        this.GenerateModificationMethods = true;
        this.Namespace = defaultNameSpace;
        this.ModelNamespace = modelNamespace;
        this.ClientLibraryNamespace = clientLibraryNamespace;
    }

    /// <summary>
    /// Directs output of the template to a separate file by default. User can override
    /// default behavior by assigning <see cref="Rendering"/> event handler.
    /// </summary>
    protected override void OnRendering(System.EventArgs e)
    {
        if (GenerationUtils == null)
        {
            throw new Exception("Missing property GenerationUtils");
        }
        if (string.IsNullOrWhiteSpace(Namespace))
        {
            throw new Exception("Missing property Namespace");
        }
        if (string.IsNullOrWhiteSpace(ModelNamespace))
        {
            throw new Exception("Missing property ModelNamespace");
        }
        if (string.IsNullOrWhiteSpace(ClientLibraryNamespace))
        {
            throw new Exception("Missing property ClientLibraryNamespace");
        }

        this.Output.File = this.File;
        base.OnRendering(e);
    }

    public override string TransformText()
    {
        WriteHeader(ModelNamespace + "." + GenerationUtils.ModelName, ClientLibraryNamespace);
#>

namespace <#=GenerationUtils.Code.EscapeNamespace(Namespace)#>
{
    [EnableClientAccess]
    public partial class  <#=GenerationUtils.ModelName#>DomainService : DomainService
    {
        protected readonly <#=GenerationUtils.ModelName#>DataContext DataContext = new <#=GenerationUtils.ModelName#>DataContext();

<#+
        foreach (EntitySet entitySet in GenerationUtils.Container.BaseEntitySets.OfType<EntitySet>())
        {
#>

        #region <#=GenerationUtils.Code.Escape(entitySet.ElementType)#>
        public IQueryable<<#=GenerationUtils.Code.Escape(entitySet.ElementType)#>> Get<#=GenerationUtils.Code.Escape(entitySet)#>()
        {
            return DataContext.<#=GenerationUtils.Code.Escape(entitySet)#>.AsQueryable();
        }
<#+
            if (GenerateModificationMethods)
            {
#>

        public void Insert<#=GenerationUtils.Code.Escape(entitySet.ElementType)#>(<#=GenerationUtils.Code.Escape(entitySet.ElementType)#> <#=FirstCaseLow(GenerationUtils.Code.Escape(entitySet.ElementType))#>)
        {
            DataContext.Add(<#=FirstCaseLow(GenerationUtils.Code.Escape(entitySet.ElementType))#>);
        }

        public void Update<#=GenerationUtils.Code.Escape(entitySet.ElementType)#>(<#=GenerationUtils.Code.Escape(entitySet.ElementType)#> <#=FirstCaseLow(GenerationUtils.Code.Escape(entitySet.ElementType))#>)
        {
            DataContext.AttachAsModified(<#=FirstCaseLow(GenerationUtils.Code.Escape(entitySet.ElementType))#>, ChangeSet.GetOriginal(<#=FirstCaseLow(GenerationUtils.Code.Escape(entitySet.ElementType))#>));
        }

        public void Delete<#=GenerationUtils.Code.Escape(entitySet.ElementType)#>(<#=GenerationUtils.Code.Escape(entitySet.ElementType)#> <#=FirstCaseLow(GenerationUtils.Code.Escape(entitySet.ElementType))#>)
        {
            DataContext.Delete(<#=FirstCaseLow(GenerationUtils.Code.Escape(entitySet.ElementType))#>);
        }
<#+
            }
#>
        #endregion
<#+
        }
#>


        public override bool Submit(ChangeSet changeSet)
        {
            var isSuccessfull = base.Submit(changeSet);

            if (isSuccessfull)
            {
                DataContext.SaveChanges();
            }

            return isSuccessfull;
        }
    }
}
<#+
        return this.GenerationEnvironment.ToString();
    }


    private void WriteHeader(params string[] extraUsings)
    {
#>
//------------------------------------------------------------------------------
// <autogenerated>
//   This file was originally generated by T4 code generator <#= System.IO.Path.GetFileName(T4Context.Host.TemplateFile) #>.
//   This file is meant to be edited manually and modifications do not get lost on regeneration.
//   In case you want this file to be deleted or regenerated you have to remove (e.g. delete or rename) the existing version manually.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.ServiceModel.DomainServices.Hosting;
using System.ServiceModel.DomainServices.Server;

<#=String.Join(String.Empty, extraUsings.OrderBy(u => u).Select(u => "using " + u + ";" + Environment.NewLine).ToArray())#>
<#+
    }

    private string FirstCaseLow(string value)
    {
        if (string.IsNullOrWhiteSpace(value))
        {
            return value;
        }

        return value.Substring(0, 1).ToLower() + value.Substring(1, value.Length - 1);
    }
}
#>
