<#@ include file="T4Toolbox.tt" #>
<#@ include file="NTierEF.T4Context.ttinclude" #>
<#@ include file="NTierEF.ProjectUtility.ttinclude" #>
<#@ include file="NTierEF.EF.Utility.CS.ttinclude" #>
<#@ include file="NTierEF.SL.DataModelCodeGenerator.CS.ttinclude" #>
<#@ include file="NTierEF.SL.DataServiceContractTT.CS.ttinclude" #>
<#@ include file="NTierEF.SL.ClientDataContextInterfaceTT.CS.ttinclude" #>
<#@ include file="NTierEF.SL.ClientDataContextTT.CS.ttinclude" #>
<#@ include file="NTierEF.SL.ChangeSetFactoryInterfaceTT.CS.ttinclude" #>
<#@ include file="NTierEF.SL.ChangeSetFactoryTT.CS.ttinclude" #>
<#+
// <copyright file="NTierEF.SL.NTierEntityGenerator.CS.ttinclude" company="Trivadis">
//     Copyright © Trivadis. All Rights Reserved.
// </copyright>
public partial class NTierEntityGenerator : Generator
{
    // project configuration: this section has to be configured according your project
    private const string DefaultClientLibraryProject = @"..\..\Client\{0}.Client.Domain\{0}.Client.Domain.csproj";
    private const string DefaultDataModelProject = @"..\..\Common\{0}.Common.Domain.Model\{0}.Common.Domain.Model.csproj";
    private const string DefaultDataServiceContractProject = @"..\..\Common\{0}.Common.Domain.Service\{0}.Common.Domain.Service.csproj";
    private const string DefaultEdmxProject = @"..\..\Server\{0}.Server.Domain.Edmx\{0}.Server.Domain.Edmx.csproj";

    private readonly string BaseNamespace;
    private readonly EdmUtility EdmUtility;

    public NTierEntityGenerator(object textTransformation, string modelFile = null, string baseNamespace = null)
    {
        if (string.IsNullOrEmpty(modelFile))
        {
            var projectUtility = new ProjectUtility(EdmxProject);
            var path = projectUtility.GetProjectDirectory();
            var file = string.Format("{0}.edmx", System.IO.Path.GetFileNameWithoutExtension(T4Context.Host.TemplateFile));
            modelFile = System.IO.Path.Combine(path, file);
        }

        if (!string.IsNullOrEmpty(baseNamespace))
        {
            this.BaseNamespace = baseNamespace;
        }
        else
        {
            this.BaseNamespace = DefaultProjectBaseName;
        }

        this.EdmUtility = new EdmUtility(textTransformation, modelFile);

        BeforeInitializing(modelFile);

        this.DataModelCodeGenerator = new DataModelCodeGenerator(this.EdmUtility, DataModelProject, DataModelNamespace);
        this.DataServiceContractTemplate = new DataServiceContractTemplate(this.EdmUtility, DataServiceContractNamespace, DataModelNamespace);
        this.ClientDataContextInterfaceTemplate = new ClientDataContextInterfaceTemplate(this.EdmUtility, ClientLibraryNamespace, DataModelNamespace);
        this.ClientDataContextTemplate = new ClientDataContextTemplate(this.EdmUtility, ClientLibraryNamespace, DataModelNamespace, DataServiceContractNamespace);
        this.ChangeSetFactoryInterfaceTemplate = new ChangeSetFactoryInterfaceTemplate(this.EdmUtility, ClientLibraryNamespace, DataModelNamespace);
        this.ChangeSetFactoryTemplate = new ChangeSetFactoryTemplate(this.EdmUtility, ClientLibraryNamespace, DataModelNamespace);
 
        OnInitializing();
    }

    partial void BeforeInitializing(string modelFilePath);

    partial void OnInitializing();

    partial void OnCodeGenerating();

    partial void OnCodeGenerated();

    private static string SilverlightLibraryNamespace { get { return EdmUtility.GetDefaultNamespace(); } }
    private static string DataModelNamespace { get { return EdmUtility.GetDefaultNamespace(DataModelProject); } }
    private static string DataServiceContractNamespace { get { return EdmUtility.GetDefaultNamespace(DataServiceContractProject); } }
    private static string ClientLibraryNamespace { get { return EdmUtility.GetDefaultNamespace(ClientLibraryProject); } }

    private static string DefaultProjectBaseName
    {
        get
        {
            var proj = T4Context.Project.FileName;
            var defaultNamespace = EdmUtility.GetDefaultNamespace(proj);
            return defaultNamespace;
            //string projectFileName = System.IO.Path.GetFileNameWithoutExtension(T4Context.Project.FileName);
            //if (!projectFileName.Contains(".Silverlight.Domain.Library"))
            //{
            //    throw new Exception("Projects do not use default names. Projects need to be specified for NTierEntityGenerator. (" + projectFileName + ")");
            //}
            //return projectFileName.Substring(0, projectFileName.IndexOf(".Silverlight.Domain.Library"));
        }
    }

    public static string ClientLibraryProject
    {
        set { _clientLibraryProject = value; }
        get { return ProjectUtility.ResolveProjectPath(T4Context.GetFullPath(_clientLibraryProject ?? string.Format(DefaultClientLibraryProject, DefaultProjectBaseName))); }
    }
    private static string _clientLibraryProject = null;

    public static string DataModelProject
    {
        set { _dataModelProject = value; }
        get { return ProjectUtility.ResolveProjectPath(T4Context.GetFullPath(_dataModelProject ?? string.Format(DefaultDataModelProject, DefaultProjectBaseName))); }
    }
    private static string _dataModelProject = null;

    public static string DataServiceContractProject
    {
        set { _dataServiceContractProject = value; }
        get { return ProjectUtility.ResolveProjectPath(T4Context.GetFullPath(_dataServiceContractProject ?? string.Format(DefaultDataServiceContractProject, DefaultProjectBaseName))); }
    }
    private static string _dataServiceContractProject = null;

    public static string EdmxProject
    {
        set { _edmxProject = value; }
        get { return ProjectUtility.ResolveProjectPath(T4Context.GetFullPath(_edmxProject ?? string.Format(DefaultEdmxProject, DefaultProjectBaseName))); }
    }
    private static string _edmxProject = null;

    /// <summary>
    /// Gets or sets the generator that generates the model classes of the entity model.
    /// </summary>
    /// <remarks>
    /// You can customize generation by replacing the default template
    /// with your custom version derived from <see cref="DataModelCodeGenerator"/>.
    /// </remarks>
    public DataModelCodeGenerator DataModelCodeGenerator;

    /// <summary>
    /// Gets or sets the template that generates a data service contract for the entity model.
    /// </summary>
    /// <remarks>
    /// You can customize generation by replacing the default template
    /// with your custom version derived from <see cref="DataServiceContractTemplate"/>.
    /// </remarks>
    public DataServiceContractTemplate DataServiceContractTemplate;

    /// <summary>
    /// Gets or sets the template that generates a client data context interface.
    /// </summary>
    /// <remarks>
    /// You can customize generation by replacing the default template
    /// with your custom version derived from <see cref="ClientDataContextInterfaceTemplate"/>.
    /// </remarks>
    public ClientDataContextInterfaceTemplate ClientDataContextInterfaceTemplate;

    /// <summary>
    /// Gets or sets the template that generates a client data context for the entity model.
    /// </summary>
    /// <remarks>
    /// You can customize generation by replacing the default template
    /// with your custom version derived from <see cref="ClientDataContextTemplate"/>.
    /// </remarks>
    public ClientDataContextTemplate ClientDataContextTemplate;

    /// <summary>
    /// Gets or sets the template that generates a change-set factory interface for the entity model.
    /// </summary>
    /// <remarks>
    /// You can customize generation by replacing the default template
    /// with your custom version derived from <see cref="ChangeSetFactoryInterfaceTemplate"/>.
    /// </remarks>
    public ChangeSetFactoryInterfaceTemplate ChangeSetFactoryInterfaceTemplate;

    /// <summary>
    /// Gets or sets the template that generates a change-set factory for the entity model.
    /// </summary>
    /// <remarks>
    /// You can customize generation by replacing the default template
    /// with your custom version derived from <see cref="ChangeSetFactoryTemplate"/>.
    /// </remarks>
    public ChangeSetFactoryTemplate ChangeSetFactoryTemplate;

    /// <summary>
    /// Generates data access classes.
    /// </summary>
    protected override void RunCore()
    {
        if (EdmUtility.Container == null)
        {
            // No EntityContainer exists in the model, so no code may be generated
            return;
        }

        OnCodeGenerating();

        CreateDataModel();
        CreateDataServiceContract();
        CreateClientDataContextInterface();
        CreateClientDataContext();
        CreateChangeSetFactoryInterface();
        CreateChangeSetFactory();

        OnCodeGenerated();
    }

    private void CreateDataModel()
    {
        if (DataModelCodeGenerator != null)
        {
            DataModelCodeGenerator.Run();
        }
    }

    private void CreateDataServiceContract()
    {
        if (DataServiceContractTemplate != null)
        {
            DataServiceContractTemplate.Render();
        }
    }

    private void CreateClientDataContextInterface()
    {
        if (ClientDataContextInterfaceTemplate != null)
        {
            ClientDataContextInterfaceTemplate.Render();
        }
    }

    private void CreateClientDataContext()
    {
        if (ClientDataContextTemplate != null)
        {
            ClientDataContextTemplate.Render();
        }
    }

    private void CreateChangeSetFactoryInterface()
    {
        if (ChangeSetFactoryInterfaceTemplate != null)
        {
            ChangeSetFactoryInterfaceTemplate.Render();
        }
    }

    private void CreateChangeSetFactory()
    {
        if (ChangeSetFactoryTemplate != null)
        {
            ChangeSetFactoryTemplate.Render();
        }
    }
}
#>
