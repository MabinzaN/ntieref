<#+
// <copyright file="NTierEF.SL.EnumTT.CS.ttinclude" company="Trivadis">
//     Copyright © Trivadis. All Rights Reserved.
// </copyright>
public class EnumTemplate : Template
{
    public EdmUtility EdmUtility { get; set; }
    public string Namespace { get; set; }
    public string EnumName { get; set; }
    private string file = null;
    public string File
    {
        get { return file != null ? file : string.Format(@"Common{2}Domain{2}Model{2}{0}{2}{1}.g.cs", EdmUtility.ModelName, EnumName, System.IO.Path.DirectorySeparatorChar); }
        set { file = value; }
    }

    public EnumTemplate(EdmUtility edmUtility = null, string defaultNameSpace = null, string enumName = null)
    {
        this.EdmUtility = edmUtility;
        this.Namespace = defaultNameSpace;
        this.EnumName = enumName;
    }

    /// <summary>
    /// Directs output of the template to a separate file by default. User can override
    /// default behavior by assigning <see cref="Rendering"/> event handler.
    /// </summary>
    protected override void OnRendering(System.EventArgs e)
    {
        if (EdmUtility == null)
        {
            throw new Exception("Missing property EdmUtility");
        }
        if (string.IsNullOrWhiteSpace(Namespace))
        {
            throw new Exception("Missing property Namespace");
        }
        if (string.IsNullOrWhiteSpace(EnumName))
        {
            throw new Exception("Missing property EnumName");
        }

        this.Output.File = this.File;
        base.OnRendering(e);
    }

    public override string TransformText()
    {
        var code = new CodeGenerationTools(this);
        var typeMapper = EdmUtility.TypeMapper;
        var codeStringGenerator = new CodeStringGenerator(code, EdmUtility.TypeMapper, EdmUtility.EF);
        var enumType = typeMapper.GetEnumItemsToGenerate(EdmUtility.ItemCollection).Single(e => e.Name == EnumName);

        WriteHeader();
#>
namespace <#=Namespace + "." + EdmUtility.ModelName#>
{
<#+
    if (typeMapper.EnumIsFlags(enumType))
    {
#>
    [Flags]
<#+
    }
#>
    <#=codeStringGenerator.EnumOpening(enumType)#>
    {
<#+
    foreach (MetadataItem member in typeMapper.GetEnumMembers(enumType))
    {
#>
        <#=code.Escape(typeMapper.GetEnumMemberName(member))#> = <#=typeMapper.GetEnumMemberValue(member)#>,
<#+
    }
#>
    }
}
<#+
        return this.GenerationEnvironment.ToString();
    }

    private void WriteHeader(params string[] extraUsings)
    {
#>
//------------------------------------------------------------------------------
// <auto-generated>
//   This file was generated by T4 code generator <#= System.IO.Path.GetFileName(T4Context.Host.TemplateFile) #>.
//   Any changes made to this file manually may cause incorrect behavior
//   and will be lost next time the file is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
<#=String.Join(String.Empty, extraUsings.OrderBy(u => u).Select(u => "using " + u + ";" + Environment.NewLine).ToArray())#>
<#+
    }
}
#>
