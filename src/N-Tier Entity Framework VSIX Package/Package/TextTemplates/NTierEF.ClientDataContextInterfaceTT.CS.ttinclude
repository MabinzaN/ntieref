<#+
// <copyright file="NTierEF.ClientDataContextTT.CS.ttinclude" company="Trivadis">
//     Copyright © Trivadis. All Rights Reserved.
// </copyright>
public class ClientDataContextInterfaceTemplate : Template
{
    public GenerationUtils GenerationUtils { get; set; }
    public string Namespace { get; set; }
    public string ClientBaseNamespace { get; set; }
    public string ModelNamespace { get; set; }
    private string file = null;
    public string File
    {
        get { return file != null ? file : string.Format(@"I{0}DataContext.g.cs", GenerationUtils.ModelName); }
        set { file = value; }
    }

    public ClientDataContextInterfaceTemplate(string project = null, GenerationUtils generationUtils = null, string defaultNamespace = null, string modelNamespace = null)
    {
        if (!string.IsNullOrWhiteSpace(project))
        {
            base.Output.Project = project;
        }
        this.GenerationUtils = generationUtils;
        this.Namespace = defaultNamespace;
        this.ClientBaseNamespace = "NTier.Client.Domain";
        this.ModelNamespace = modelNamespace;
    }

    /// <summary>
    /// Directs output of the template to a separate file by default. User can override
    /// default behavior by assigning <see cref="Rendering"/> event handler.
    /// </summary>
    protected override void OnRendering(System.EventArgs e)
    {
        if (GenerationUtils == null)
        {
            throw new Exception("Missing property GenerationUtils");
        }
        if (string.IsNullOrWhiteSpace(Namespace))
        {
            throw new Exception("Missing property Namespace");
        }
        if (string.IsNullOrWhiteSpace(ClientBaseNamespace))
        {
            throw new Exception("Missing property ClientBaseNamespace");
        }
        if (string.IsNullOrWhiteSpace(ModelNamespace))
        {
            throw new Exception("Missing property ModelNamespace");
        }

        this.Output.File = this.File;
        base.OnRendering(e);
    }

    public override string TransformText()
    {
        WriteHeader(
            ClientBaseNamespace,
            ModelNamespace + "." + GenerationUtils.ModelName
        );
#>
namespace <#=Namespace#>
{
    public partial interface I<#=GenerationUtils.ModelName#>DataContext : IDataContext
    {

<#+
        foreach (EntitySet entitySet in GenerationUtils.Container.BaseEntitySets.OfType<EntitySet>())
        {
            // skip entities which are marked as non-root
            var isAggregateRoot = !entitySet.ElementType.MetadataProperties.Any(p => p.Name.EndsWith("AggregateRoot") && !bool.Parse(p.Value as string));
            if (!isAggregateRoot) continue;
#>
        #region <#=GenerationUtils.Code.Escape(entitySet)#>

        IEntitySet<<#=GenerationUtils.Code.Escape(entitySet.ElementType)#>> <#=GenerationUtils.Code.Escape(entitySet)#> { get; }

        void Add(<#=GenerationUtils.Code.Escape(entitySet.ElementType)#> entity);
        void Delete(<#=GenerationUtils.Code.Escape(entitySet.ElementType)#> entity);
        void Attach(<#=GenerationUtils.Code.Escape(entitySet.ElementType)#> entity);
        void AttachAsModified(<#=GenerationUtils.Code.Escape(entitySet.ElementType)#> entity, <#=GenerationUtils.Code.Escape(entitySet.ElementType)#> original);
        void Detach(<#=GenerationUtils.Code.Escape(entitySet.ElementType)#> entity);

        #endregion <#=GenerationUtils.Code.Escape(entitySet)#>

<#+
        }
#>
    }
}
<#+
        return this.GenerationEnvironment.ToString();
    }


    private void WriteHeader(params string[] extraUsings)
    {
#>
//------------------------------------------------------------------------------
// <autogenerated>
//   This file was generated by T4 code generator <#= System.IO.Path.GetFileName(TransformationContext.Host.TemplateFile) #>.
//   Any changes made to this file manually may cause incorrect behavior
//   and will be lost next time the file is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
<#=String.Join(String.Empty, extraUsings.OrderBy(u => u).Select(u => "using " + u + ";" + Environment.NewLine).ToArray())#>
<#+
    }

    private bool IsReadWriteAccessibleProperty(EdmMember member)
    {
        string setter = Accessibility.ForWriteOnlyProperty(member);
        string getter = Accessibility.ForReadOnlyProperty(member);

        return getter != "private" && getter != "protected" && setter != "private" && setter != "protected";
    }

    private string FirstCaseLow(string value)
    {
        if (string.IsNullOrWhiteSpace(value))
        {
            return value;
        }

        return value.Substring(0, 1).ToLower() + value.Substring(1, value.Length - 1);
    }
}
#>
